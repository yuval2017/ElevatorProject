{"ast":null,"code":"var _jsxFileName = \"/Users/ywblhytr/Desktop/Elavator/ElevetorProject/src/components/Board.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport '../styles/boardStyles.css';\nimport Elevetor from './Elevator';\nimport { useQueue } from '../context/Queue';\nimport Floor from './Floor';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Board = _ref => {\n  _s();\n  let {\n    rows,\n    columns\n  } = _ref;\n  const squareRef = useRef(null);\n  const [buttonColors, setButtonColors] = useState(Array(rows).fill('green'));\n  const [width, setWidth] = useState(0);\n  const [height, setHight] = useState(0);\n  const [elevatorsData, setElevatorsData] = useState([]);\n  const [floorsData, setFloorsData] = useState(floorsData);\n  const {\n    enqueue,\n    size,\n    dequeue\n  } = useQueue();\n  function initElevatorDta(width) {\n    const elevators = [];\n    for (let i = 0; i < columns; i++) {\n      elevators.push({\n        key: i,\n        y: 0,\n        style: {\n          backgroundColor: 'green',\n          width: `${width}px`,\n          left: `${i * (width - 2)}px`\n        },\n        handleElevetorArrived: handleElevetorArrived(i, 0),\n        occupied: false,\n        currFloor: 0,\n        toFloor: -1\n      });\n    }\n    setElevatorsData(elevators);\n  }\n  function createFloorsData() {\n    floorsData = [];\n    for (let i = 0; i < columns; i++) {\n      floorsData.push({\n        columns: {\n          columns\n        },\n        squareRef: {\n          squareRef\n        },\n        key: `floor-${i}`,\n        index: rows - i - 1,\n        color: buttonColors[rows - i - 1],\n        handleElevatorReservation: handleElevatorReservation\n      });\n    }\n    return floorsData;\n  }\n  //get width and hight for the style of the elevator\n  useEffect(() => {\n    if (squareRef.current) {\n      const {\n        width,\n        height\n      } = squareRef.current.getBoundingClientRect();\n      setWidth(width);\n      setHight(height);\n      initElevatorDta(width);\n    }\n  }, [squareRef]);\n\n  //set bottun color \n  function setBottunColor(bottunIndex, color) {\n    setButtonColors(prevButtonColors => {\n      const newButtonColors = [...prevButtonColors];\n      newButtonColors[bottunIndex] = color;\n      return newButtonColors;\n    });\n  }\n  function handleElevetorArrived(elevatorId, bottunNum) {\n    return () => {\n      const optionalFLoorTo = dequeue();\n      //set bottun color to blue\n      setBottunColor(bottunNum, 'blue');\n      //wait 2 secs\n      setTimeout(() => {\n        //in case there is an floor that wait for elevator\n        if (optionalFLoorTo !== undefined) {\n          console.log(\"arrived wer have mre job\");\n          setBottunColor(bottunNum, 'red');\n          setElevatorsData(prevData => prevData.map(data => data.key === elevatorId ? {\n            ...data,\n            handleElevetorArrived: handleElevetorArrived(data.key, optionalFLoorTo),\n            currFloor: bottunNum,\n            toFloor: optionalFLoorTo,\n            y: -(height - 2) * optionalFLoorTo\n          } : data));\n          setBottunColor(optionalFLoorTo, 'red');\n          //just set occupied and wait for reservetion\n        } else {\n          setElevatorsData(prevData => prevData.map(data => data.key === elevatorId ? {\n            ...data,\n            currFloor: bottunNum,\n            toFloor: -1,\n            occupied: false\n          } : data));\n        }\n        setBottunColor(bottunNum, 'green');\n      }, 2000);\n    };\n  }\n\n  //choose elevator if not found return undifined\n  function chooseTheClosestElevator(toFloor) {\n    let availableElevators = elevatorsData.filter(elevator => !elevator.occupied);\n    if (availableElevators.length === 0) {\n      return undefined;\n    }\n    let closestElevator = availableElevators[0];\n    let closestDistance = Math.abs(availableElevators[0].currFloor - toFloor);\n    for (const object of availableElevators) {\n      const distance = Math.abs(object.currFloor - toFloor);\n      if (distance < closestDistance) {\n        closestDistance = distance;\n        closestElevator = object;\n      }\n    }\n    return closestElevator;\n  }\n\n  //when a floor want elevator reservation\n  function handleElevatorReservation(floorIndex) {\n    //check if there was a reservation\n    if (buttonColors[floorIndex] !== 'green') {\n      console.log(\"here\");\n      return; // Do nothing if the button is red or waiting\n    }\n    //if all the elevators are full put the floor on pending queue\n    let elevator;\n    if (size() > 0 || (elevator = chooseTheClosestElevator(floorIndex)) === undefined) {\n      enqueue(floorIndex);\n      setBottunColor(floorIndex, 'red');\n      //else have elevator change y value and go there\n    } else {\n      const elevatorNumber = elevator.key;\n\n      //stay on the floor\n      if (elevator.currFloor === floorIndex) {\n        setBottunColor(floorIndex, 'blue');\n        setTimeout(() => {\n          setBottunColor(floorIndex, 'green');\n        }, 2000);\n      } else {\n        setBottunColor(floorIndex, 'red');\n        setElevatorsData(prevData => prevData.map(data => {\n          const oldFloor = data.currFloor;\n          return data.key === elevatorNumber ? {\n            ...data,\n            handleElevetorArrived: handleElevetorArrived(data.key, floorIndex),\n            currFloor: oldFloor,\n            toFloor: floorIndex,\n            occupied: true,\n            y: -(height - 2) * floorIndex\n          } : data;\n        }));\n      }\n    }\n  }\n  const createBoard2 = () => {\n    return Array.from({\n      length: rows\n    }, (_, i) => /*#__PURE__*/_jsxDEV(Floor, {\n      columns: columns,\n      squareRef: squareRef,\n      index: rows - i - 1,\n      color: buttonColors[rows - i - 1],\n      handleElevatorReservation: handleElevatorReservation\n    }, `floor-${i}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: [createBoard2(), elevatorsData.map(data => /*#__PURE__*/_jsxDEV(Elevetor, {\n      y: data.y,\n      style: {\n        backgroundColor: 'green',\n        width: `${width}px`,\n        left: `${data.key * (width - 2)}px`\n      },\n      handleElevetorArrived: handleElevetorArrived(data.key, data.toFloor)\n    }, data.key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 11\n  }, this);\n};\n_s(Board, \"7V7X+POh9QRD8cxKhP7UHSOWBS8=\", false, function () {\n  return [useQueue];\n});\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Elevetor","useQueue","Floor","jsxDEV","_jsxDEV","Board","_ref","_s","rows","columns","squareRef","buttonColors","setButtonColors","Array","fill","width","setWidth","height","setHight","elevatorsData","setElevatorsData","floorsData","setFloorsData","enqueue","size","dequeue","initElevatorDta","elevators","i","push","key","y","style","backgroundColor","left","handleElevetorArrived","occupied","currFloor","toFloor","createFloorsData","index","color","handleElevatorReservation","current","getBoundingClientRect","setBottunColor","bottunIndex","prevButtonColors","newButtonColors","elevatorId","bottunNum","optionalFLoorTo","setTimeout","undefined","console","log","prevData","map","data","chooseTheClosestElevator","availableElevators","filter","elevator","length","closestElevator","closestDistance","Math","abs","object","distance","floorIndex","elevatorNumber","oldFloor","createBoard2","from","_","fileName","_jsxFileName","lineNumber","columnNumber","className","children","_c","$RefreshReg$"],"sources":["/Users/ywblhytr/Desktop/Elavator/ElevetorProject/src/components/Board.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport '../styles/boardStyles.css';\nimport Elevetor from './Elevator'\nimport { useQueue } from '../context/Queue';\nimport Floor from './Floor';\n\nconst Board = ({ rows, columns }) => {\n  const squareRef = useRef(null);\n  const [buttonColors, setButtonColors] = useState(Array(rows).fill('green'));\n  const [width, setWidth] = useState(0);\n  const [height, setHight] = useState(0);\n  const [elevatorsData, setElevatorsData] = useState([]);\n  const [floorsData, setFloorsData] = useState(floorsData)\n  const { enqueue, size , dequeue} = useQueue();\n\n\n\nfunction initElevatorDta(width){\n  const elevators = [];\n  for (let i = 0; i < columns; i++) {\n    elevators.push({\n      key: i,\n      y: 0,\n      style: { backgroundColor: 'green', width: `${width}px`, left: `${i*(width-2)}px`},\n      handleElevetorArrived: handleElevetorArrived(i, 0),\n      occupied:false,\n      currFloor: 0,\n      toFloor: -1\n    });\n  }\n  setElevatorsData(elevators);\n}\nfunction createFloorsData(){\n  floorsData = []\n  for (let i = 0; i < columns; i++) {\n    floorsData.push(\n      {columns: {columns},\n      squareRef: {squareRef},\n      key: `floor-${i}`,\n      index:rows - i - 1,\n      color: buttonColors[rows - i - 1],\n      handleElevatorReservation: handleElevatorReservation\n      }\n    )\n  }\n  return floorsData\n}\n  //get width and hight for the style of the elevator\n  useEffect(() => {\n    if (squareRef.current) {\n      const { width, height } = squareRef.current.getBoundingClientRect();\n      setWidth(width)\n      setHight(height)\n      initElevatorDta(width)\n    }\n  }, [squareRef]);\n\n//set bottun color \nfunction setBottunColor(bottunIndex, color){\n    setButtonColors((prevButtonColors) => {\n      const newButtonColors = [...prevButtonColors];\n      newButtonColors[bottunIndex] = color;\n      return newButtonColors;\n    });\n}\n\nfunction handleElevetorArrived(elevatorId, bottunNum){\n  return () => {\n    const optionalFLoorTo = dequeue()\n    //set bottun color to blue\n    setBottunColor(bottunNum, 'blue')\n    //wait 2 secs\n    setTimeout(() => {\n      //in case there is an floor that wait for elevator\n      if (optionalFLoorTo !== undefined) {\n        console.log(\"arrived wer have mre job\")\n        setBottunColor(bottunNum,'red')\n        setElevatorsData(prevData => (prevData.map(data =>\n          data.key === elevatorId?{...data, \n          handleElevetorArrived: handleElevetorArrived(data.key ,optionalFLoorTo),\n          currFloor: bottunNum,\n          toFloor: optionalFLoorTo,\n          y:-(height - 2)*optionalFLoorTo}: \n          data )))\n          setBottunColor(optionalFLoorTo,'red')\n        //just set occupied and wait for reservetion\n      }else{\n        setElevatorsData(prevData => (prevData.map(data =>\n            data.key === elevatorId?{...data, \n            currFloor: bottunNum,\n            toFloor: -1,\n            occupied: false }: \n            data )))\n      }\n      setBottunColor(bottunNum,'green')\n    }, 2000);\n  }\n  \n}\n\n//choose elevator if not found return undifined\nfunction chooseTheClosestElevator(toFloor){\n  \n    let availableElevators = elevatorsData.filter(elevator => !elevator.occupied)\n    if(availableElevators.length === 0){\n      return undefined;\n    }\n    let closestElevator = availableElevators[0];\n    let closestDistance = Math.abs(availableElevators[0].currFloor - toFloor);\n\n    for (const object of availableElevators) {\n      const distance = Math.abs(object.currFloor - toFloor);\n\n      if (distance < closestDistance) {\n        closestDistance = distance;\n        closestElevator = object;\n      }\n  }\n  return closestElevator\n}\n\n//when a floor want elevator reservation\n function handleElevatorReservation(floorIndex) {\n    //check if there was a reservation\n    if (buttonColors[floorIndex] !== 'green') {\n      console.log(\"here\")\n      return; // Do nothing if the button is red or waiting\n    }\n    //if all the elevators are full put the floor on pending queue\n    let elevator;\n    if(size() > 0 || (elevator = chooseTheClosestElevator(floorIndex)) === undefined){\n      enqueue(floorIndex)  \n      setBottunColor(floorIndex,'red')\n  //else have elevator change y value and go there\n    }else{\n      const elevatorNumber = elevator.key\n\n      //stay on the floor\n      if(elevator.currFloor === floorIndex){\n        setBottunColor(floorIndex,'blue')\n        setTimeout(() => {setBottunColor(floorIndex,'green')},2000)\n      }\n      else{\n        setBottunColor(floorIndex,'red')\n        setElevatorsData(prevData => (prevData.map(data =>\n          {\n            const oldFloor = data.currFloor\n            return data.key === elevatorNumber?{...data, \n              handleElevetorArrived: handleElevetorArrived(data.key ,floorIndex),\n              currFloor:oldFloor,\n              toFloor: floorIndex,\n              occupied: true, \n              y:-(height - 2)*floorIndex}: data \n          })))\n      }\n    }\n    \n  }\n\n  const createBoard2 = () => {\n    return Array.from({ length: rows }, (_, i) => (\n      <Floor\n        columns={columns}\n        squareRef = {squareRef}\n        key={`floor-${i}`}\n        index={rows - i - 1}\n        color={buttonColors[rows - i - 1]}\n        handleElevatorReservation={handleElevatorReservation}\n      />\n    ));\n  };\n\n\n  \n  return (<div className=\"board\">\n      {createBoard2()}\n      {elevatorsData.map(data => (\n      <Elevetor\n        key={data.key}\n        y={data.y}\n        style={{backgroundColor: 'green', width: `${width}px`, left: `${data.key*(width-2)}px`}}\n        handleElevetorArrived={handleElevetorArrived(data.key, data.toFloor)}\n      />\n    ))}   \n  </div>);\n  \n};\n\nexport default Board;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}