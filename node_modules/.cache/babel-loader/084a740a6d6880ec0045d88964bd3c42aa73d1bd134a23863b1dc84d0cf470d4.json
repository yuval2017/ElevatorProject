{"ast":null,"code":"var _jsxFileName = \"/Users/ywblhytr/Desktop/Elavator/ElevetorProject/src/components/Board.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport '../styles/boardStyles.css';\nimport { useQueue } from '../context/Queue';\nimport Floor from './Floor';\nimport '../constants/constants';\nimport { BUTTON_STATUS, TIMER, ELEVATOR_COLORS } from '../constants/constants';\nimport { useElevatorController } from '../context/elevatorController';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Board = _ref => {\n  _s();\n  let {\n    rows,\n    columns\n  } = _ref;\n  const [floorsData, setFloorsData] = useState(createFloorsData());\n  const {\n    enqueue,\n    dequeue\n  } = useQueue();\n  //init elevator controller\n  const {\n    squareRef,\n    checkForAvailableElevator,\n    changeElevetorStatus,\n    changeElevatorColor,\n    createElevetorsData\n  } = useElevatorController();\n\n  //that data to change the elevator position, width,hight dynamicly\n\n  //create floors data\n  function createFloorsData() {\n    const ans = [];\n    for (let i = 0; i < rows; i++) {\n      const timesArr = new Array(columns).fill(TIMER.STOP);\n      ans.push({\n        key: `floor-${i}`,\n        index: rows - i - 1,\n        buttonStatus: BUTTON_STATUS.CALL,\n        timeArr: timesArr\n      });\n    }\n    return ans;\n  }\n\n  //init the elevetor data\n\n  //set bottun color \n  function setBottunColor(bottunIndex, newStatus) {\n    setFloorsData(prevData => prevData.map(floorData => floorData.index === bottunIndex ? {\n      ...floorData,\n      buttonStatus: newStatus\n    } : floorData));\n  }\n  function handleElevetorArrived(elevatorId, floorIndex) {\n    return () => {\n      //make it the elivator color to green, and bottun to the new style\n      const optionalFLoorTo = dequeue();\n      changeElevatorColor(elevatorId, ELEVATOR_COLORS.GREEN);\n\n      //set button to arrived\n      setBottunColor(floorIndex, BUTTON_STATUS.ARRIVED);\n      handleClockAction(floorIndex, elevatorId, TIMER.RESET);\n      //wait 2 secs before choose what is the next elevator mission\n      setTimeout(() => {\n        //in case there is an floor that wait for elevator in the pending queue go to that floor\n        if (optionalFLoorTo !== undefined) {\n          //set floor button to waiting status\n          setBottunColor(floorIndex, BUTTON_STATUS.WAITING);\n\n          //start square clock timer\n          handleClockAction(optionalFLoorTo, elevatorId, TIMER.START);\n\n          // //create clouser for the elevator\n          const elevatorArrivedClouser = handleElevetorArrived(elevatorId, optionalFLoorTo);\n\n          // //use elevatorController to move the elevator to the floor\n          changeElevetorStatus(floorIndex, optionalFLoorTo, elevatorId, elevatorArrivedClouser, ELEVATOR_COLORS.RED);\n\n          //change the color to waiting \n          setBottunColor(optionalFLoorTo, BUTTON_STATUS.WAITING);\n\n          //else change the elevator color to black and wait for any reservation\n        } else {\n          changeElevetorStatus(floorIndex, -1, elevatorId, () => {}, ELEVATOR_COLORS.BLACK);\n        }\n        setBottunColor(floorIndex, BUTTON_STATUS.CALL);\n      }, 2000);\n    };\n  }\n  function handleClockAction(floorIndex, elevatorIndex, _ref2) {\n    let {\n      onChange: action,\n      styles: newStyles\n    } = _ref2;\n    //help function\n    function setTime(timersArr) {\n      return timersArr.map((timer, i) => {\n        if (i === elevatorIndex) {\n          return {\n            ...timer,\n            onChange: action,\n            styles: newStyles\n          };\n        } else {\n          return timer;\n        }\n      });\n    }\n    setFloorsData(prevData => prevData.map(floorData => {\n      const newData = floorData.index === floorIndex ? {\n        ...floorData,\n        timeArr: setTime(floorData.timeArr)\n      } : floorData;\n      if (floorData.index === floorIndex) {}\n      return newData;\n    }));\n  }\n\n  //when a floor want elevator reservation\n  function handleElevatorReservation(floorIndex) {\n    //if the elevator controller dont have Available elevator ...\n    let elevator;\n    if ((elevator = checkForAvailableElevator(floorIndex)) === undefined) {\n      enqueue(floorIndex);\n      setBottunColor(floorIndex, BUTTON_STATUS.WAITING);\n\n      //else have elevator change y value and go there\n    } else {\n      const elevatorNumber = elevator.key;\n      //if there is elevatoe in the floor just say the elevator arrived\n      if (elevator.currFloor === floorIndex) {\n        setBottunColor(floorIndex, BUTTON_STATUS.ARRIVED);\n        setTimeout(() => {\n          setBottunColor(floorIndex, BUTTON_STATUS.CALL);\n        }, 2000);\n      } else {\n        //show to clock on the floor index and elivator index\n        handleClockAction(floorIndex, elevatorNumber, TIMER.START);\n\n        //set the floor bottun color\n        setBottunColor(floorIndex, BUTTON_STATUS.WAITING);\n\n        //create clouser for the elevator\n        const elevatorArrivedClouser = handleElevetorArrived(elevatorNumber, floorIndex);\n\n        //use elevatorController to move the elevator\n        changeElevetorStatus(elevator.currFloor, floorIndex, elevatorNumber, elevatorArrivedClouser, ELEVATOR_COLORS.RED);\n      }\n    }\n  }\n  const createBoard2 = () => {\n    return floorsData.map(floorData => /*#__PURE__*/_jsxDEV(Floor, {\n      columns: columns,\n      squareRef: squareRef,\n      index: floorData.index,\n      buttonStatus: floorData.buttonStatus,\n      handleElevatorReservation: handleElevatorReservation,\n      timesData: floorData.timeArr\n    }, floorData.key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: [createBoard2(), createElevetorsData(handleElevetorArrived, columns, rows)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 5\n  }, this);\n};\n_s(Board, \"F1DbDf8DKxnGmGXqCeNEWjBXnJY=\", false, function () {\n  return [useQueue, useElevatorController];\n});\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","useQueue","Floor","BUTTON_STATUS","TIMER","ELEVATOR_COLORS","useElevatorController","jsxDEV","_jsxDEV","Board","_ref","_s","rows","columns","floorsData","setFloorsData","createFloorsData","enqueue","dequeue","squareRef","checkForAvailableElevator","changeElevetorStatus","changeElevatorColor","createElevetorsData","ans","i","timesArr","Array","fill","STOP","push","key","index","buttonStatus","CALL","timeArr","setBottunColor","bottunIndex","newStatus","prevData","map","floorData","handleElevetorArrived","elevatorId","floorIndex","optionalFLoorTo","GREEN","ARRIVED","handleClockAction","RESET","setTimeout","undefined","WAITING","START","elevatorArrivedClouser","RED","BLACK","elevatorIndex","_ref2","onChange","action","styles","newStyles","setTime","timersArr","timer","newData","handleElevatorReservation","elevator","elevatorNumber","currFloor","createBoard2","timesData","fileName","_jsxFileName","lineNumber","columnNumber","className","children","_c","$RefreshReg$"],"sources":["/Users/ywblhytr/Desktop/Elavator/ElevetorProject/src/components/Board.jsx"],"sourcesContent":["import React, {useState } from 'react';\nimport '../styles/boardStyles.css';\nimport { useQueue } from '../context/Queue';\nimport Floor from './Floor';\nimport '../constants/constants'\nimport { BUTTON_STATUS, TIMER, ELEVATOR_COLORS } from '../constants/constants';\nimport { useElevatorController} from '../context/elevatorController';\n\n\n\nconst Board = ({ rows, columns }) => {\n  const [floorsData, setFloorsData] = useState(createFloorsData())\n  const { enqueue , dequeue} = useQueue();\n  //init elevator controller\n  const {\n    squareRef,\n    checkForAvailableElevator, \n    changeElevetorStatus, \n    changeElevatorColor,\n    createElevetorsData} = useElevatorController();\n\n\n//that data to change the elevator position, width,hight dynamicly\n\n\n\n//create floors data\nfunction createFloorsData() {\n  const ans = [];\n  for (let i = 0; i < rows; i++) {\n    const timesArr = new Array(columns).fill(TIMER.STOP); \n    ans.push({\n      key: `floor-${i}`,\n      index: rows - i - 1,\n      buttonStatus: BUTTON_STATUS.CALL,\n      timeArr: timesArr\n    });\n  }\n  return ans;\n}\n\n  //init the elevetor data\n\n\n//set bottun color \nfunction setBottunColor(bottunIndex, newStatus){\n  setFloorsData(prevData =>\n    prevData.map(floorData => floorData.index === bottunIndex?{...floorData, buttonStatus: newStatus}:floorData))\n}\n\n\n\n\n\nfunction handleElevetorArrived(elevatorId, floorIndex){\n  return () => {\n    \n    //make it the elivator color to green, and bottun to the new style\n    const optionalFLoorTo = dequeue()\n    changeElevatorColor(elevatorId,ELEVATOR_COLORS.GREEN)\n\n    //set button to arrived\n    setBottunColor(floorIndex, BUTTON_STATUS.ARRIVED)\n\n    handleClockAction(floorIndex,elevatorId,TIMER.RESET)\n    //wait 2 secs before choose what is the next elevator mission\n    setTimeout(() => {\n\n      //in case there is an floor that wait for elevator in the pending queue go to that floor\n      if (optionalFLoorTo !== undefined) {\n\n        //set floor button to waiting status\n        setBottunColor(floorIndex,BUTTON_STATUS.WAITING)\n\n        //start square clock timer\n        handleClockAction(optionalFLoorTo, elevatorId,TIMER.START)\n\n        // //create clouser for the elevator\n         const elevatorArrivedClouser = handleElevetorArrived(elevatorId ,optionalFLoorTo)\n\n        // //use elevatorController to move the elevator to the floor\n        changeElevetorStatus(floorIndex, optionalFLoorTo, elevatorId, elevatorArrivedClouser, ELEVATOR_COLORS.RED)\n\n        //change the color to waiting \n        setBottunColor(optionalFLoorTo, BUTTON_STATUS.WAITING)\n\n        //else change the elevator color to black and wait for any reservation\n      }else{\n\n        changeElevetorStatus(floorIndex, -1, elevatorId, () => {}, ELEVATOR_COLORS.BLACK)\n      }\n      setBottunColor(floorIndex,BUTTON_STATUS.CALL)\n    }, 2000);\n  }\n  \n}\n\nfunction handleClockAction(floorIndex, elevatorIndex, { onChange: action, styles: newStyles }){\n  //help function\n  function setTime(timersArr) {\n    return timersArr.map((timer, i) => {\n      if (i === elevatorIndex) {\n        return {\n          ...timer,\n          onChange: action,\n          styles: newStyles\n        };\n      } else {\n        return timer;\n      }\n    });\n  }\n\n  setFloorsData(prevData =>\n      prevData.map(floorData =>\n        {\n          const newData = floorData.index === floorIndex? {\n            ...floorData, \n            timeArr: setTime(floorData.timeArr)\n          }:floorData \n          if(floorData.index === floorIndex){\n          }\n          return newData\n        }\n     \n    ))\n}\n\n\n//when a floor want elevator reservation\n function handleElevatorReservation(floorIndex) {\n    //if the elevator controller dont have Available elevator ...\n    let elevator;\n    if((elevator = checkForAvailableElevator(floorIndex)) === undefined){\n      enqueue(floorIndex)  \n      setBottunColor(floorIndex, BUTTON_STATUS.WAITING)\n\n  //else have elevator change y value and go there\n    }else{\n      const elevatorNumber = elevator.key\n      //if there is elevatoe in the floor just say the elevator arrived\n      if(elevator.currFloor === floorIndex){\n        setBottunColor(floorIndex,BUTTON_STATUS.ARRIVED)\n        setTimeout(() => {setBottunColor(floorIndex,BUTTON_STATUS.CALL)},2000)\n      }\n\n      else{\n        //show to clock on the floor index and elivator index\n        handleClockAction(floorIndex, elevatorNumber,TIMER.START)\n\n        //set the floor bottun color\n        setBottunColor(floorIndex,BUTTON_STATUS.WAITING)\n\n        //create clouser for the elevator\n        const elevatorArrivedClouser = handleElevetorArrived(elevatorNumber ,floorIndex)\n\n        //use elevatorController to move the elevator\n        changeElevetorStatus(elevator.currFloor,floorIndex, elevatorNumber, elevatorArrivedClouser ,ELEVATOR_COLORS.RED)\n      }\n    }\n  }\n\n  const createBoard2 = () => {\n    return floorsData.map((floorData) => (\n      <Floor\n        columns={columns}\n        squareRef={squareRef}\n        key={floorData.key}\n        index={floorData.index}\n        buttonStatus={floorData.buttonStatus}\n        handleElevatorReservation={handleElevatorReservation}\n        timesData = {floorData.timeArr}\n      />\n    ));\n  };\n  return (\n    <div className='main'>\n      <div className=\"board\">\n        {createBoard2()}\n        {createElevetorsData(handleElevetorArrived, columns, rows)}\n    </div>\n  </div>);\n  \n};\n\nexport default Board;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}