{"ast":null,"code":"var _jsxFileName = \"/Users/ywblhytr/Desktop/Elavator/-ElevatorProject/src/components/Board.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport '../styles/boardStyles.css';\nimport MovingObject2 from './MovingObject2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Board = _ref => {\n  _s();\n  let {\n    rows,\n    columns\n  } = _ref;\n  const squareRef = useRef(null);\n  const [buttonColors, setButtonColors] = useState(Array(rows).fill('green'));\n  const [width, setWidth] = useState(0);\n  const [height, setHight] = useState(0);\n  const [elevatorsData, setElevatorsData] = useState([]);\n  const [pendingQueue, setPendingQueue] = useState([]);\n\n  //create elevatorsData\n  useEffect(() => {\n    const arr = [];\n    for (let i = 0; i < columns; i++) {\n      arr.push({\n        key: i,\n        y: 0,\n        style: {\n          backgroundColor: 'green',\n          width: `${width}px`,\n          left: `${i * (width - 2)}px`\n        },\n        handleElevetorArrived: () => handleElevetorArrived(i, 0),\n        occupied: false\n      });\n    }\n    setElevatorsData(arr);\n  }, [width]);\n\n  //get width and hight for the style of the elevator\n  useEffect(() => {\n    console.log(\"get width\");\n    if (squareRef.current) {\n      const {\n        width,\n        height,\n        top,\n        left\n      } = squareRef.current.getBoundingClientRect();\n      setWidth(width);\n      setHight(height);\n      //console.log(\"Width X:\", width, \"Height Y:\", height);\n    }\n  }, []);\n\n  //set bottun color \n  function setBottunColor(bottunIndex, color) {\n    setButtonColors(prevButtonColors => {\n      const newButtonColors = [...prevButtonColors];\n      newButtonColors[bottunIndex] = color;\n      return newButtonColors;\n    });\n  }\n  function handleElevetorArrived(elevatorId, bottunNum) {\n    console.log(\"handeling arrived\");\n    //set bottun color\n    setBottunColor(bottunNum, 'blue');\n    //wait 2 secs\n    setTimeout(() => {\n      //in case there is an floor that want an elevator\n      if (pendingQueue.length > 0) {\n        setBottunColor(bottunNum, 'red');\n        const floorNumber = pendingQueue[0];\n        setPendingQueue(prevQueue => prevQueue.slice(1));\n        setElevatorsData(prevData => prevData.map(data => data.key == elevatorId ? {\n          ...data,\n          handleElevetorArrived: () => handleElevetorArrived(data.key, floorNumber),\n          occupied: true,\n          y: -(height - 2) * floorNumber\n        } : data));\n        //\n      } else {\n        setBottunColor(bottunNum, 'green');\n      }\n    }, 2000);\n  }\n  function chooseTheClosestElevator(toFloor) {\n    availableElevators = elevatorsData.filter(elevator => !elevator.occupied);\n    let closestObject = availableElevators[0];\n    let closestDistance = Math.abs(availableElevators[0].position - toFloor);\n    for (const object of availableElevators) {\n      const distance = Math.abs(object.position - toFloor);\n      if (distance < closestDistance) {\n        closestDistance = distance;\n        closestObject = object;\n      }\n    }\n  }\n  //when a floor want elevator reservation\n  function handleElevatorReservation(floorIndex) {\n    //check if there was a reservation\n    if (buttonColors[floorIndex] !== 'green') {\n      console.log(\"here\");\n      return; // Do nothing if the button is red or waiting\n    }\n\n    let elevatorNumber;\n    if (pendingQueue.length > 0 || (elevatorNumber = chooseTheClosestElevator(floorIndex)) === undefined) {\n      setPendingQueue(prevQueue => [...prevQueue, floorIndex]);\n    } else {\n      setElevatorsData(prevData => prevData.map(data => data.key == elevatorNumber ? {\n        ...data,\n        handleElevetorArrived: () => handleElevetorArrived(data.key, floorIndex),\n        y: -(height - 2) * floorIndex\n      } : data));\n    }\n    //set the new y value\n\n    setBottunColor(floorIndex, 'red');\n  }\n\n  //create the board row and columns\n  const createBoard = () => {\n    const board = [];\n    for (let i = 0; i < rows; i++) {\n      const row = [];\n      for (let j = 0; j < columns; j++) {\n        row.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"square p-2 bg-white\",\n          ref: i === 0 && j === 0 ? squareRef : null\n        }, `cell-${i}-${j}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this));\n      }\n      board.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex flex-row align-items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row-number me-2\",\n          children: `${rows - i - 1 == 0 ? \"Grownd Floor\" : rows - i - 1 === 1 ? \"1st\" : rows - i - 1 === 2 ? \"2nd\" : rows - i - 1 === 3 ? \"3nd\" : `${rows - i - 1}th`}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this), row, /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"moving-object-wrapper\",\n          style: {\n            position: 'relative',\n            display: 'inline-block'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            id: `bottun${rows - i - 1}`,\n            disabled: false,\n            className: \"elevator-button-arrived\",\n            style: {\n              backgroundColor: buttonColors[rows - i - 1]\n            },\n            onClick: () => handleElevatorReservation(rows - i - 1),\n            children: \"Call\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this)]\n      }, `row-${i}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this));\n    }\n    return board;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: [createBoard(), elevatorsData.map(data => /*#__PURE__*/_jsxDEV(MovingObject2, {\n      y: data.y,\n      style: {\n        backgroundColor: 'green',\n        width: `${width}px`,\n        left: `${data.key * (width - 2)}px`\n      },\n      handleElevetorArrived: data.handleElevetorArrived\n    }, data.key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 10\n  }, this);\n};\n_s(Board, \"r3xZTeanL9x3E1nLLzMhDB33egk=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useEffect","useRef","useState","MovingObject2","jsxDEV","_jsxDEV","Board","_ref","_s","rows","columns","squareRef","buttonColors","setButtonColors","Array","fill","width","setWidth","height","setHight","elevatorsData","setElevatorsData","pendingQueue","setPendingQueue","arr","i","push","key","y","style","backgroundColor","left","handleElevetorArrived","occupied","console","log","current","top","getBoundingClientRect","setBottunColor","bottunIndex","color","prevButtonColors","newButtonColors","elevatorId","bottunNum","setTimeout","length","floorNumber","prevQueue","slice","prevData","map","data","chooseTheClosestElevator","toFloor","availableElevators","filter","elevator","closestObject","closestDistance","Math","abs","position","object","distance","handleElevatorReservation","floorIndex","elevatorNumber","undefined","createBoard","board","row","j","className","ref","fileName","_jsxFileName","lineNumber","columnNumber","children","display","type","id","disabled","onClick","_c","$RefreshReg$"],"sources":["/Users/ywblhytr/Desktop/Elavator/-ElevatorProject/src/components/Board.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport '../styles/boardStyles.css';\nimport MovingObject2 from './MovingObject2'\n\nconst Board = ({ rows, columns }) => {\n  const squareRef = useRef(null);\n  const [buttonColors, setButtonColors] = useState(Array(rows).fill('green'));\n  const [width, setWidth] = useState(0);\n  const [height, setHight] = useState(0);\n  const [elevatorsData, setElevatorsData] = useState([]);\n  const [pendingQueue, setPendingQueue] = useState([]); \n\n  //create elevatorsData\n  useEffect(() => {\n    const arr = [];\n    for (let i = 0; i < columns; i++) {\n      arr.push({\n        key: i,\n        y: 0,\n        style: { backgroundColor: 'green', width: `${width}px`, left: `${i*(width-2)}px`},\n        handleElevetorArrived: () => handleElevetorArrived(i, 0),\n        occupied:false\n      });\n    }\n    setElevatorsData(arr);\n  }, [width]);\n\n  //get width and hight for the style of the elevator\n  useEffect(() => {\n    console.log(\"get width\")\n    if (squareRef.current) {\n      const { width, height, top, left } = squareRef.current.getBoundingClientRect();\n      setWidth(width)\n      setHight(height)\n      //console.log(\"Width X:\", width, \"Height Y:\", height);\n    }\n  }, []);\n\n//set bottun color \nfunction setBottunColor(bottunIndex, color){\n    setButtonColors((prevButtonColors) => {\n      const newButtonColors = [...prevButtonColors];\n      newButtonColors[bottunIndex] = color;\n      return newButtonColors;\n    });\n}\n\nfunction handleElevetorArrived(elevatorId, bottunNum){\n  console.log(\"handeling arrived\")\n  //set bottun color\n  setBottunColor(bottunNum,'blue')\n  //wait 2 secs\n  setTimeout(() => {\n    //in case there is an floor that want an elevator\n    if (pendingQueue.length > 0) {\n      setBottunColor(bottunNum,'red')\n      const floorNumber = pendingQueue[0];\n      setPendingQueue(prevQueue => prevQueue.slice(1));\n      setElevatorsData(prevData => (prevData.map(data =>\n      data.key == elevatorId?{...data,handleElevetorArrived: ()=>handleElevetorArrived(data.key ,floorNumber) ,occupied:true, y:-(height - 2)*floorNumber}: data )))\n      //\n    }else{\n      setBottunColor(bottunNum,'green')\n    }\n      \n  }, 2000);\n}\nfunction chooseTheClosestElevator(toFloor){\n    availableElevators = elevatorsData.filter(elevator => !elevator.occupied)\n    let closestObject = availableElevators[0];\n    let closestDistance = Math.abs(availableElevators[0].position - toFloor);\n\n    for (const object of availableElevators) {\n      const distance = Math.abs(object.position - toFloor);\n\n      if (distance < closestDistance) {\n        closestDistance = distance;\n        closestObject = object;\n      }\n  }\n}\n//when a floor want elevator reservation\nfunction handleElevatorReservation(floorIndex) {\n  //check if there was a reservation\n  if (buttonColors[floorIndex] !== 'green') {\n    console.log(\"here\")\n    return; // Do nothing if the button is red or waiting\n  }\n  let elevatorNumber;\n  if(pendingQueue.length > 0 || (elevatorNumber = chooseTheClosestElevator(floorIndex)) === undefined){\n    setPendingQueue(prevQueue=>([...prevQueue,floorIndex]))\n  }else{\n    setElevatorsData(prevData => (prevData.map(data =>\n      data.key == elevatorNumber?{...data, handleElevetorArrived: ()=>handleElevetorArrived(data.key ,floorIndex) , y:-(height - 2)*floorIndex}:data )))\n  }\n  //set the new y value\n    \n    setBottunColor(floorIndex,'red')\n  \n  }\n\n\n  //create the board row and columns\n  const createBoard = () => {\n    const board = [];\n    for (let i = 0; i < rows; i++) {\n      const row = [];\n      for (let j = 0; j < columns; j++) {\n        row.push(\n          <div key={`cell-${i}-${j}`} className=\"square p-2 bg-white\" ref={i === 0 && j === 0 ? squareRef : null} />\n        );\n      }\n      board.push(\n        <div key={`row-${i}`} className=\"d-flex flex-row align-items-center\">\n          <div className=\"row-number me-2\">{`${rows-i-1==0?\"Grownd Floor\" : rows-i-1===1?\"1st\":rows-i-1===2?\"2nd\": rows-i-1===3?\"3nd\":`${rows-i-1}th`}`}</div>\n          {row}\n          <div className=\"moving-object-wrapper\" style={{ position: 'relative', display: 'inline-block' }}>\n           \n            <button type=\"button\"\n                id ={`bottun${rows-i-1}`}  \n                disabled={false} className=\"elevator-button-arrived\"  \n                style={{backgroundColor:buttonColors[rows-i-1] }} \n                onClick={()=>handleElevatorReservation(rows-i-1)} >Call</button>\n          </div>\n        </div>\n      );\n    }\n    return board;\n  };\n  \n\n\n  \n  return <div className=\"board\">\n    \n      {createBoard()}\n      {elevatorsData.map(data => (\n      <MovingObject2\n        key={data.key}\n        y={data.y}\n        style={{backgroundColor: 'green', width: `${width}px`, left: `${data.key*(width-2)}px`}}\n        handleElevetorArrived={data.handleElevetorArrived}\n      />\n    ))}\n      \n  </div>;\n  \n};\n\nexport default Board;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}