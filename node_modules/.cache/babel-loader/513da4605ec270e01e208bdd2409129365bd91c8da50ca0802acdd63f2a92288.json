{"ast":null,"code":"var _jsxFileName = \"/Users/ywblhytr/Desktop/Elavator/ElevetorProject/src/components/Board.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport '../styles/boardStyles.css';\nimport Elevetor from './Elevator';\nimport { useQueue } from '../context/Queue';\nimport Floor from './Floor';\nimport { AudioPlayerProvider } from '../context/playMusic';\nimport '../constants/constants';\nimport { audioFilePath } from '../constants/config';\nimport { BUTTON_STATUS, TIMER, ELEVATOR_COLORS } from '../constants/constants';\nimport { useElevatorController } from '../context/elevatorController';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Board = _ref => {\n  _s();\n  let {\n    rows,\n    columns\n  } = _ref;\n  const squareRef = useRef(null);\n  const [floorsData, setFloorsData] = useState(createFloorsData());\n  const {\n    enqueue,\n    dequeue\n  } = useQueue();\n  const {\n    elevatorsData,\n    setElevatorsData,\n    initElevatorDta,\n    checkForAvailableElevator,\n    squareData,\n    setSquareData,\n    moveElevatorToFloor\n  } = useElevatorController();\n\n  //that data to change the elevator position, width,hight dynamicly\n  const width = squareData.width;\n  const height = squareData.height;\n\n  //create floors data\n  function createFloorsData() {\n    const ans = [];\n    for (let i = 0; i < rows; i++) {\n      const timesArr = new Array(columns).fill(TIMER.STOP);\n      ans.push({\n        key: `floor-${i}`,\n        index: rows - i - 1,\n        buttonStatus: BUTTON_STATUS.CALL,\n        timeArr: timesArr\n      });\n    }\n    return ans;\n  }\n\n  //init the elevetor data\n  useEffect(() => {\n    if (squareRef.current) {\n      const {\n        width,\n        height,\n        left,\n        bottom\n      } = squareRef.current.getBoundingClientRect();\n      setSquareData({\n        width,\n        height,\n        left,\n        bottom\n      });\n      initElevatorDta(width);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [width]);\n\n  //set bottun color \n  function setBottunColor(bottunIndex, newStatus) {\n    setFloorsData(prevData => prevData.map(floorData => floorData.index === bottunIndex ? {\n      ...floorData,\n      buttonStatus: newStatus\n    } : floorData));\n  }\n  function handleElevetorArrived(elevatorId, floorIndex) {\n    return () => {\n      //make it the elivator color to green, and bottun to the new style\n      const optionalFLoorTo = dequeue();\n      setElevatorsData(prevData => prevData.map(data => data.key === elevatorId ? {\n        ...data,\n        color: ELEVATOR_COLORS.GREEN\n      } : data));\n      setBottunColor(floorIndex, BUTTON_STATUS.ARRIVED);\n      handleClockAction(floorIndex, elevatorId, TIMER.RESET);\n      //wait 2 secs before choose what is the next elevator mission\n      setTimeout(() => {\n        //in case there is an floor that wait for elevator in the pending queue go to that floor\n        if (optionalFLoorTo !== undefined) {\n          setBottunColor(floorIndex, BUTTON_STATUS.WAITING);\n          handleClockAction(optionalFLoorTo, elevatorId, TIMER.START);\n          const elevatorArrivedClouser = handleElevetorArrived(elevatorId, optionalFLoorTo);\n\n          //use elevatorController to move the elevator\n          //moveElevatorToFloor(optionalFLoorTo, elevatorId, elevatorArrivedClouser)\n\n          setElevatorsData(prevData => prevData.map(data => {\n            const oldFloor = data.currFloor;\n            return data.key === elevatorId ? {\n              ...data,\n              handleElevetorArrived: elevatorArrivedClouser,\n              currFloor: oldFloor,\n              toFloor: optionalFLoorTo,\n              y: -height * optionalFLoorTo,\n              color: 'red',\n              dist: Math.abs(optionalFLoorTo - floorIndex)\n            } : data;\n          }));\n          setBottunColor(optionalFLoorTo, BUTTON_STATUS.WAITING);\n\n          //else change the elevator color to black and wait for any reservation\n        } else {\n          setElevatorsData(prevData => prevData.map(data => data.key === elevatorId ? {\n            ...data,\n            currFloor: floorIndex,\n            toFloor: -1,\n            color: 'black',\n            dist: 0\n          } : data));\n        }\n        setBottunColor(floorIndex, BUTTON_STATUS.CALL);\n      }, 2000);\n    };\n  }\n  function handleClockAction(floorIndex, elevatorIndex, _ref2) {\n    let {\n      onChange: action,\n      styles: newStyles\n    } = _ref2;\n    //help function\n    function setTime(timersArr) {\n      return timersArr.map((timer, i) => {\n        if (i === elevatorIndex) {\n          return {\n            ...timer,\n            onChange: action,\n            styles: newStyles\n          };\n        } else {\n          return timer;\n        }\n      });\n    }\n    setFloorsData(prevData => prevData.map(floorData => {\n      const newData = floorData.index === floorIndex ? {\n        ...floorData,\n        timeArr: setTime(floorData.timeArr)\n      } : floorData;\n      if (floorData.index === floorIndex) {}\n      return newData;\n    }));\n  }\n\n  //when a floor want elevator reservation\n  function handleElevatorReservation(floorIndex) {\n    //if the elevator controller dont have Available elevator ...\n    let elevator;\n    if ((elevator = checkForAvailableElevator(floorIndex)) === undefined) {\n      enqueue(floorIndex);\n      setBottunColor(floorIndex, BUTTON_STATUS.WAITING);\n\n      //else have elevator change y value and go there\n    } else {\n      const elevatorNumber = elevator.key;\n      //if there is elevatoe in the floor just say the elevator arrived\n      if (elevator.currFloor === floorIndex) {\n        setBottunColor(floorIndex, BUTTON_STATUS.ARRIVED);\n        setTimeout(() => {\n          setBottunColor(floorIndex, BUTTON_STATUS.CALL);\n        }, 2000);\n      } else {\n        //show to clock on the floor index and elivator index\n        handleClockAction(floorIndex, elevatorNumber, TIMER.START);\n        //set the floor bottun color\n        setBottunColor(floorIndex, BUTTON_STATUS.WAITING);\n        //create clouser for the elevator\n        const elevatorArrivedClouser = handleElevetorArrived(elevatorNumber, floorIndex);\n        //use elevatorController to move the elevator\n        moveElevatorToFloor(floorIndex, elevatorNumber, elevatorArrivedClouser);\n      }\n    }\n  }\n  const createBoard2 = () => {\n    return floorsData.map(floorData => /*#__PURE__*/_jsxDEV(Floor, {\n      columns: columns,\n      squareRef: squareRef,\n      index: floorData.index,\n      buttonStatus: floorData.buttonStatus,\n      handleElevatorReservation: handleElevatorReservation,\n      timesData: floorData.timeArr\n    }, floorData.key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: [createBoard2(), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"elevators-container\",\n        style: {\n          width: `${width * columns}px`,\n          height: `${height * rows}px`\n        },\n        children: elevatorsData.map(data => /*#__PURE__*/_jsxDEV(AudioPlayerProvider, {\n          path: audioFilePath,\n          index: data.key,\n          children: /*#__PURE__*/_jsxDEV(Elevetor, {\n            y: data.y,\n            color: data.color,\n            style: {\n              width: `${width}px`,\n              height: `${height}px`\n            },\n            handleElevetorArrived: handleElevetorArrived(data.key, data.toFloor),\n            dist: data.dist\n          }, data.key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 11\n          }, this)\n        }, data.key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 9\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 197,\n    columnNumber: 5\n  }, this);\n};\n_s(Board, \"j61tSirHRGJzUfwB/AXRouM7L0c=\", false, function () {\n  return [useQueue, useElevatorController];\n});\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Elevetor","useQueue","Floor","AudioPlayerProvider","audioFilePath","BUTTON_STATUS","TIMER","ELEVATOR_COLORS","useElevatorController","jsxDEV","_jsxDEV","Board","_ref","_s","rows","columns","squareRef","floorsData","setFloorsData","createFloorsData","enqueue","dequeue","elevatorsData","setElevatorsData","initElevatorDta","checkForAvailableElevator","squareData","setSquareData","moveElevatorToFloor","width","height","ans","i","timesArr","Array","fill","STOP","push","key","index","buttonStatus","CALL","timeArr","current","left","bottom","getBoundingClientRect","setBottunColor","bottunIndex","newStatus","prevData","map","floorData","handleElevetorArrived","elevatorId","floorIndex","optionalFLoorTo","data","color","GREEN","ARRIVED","handleClockAction","RESET","setTimeout","undefined","WAITING","START","elevatorArrivedClouser","oldFloor","currFloor","toFloor","y","dist","Math","abs","elevatorIndex","_ref2","onChange","action","styles","newStyles","setTime","timersArr","timer","newData","handleElevatorReservation","elevator","elevatorNumber","createBoard2","timesData","fileName","_jsxFileName","lineNumber","columnNumber","className","children","style","path","_c","$RefreshReg$"],"sources":["/Users/ywblhytr/Desktop/Elavator/ElevetorProject/src/components/Board.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport '../styles/boardStyles.css';\nimport Elevetor from './Elevator'\nimport { useQueue } from '../context/Queue';\nimport Floor from './Floor';\nimport { AudioPlayerProvider } from '../context/playMusic';\nimport '../constants/constants'\nimport {audioFilePath} from '../constants/config'\nimport { BUTTON_STATUS, TIMER, ELEVATOR_COLORS } from '../constants/constants';\nimport { useElevatorController} from '../context/elevatorController';\n\n\n\nconst Board = ({ rows, columns }) => {\n  const squareRef = useRef(null);\n  const [floorsData, setFloorsData] = useState(createFloorsData())\n\n  const { enqueue , dequeue} = useQueue();\n  const {elevatorsData, setElevatorsData, initElevatorDta , checkForAvailableElevator, squareData, setSquareData, moveElevatorToFloor} = useElevatorController();\n\n\n//that data to change the elevator position, width,hight dynamicly\nconst width = squareData.width \nconst height = squareData.height \n\n\n//create floors data\nfunction createFloorsData() {\n  const ans = [];\n  for (let i = 0; i < rows; i++) {\n    const timesArr = new Array(columns).fill(TIMER.STOP); \n    ans.push({\n      key: `floor-${i}`,\n      index: rows - i - 1,\n      buttonStatus: BUTTON_STATUS.CALL,\n      timeArr: timesArr\n    });\n  }\n  return ans;\n}\n\n  //init the elevetor data\n  useEffect(() => {\n    if (squareRef.current) {\n      \n      const { width, height, left, bottom} = squareRef.current.getBoundingClientRect();\n      setSquareData({width, height, left, bottom})\n      \n      initElevatorDta(width)\n    }\n     // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [width]);\n  \n\n//set bottun color \nfunction setBottunColor(bottunIndex, newStatus){\n  setFloorsData(prevData =>\n    prevData.map(floorData => floorData.index===bottunIndex?{...floorData, buttonStatus: newStatus}:floorData))\n}\n\nfunction handleElevetorArrived(elevatorId, floorIndex){\n  return () => {\n    \n    //make it the elivator color to green, and bottun to the new style\n    const optionalFLoorTo = dequeue()\n    setElevatorsData(prevData => (prevData.map(data =>\n      data.key === elevatorId?{\n        ...data, \n        color: ELEVATOR_COLORS.GREEN\n      }: \n      data )))\n    setBottunColor(floorIndex, BUTTON_STATUS.ARRIVED)\n\n    handleClockAction(floorIndex,elevatorId,TIMER.RESET)\n    //wait 2 secs before choose what is the next elevator mission\n    setTimeout(() => {\n      //in case there is an floor that wait for elevator in the pending queue go to that floor\n      if (optionalFLoorTo !== undefined) {\n        setBottunColor(floorIndex,BUTTON_STATUS.WAITING)\n        handleClockAction(optionalFLoorTo, elevatorId,TIMER.START)\n\n        const elevatorArrivedClouser = handleElevetorArrived(elevatorId ,optionalFLoorTo)\n\n        //use elevatorController to move the elevator\n        //moveElevatorToFloor(optionalFLoorTo, elevatorId, elevatorArrivedClouser)\n        \n        setElevatorsData(prevData => (prevData.map(data =>{\n          const oldFloor = data.currFloor\n          return data.key === elevatorId?{...data, \n          handleElevetorArrived: elevatorArrivedClouser,\n          currFloor: oldFloor,\n          toFloor: optionalFLoorTo,\n          y:-(height)*optionalFLoorTo,\n          color: 'red',\n          dist:Math.abs(optionalFLoorTo-floorIndex)\n          }: \n          data })))\n          \n          setBottunColor(optionalFLoorTo, BUTTON_STATUS.WAITING)\n\n        //else change the elevator color to black and wait for any reservation\n      }else{\n        setElevatorsData(prevData => (prevData.map(data =>\n            data.key === elevatorId?{...data, \n            currFloor: floorIndex,\n            toFloor: -1,\n            color:'black',\n            dist: 0       \n          }: \n            data )))\n      }\n      setBottunColor(floorIndex,BUTTON_STATUS.CALL)\n    }, 2000);\n  }\n  \n}\n\n\nfunction handleClockAction(floorIndex, elevatorIndex, { onChange: action, styles: newStyles }){\n\n\n  //help function\n  function setTime(timersArr) {\n    return timersArr.map((timer, i) => {\n      if (i === elevatorIndex) {\n        return {\n          ...timer,\n          onChange: action,\n          styles: newStyles\n        };\n      } else {\n        return timer;\n      }\n    });\n  }\n\n  setFloorsData(prevData =>\n      prevData.map(floorData =>\n        {\n          const newData = floorData.index === floorIndex? {\n            ...floorData, \n            timeArr: setTime(floorData.timeArr)\n          }:floorData \n          if(floorData.index === floorIndex){\n            \n          }\n          return newData\n        }\n     \n    ))\n}\n\n\n//when a floor want elevator reservation\n function handleElevatorReservation(floorIndex) {\n    //if the elevator controller dont have Available elevator ...\n    let elevator;\n    if((elevator = checkForAvailableElevator(floorIndex)) === undefined){\n      enqueue(floorIndex)  \n      setBottunColor(floorIndex, BUTTON_STATUS.WAITING)\n\n  //else have elevator change y value and go there\n    }else{\n      const elevatorNumber = elevator.key\n      //if there is elevatoe in the floor just say the elevator arrived\n      if(elevator.currFloor === floorIndex){\n        setBottunColor(floorIndex,BUTTON_STATUS.ARRIVED)\n        setTimeout(() => {setBottunColor(floorIndex,BUTTON_STATUS.CALL)},2000)\n      }\n      else{\n        //show to clock on the floor index and elivator index\n        handleClockAction(floorIndex, elevatorNumber,TIMER.START)\n        //set the floor bottun color\n        setBottunColor(floorIndex,BUTTON_STATUS.WAITING)\n        //create clouser for the elevator\n        const elevatorArrivedClouser = handleElevetorArrived(elevatorNumber ,floorIndex)\n        //use elevatorController to move the elevator\n        moveElevatorToFloor(floorIndex,elevatorNumber, elevatorArrivedClouser)\n      }\n    }\n  }\n\n  const createBoard2 = () => {\n    return floorsData.map((floorData) => (\n      <Floor\n        columns={columns}\n        squareRef={squareRef}\n        key={floorData.key}\n        index={floorData.index}\n        buttonStatus={floorData.buttonStatus}\n        handleElevatorReservation={handleElevatorReservation}\n        timesData = {floorData.timeArr}\n      />\n    ));\n  };\n  return (\n    <div className='main'>\n      <div className=\"board\">\n        {createBoard2()}\n        <div className='elevators-container' style={{width: `${width*columns}px`,height: `${height*rows}px`}}>\n        {elevatorsData.map(data => (\n        <AudioPlayerProvider path={audioFilePath} key = {data.key} index={data.key}>\n          <Elevetor\n            key={data.key}\n            y={data.y}\n            color={data.color}\n            style={{ width: `${width}px`, height: `${height}px` }}\n            handleElevetorArrived={handleElevetorArrived(data.key, data.toFloor)}\n            dist={data.dist}\n          />\n        </AudioPlayerProvider>\n      ))}\n      </div>\n    </div>\n  </div>);\n  \n};\n\nexport default Board;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}