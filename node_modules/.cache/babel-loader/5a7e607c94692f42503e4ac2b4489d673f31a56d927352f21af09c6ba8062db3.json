{"ast":null,"code":"var _jsxFileName = \"/Users/ywblhytr/Desktop/Elavator/ElevetorProject/src/components/Board.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport '../styles/boardStyles.css';\nimport { useQueue } from '../context/Queue';\nimport '../constants/constants';\nimport { BUTTON_STATUS, TIMER, ELEVATOR_COLORS } from '../constants/constants';\nimport { useElevatorController } from '../context/elevatorController';\nimport { useFloorController } from '../context/floorController';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board(_ref) {\n  _s();\n  let {\n    rows,\n    columns\n  } = _ref;\n  const {\n    handleClockAction,\n    setButtonStatus,\n    floorsData\n  } = useFloorController();\n  const {\n    enqueue,\n    dequeue\n  } = useQueue();\n\n  //init elevator controller\n  const {\n    squareRef,\n    checkForAvailableElevator,\n    changeElevetorStatus,\n    changeElevatorColor,\n    createElevetorsData\n  } = useElevatorController();\n\n  //use this function to handle when elevator arrived\n  function handleElevetorArrived(elevatorId, floorIndex) {\n    return () => {\n      //change the color of the elevator\n      changeElevatorColor(elevatorId, ELEVATOR_COLORS.GREEN);\n\n      //set floor button to arrived\n      setButtonStatus(floorIndex, BUTTON_STATUS.ARRIVED);\n\n      //reset the time and hide stop-watch\n      handleClockAction(floorIndex, elevatorId, TIMER.RESET);\n\n      //check if there is anyone that in pending queue. note.. do this before waiting. \n      const optionalFLoorTo = dequeue();\n\n      //wait 2 secs before next step\n      setTimeout(() => {\n        //we got a floor that waiting to elevator\n        if (optionalFLoorTo !== undefined) {\n          //send the elevator to the floor\n          sendElevetorToFloor(elevatorId, floorIndex, optionalFLoorTo);\n        } else {\n          //back to black and stay on same floor\n          changeElevetorStatus(floorIndex, -1, elevatorId, () => {}, ELEVATOR_COLORS.BLACK);\n        }\n        setButtonStatus(floorIndex, BUTTON_STATUS.CALL);\n      }, 2000);\n    };\n  }\n\n  //when a floor want elevator reservation\n  function handleElevatorReservation(floorIndex) {\n    //check if there is elevator in elevatorController\n\n    //no elevator\n    let elevator;\n    if ((elevator = checkForAvailableElevator(floorIndex)) === undefined) {\n      enqueue(floorIndex);\n      setButtonStatus(floorIndex, BUTTON_STATUS.WAITING);\n\n      //there is a elevator\n    } else {\n      const elevatorNumber = elevator.key;\n\n      //if there is elevator already at the same row\n      if (elevator.currFloor === floorIndex) {\n        setButtonStatus(floorIndex, BUTTON_STATUS.ARRIVED);\n        changeElevatorColor(elevatorNumber, ELEVATOR_COLORS.GREEN);\n        setTimeout(() => {\n          setButtonStatus(floorIndex, BUTTON_STATUS.CALL);\n          changeElevatorColor(elevatorNumber, ELEVATOR_COLORS.BLACK);\n        }, 2000);\n      } else {\n        //set the floor bottun status to waiting\n        setButtonStatus(floorIndex, BUTTON_STATUS.WAITING);\n\n        //send the elevator to this floor\n        sendElevetorToFloor(elevatorNumber, elevator.currFloor, floorIndex);\n      }\n    }\n  }\n  function sendElevetorToFloor(elevatorId, currFLoor, toFloor) {\n    //start the square timer\n    handleClockAction(toFloor, elevatorId, TIMER.START);\n\n    // //create clouser for the elevator\n    const elevatorArrivedClouser = handleElevetorArrived(elevatorId, toFloor);\n\n    // //use elevatorController to move the elevator to the floor\n    changeElevetorStatus(currFLoor, toFloor, elevatorId, elevatorArrivedClouser, ELEVATOR_COLORS.RED);\n  }\n  function createFloors() {\n    return floorsData.map(floorData => /*#__PURE__*/_jsxDEV(Floor, {\n      columns: columns,\n      squareRef: squareRef,\n      index: floorData.index,\n      buttonStatus: floorData.buttonStatus,\n      handleElevatorReservation: handleElevatorReservation,\n      timesData: floorData.timeArr\n    }, floorData.key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 5\n    }, this));\n  }\n  ;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: [createFloors(), createElevetorsData(handleElevetorArrived, columns, rows)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n}\n_s(Board, \"oHRlE+BR36ePQJqDx/+VZ/T2JEQ=\", false, function () {\n  return [useFloorController, useQueue, useElevatorController];\n});\n_c = Board;\n;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useQueue","BUTTON_STATUS","TIMER","ELEVATOR_COLORS","useElevatorController","useFloorController","jsxDEV","_jsxDEV","Board","_ref","_s","rows","columns","handleClockAction","setButtonStatus","floorsData","enqueue","dequeue","squareRef","checkForAvailableElevator","changeElevetorStatus","changeElevatorColor","createElevetorsData","handleElevetorArrived","elevatorId","floorIndex","GREEN","ARRIVED","RESET","optionalFLoorTo","setTimeout","undefined","sendElevetorToFloor","BLACK","CALL","handleElevatorReservation","elevator","WAITING","elevatorNumber","key","currFloor","currFLoor","toFloor","START","elevatorArrivedClouser","RED","createFloors","map","floorData","Floor","index","buttonStatus","timesData","timeArr","fileName","_jsxFileName","lineNumber","columnNumber","className","children","_c","$RefreshReg$"],"sources":["/Users/ywblhytr/Desktop/Elavator/ElevetorProject/src/components/Board.jsx"],"sourcesContent":["import React from 'react';\nimport '../styles/boardStyles.css';\nimport { useQueue } from '../context/Queue';\nimport '../constants/constants'\nimport { BUTTON_STATUS, TIMER, ELEVATOR_COLORS } from '../constants/constants';\nimport { useElevatorController} from '../context/elevatorController';\nimport { useFloorController } from '../context/floorController';\n\n\n\nfunction Board ({ rows, columns }) {\n\n  const {handleClockAction, setButtonStatus, floorsData} = useFloorController()\n\n  const { enqueue , dequeue} = useQueue();\n\n  //init elevator controller\n  const {\n    squareRef,\n    checkForAvailableElevator, \n    changeElevetorStatus, \n    changeElevatorColor,\n    createElevetorsData} = useElevatorController();\n\n\n//use this function to handle when elevator arrived\nfunction handleElevetorArrived(elevatorId, floorIndex){\n  return () => {\n    \n    //change the color of the elevator\n    changeElevatorColor(elevatorId,ELEVATOR_COLORS.GREEN)\n\n    //set floor button to arrived\n    setButtonStatus(floorIndex, BUTTON_STATUS.ARRIVED)\n\n    //reset the time and hide stop-watch\n    handleClockAction(floorIndex,elevatorId,TIMER.RESET)\n\n     \n\n    //check if there is anyone that in pending queue. note.. do this before waiting. \n    const optionalFLoorTo = dequeue()\n\n    //wait 2 secs before next step\n    setTimeout(() => {\n      //we got a floor that waiting to elevator\n      if (optionalFLoorTo !== undefined) {\n        //send the elevator to the floor\n        sendElevetorToFloor(elevatorId, floorIndex, optionalFLoorTo)\n      }else{\n        //back to black and stay on same floor\n        changeElevetorStatus(floorIndex, -1, elevatorId, () => {}, ELEVATOR_COLORS.BLACK)\n      }\n      setButtonStatus(floorIndex,BUTTON_STATUS.CALL)\n    }, 2000);\n  }\n  \n}\n\n//when a floor want elevator reservation\nfunction handleElevatorReservation(floorIndex) {\n  //check if there is elevator in elevatorController\n\n  //no elevator\n  let elevator;\n  if((elevator = checkForAvailableElevator(floorIndex)) === undefined){\n    enqueue(floorIndex)  \n    setButtonStatus(floorIndex, BUTTON_STATUS.WAITING)\n\n//there is a elevator\n  }else{\n    const elevatorNumber = elevator.key\n\n    //if there is elevator already at the same row\n    if(elevator.currFloor === floorIndex) {\n      setButtonStatus(floorIndex,BUTTON_STATUS.ARRIVED)\n      changeElevatorColor(elevatorNumber, ELEVATOR_COLORS.GREEN)\n      setTimeout(() => \n      {\n        setButtonStatus(floorIndex,BUTTON_STATUS.CALL)\n        changeElevatorColor(elevatorNumber, ELEVATOR_COLORS.BLACK)\n      },2000)\n    }\n\n    else{\n      //set the floor bottun status to waiting\n      setButtonStatus(floorIndex, BUTTON_STATUS.WAITING)\n\n      //send the elevator to this floor\n      sendElevetorToFloor(elevatorNumber, elevator.currFloor, floorIndex)\n\n    }\n  }\n}\n\nfunction sendElevetorToFloor(elevatorId, currFLoor, toFloor){\n  //start the square timer\n  handleClockAction(toFloor, elevatorId,TIMER.START)\n\n  // //create clouser for the elevator\n  const elevatorArrivedClouser = handleElevetorArrived(elevatorId ,toFloor)\n\n  // //use elevatorController to move the elevator to the floor\n  changeElevetorStatus(currFLoor, toFloor, elevatorId, elevatorArrivedClouser, ELEVATOR_COLORS.RED)\n}\nfunction createFloors() {\n  return floorsData.map((floorData) => (\n    <Floor\n      columns={columns}\n      squareRef={squareRef}\n      key={floorData.key}\n      index={floorData.index}\n      buttonStatus={floorData.buttonStatus}\n      handleElevatorReservation={handleElevatorReservation}\n      timesData = {floorData.timeArr}\n    />\n  ));\n};\n\n\n  return (\n    <div className='main'>\n      <div className=\"board\">\n        {createFloors()}\n        {createElevetorsData(handleElevetorArrived, columns, rows)}\n    </div>\n  </div>);\n  \n};\n\nexport default Board;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}