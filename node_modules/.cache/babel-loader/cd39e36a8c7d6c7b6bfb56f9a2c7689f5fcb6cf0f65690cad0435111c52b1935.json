{"ast":null,"code":"var _jsxFileName = \"/Users/ywblhytr/Desktop/Elavator/ElevetorProject/src/context/elevatorController.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { ELEVATOR_COLORS } from '../constants/constants';\nimport { useQueue } from './Queue';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ElevatorControllerContext = /*#__PURE__*/createContext();\nexport const useElevatorController = () => {\n  _s();\n  return useContext(ElevatorControllerContext);\n};\n_s(useElevatorController, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nconst ElevatorControllerProvider = _ref => {\n  _s2();\n  let {\n    children,\n    elevatorsNum\n  } = _ref;\n  const [elevatorsData, setElevatorsData] = useState([]);\n  const {\n    size\n  } = useQueue();\n  //choose the colsest elevator, if not exists return undifined\n  function chooseTheClosestElevator(toFloor) {\n    let availableElevators = elevatorsData.filter(elevator => !elevator.occupied);\n    if (availableElevators.length === 0) {\n      return undefined;\n    }\n    let closestElevator = availableElevators[0];\n    let closestDistance = Math.abs(availableElevators[0].currFloor - toFloor);\n    for (const object of availableElevators) {\n      const distance = Math.abs(object.currFloor - toFloor);\n      if (distance < closestDistance) {\n        closestDistance = distance;\n        closestElevator = object;\n      }\n    }\n    return closestElevator;\n  }\n  function checkForAvailableElevator(floorIndex) {\n    // if someone waiting to an elevator\n    if (size() > 0) {\n      return undefined;\n      //use choose closest elevator if there is one..\n    } else {\n      return chooseTheClosestElevator(floorIndex);\n    }\n  }\n\n  // init the elevators\n  function initElevatorDta(width) {\n    const elevators = [];\n    for (let i = 0; i < elevatorsNum; i++) {\n      elevators.push({\n        key: i,\n        y: 0,\n        style: {\n          width: `${width}px`,\n          left: `${i * width}px`\n        },\n        occupied: false,\n        currFloor: 0,\n        toFloor: -1,\n        color: ELEVATOR_COLORS.BLACK,\n        dist: 0\n      });\n    }\n    setElevatorsData(elevators);\n  }\n  function moveElevatorToFloor(floorIndex, handleElevetorArrived, setBottunColor) {\n    //if the elevator controller have no ...\n    let elevator;\n    if ((elevator = checkForAvailableElevator(floorIndex)) === undefined) {\n      enqueue(floorIndex);\n      setBottunColor(floorIndex, BUTTON_STATUS.WAITING);\n\n      //else have elevator change y value and go there\n    } else {\n      const elevatorNumber = elevator.key;\n      //if there is elevatoe in the floor just say the elevator arrived\n      if (elevator.currFloor === floorIndex) {\n        setBottunColor(floorIndex, BUTTON_STATUS.ARRIVED);\n        setTimeout(() => {\n          setBottunColor(floorIndex, BUTTON_STATUS.CALL);\n        }, 2000);\n      }\n\n      //move the elevator to the floor\n      else {\n        handleClockAction(floorIndex, elevatorNumber, TIMER.START);\n        setBottunColor(floorIndex, BUTTON_STATUS.WAITING);\n        setElevatorsData(prevData => prevData.map(data => {\n          const oldFloor = data.currFloor;\n          return data.key === elevatorNumber ? {\n            ...data,\n            handleElevetorArrived: handleElevetorArrived(data.key, floorIndex),\n            currFloor: oldFloor,\n            toFloor: floorIndex,\n            occupied: true,\n            color: 'red',\n            y: -height * floorIndex,\n            dist: Math.abs(oldFloor - floorIndex)\n          } : data;\n        }));\n      }\n    }\n  }\n  const value = {\n    elevatorsData,\n    setElevatorsData,\n    initElevatorDta,\n    checkForAvailableElevator\n  };\n  return /*#__PURE__*/_jsxDEV(ElevatorControllerContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n_s2(ElevatorControllerProvider, \"eneWqj1SNK18jOkyJi8reu68soc=\", false, function () {\n  return [useQueue];\n});\n_c = ElevatorControllerProvider;\nexport default ElevatorControllerProvider;\nvar _c;\n$RefreshReg$(_c, \"ElevatorControllerProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","ELEVATOR_COLORS","useQueue","jsxDEV","_jsxDEV","ElevatorControllerContext","useElevatorController","_s","ElevatorControllerProvider","_ref","_s2","children","elevatorsNum","elevatorsData","setElevatorsData","size","chooseTheClosestElevator","toFloor","availableElevators","filter","elevator","occupied","length","undefined","closestElevator","closestDistance","Math","abs","currFloor","object","distance","checkForAvailableElevator","floorIndex","initElevatorDta","width","elevators","i","push","key","y","style","left","color","BLACK","dist","moveElevatorToFloor","handleElevetorArrived","setBottunColor","enqueue","BUTTON_STATUS","WAITING","elevatorNumber","ARRIVED","setTimeout","CALL","handleClockAction","TIMER","START","prevData","map","data","oldFloor","height","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ywblhytr/Desktop/Elavator/ElevetorProject/src/context/elevatorController.jsx"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\nimport { ELEVATOR_COLORS } from '../constants/constants';\nimport { useQueue } from './Queue';\nconst ElevatorControllerContext = createContext();\n\nexport const useElevatorController = () => {\n  return useContext(ElevatorControllerContext);\n};\n\nconst ElevatorControllerProvider = ({ children, elevatorsNum }) => {\n  const [elevatorsData, setElevatorsData] = useState([]);\n  const {size} = useQueue()\n  //choose the colsest elevator, if not exists return undifined\nfunction chooseTheClosestElevator(toFloor){\n  let availableElevators = elevatorsData.filter(elevator => !elevator.occupied)\n  if(availableElevators.length === 0){\n    return undefined;\n  }\n  let closestElevator = availableElevators[0];\n  let closestDistance = Math.abs(availableElevators[0].currFloor - toFloor);\n\n  for (const object of availableElevators) {\n    const distance = Math.abs(object.currFloor - toFloor);\n\n    if (distance < closestDistance) {\n      closestDistance = distance;\n      closestElevator = object;\n    }\n}\nreturn closestElevator\n}\nfunction checkForAvailableElevator(floorIndex){\n  // if someone waiting to an elevator\n  if(size() > 0){\n    return undefined\n    //use choose closest elevator if there is one..\n  }else{\n    return chooseTheClosestElevator(floorIndex)\n  }\n}\n  \n  // init the elevators\n  function initElevatorDta(width) {\n    const elevators = [];\n    for (let i = 0; i < elevatorsNum; i++) {\n      elevators.push({\n        key: i,\n        y: 0,\n        style: {width: `${width}px`, left: `${i*(width)}px`},\n        occupied: false,\n        currFloor: 0,\n        toFloor: -1,\n        color: ELEVATOR_COLORS.BLACK,\n        dist: 0,\n      });\n    }\n    setElevatorsData(elevators);\n  }\n  function moveElevatorToFloor(floorIndex, handleElevetorArrived, setBottunColor){\n    //if the elevator controller have no ...\n    let elevator;\n    if((elevator = checkForAvailableElevator(floorIndex)) === undefined){\n      enqueue(floorIndex)  \n      setBottunColor(floorIndex, BUTTON_STATUS.WAITING)\n\n  //else have elevator change y value and go there\n    }else{\n      const elevatorNumber = elevator.key\n      //if there is elevatoe in the floor just say the elevator arrived\n      if(elevator.currFloor === floorIndex){\n        setBottunColor(floorIndex,BUTTON_STATUS.ARRIVED)\n        setTimeout(() => {setBottunColor(floorIndex,BUTTON_STATUS.CALL)},2000)\n      }\n      \n      //move the elevator to the floor\n      else{\n\n        handleClockAction(floorIndex, elevatorNumber,TIMER.START)\n        setBottunColor(floorIndex,BUTTON_STATUS.WAITING)\n\n        setElevatorsData(prevData => (prevData.map(data =>\n          {\n            const oldFloor = data.currFloor\n  \n            return data.key === elevatorNumber?\n            {\n              ...data, \n              handleElevetorArrived: handleElevetorArrived(data.key ,floorIndex),\n              currFloor:oldFloor,\n              toFloor: floorIndex,\n              occupied: true, \n              color: 'red',\n              y:-(height)*floorIndex,\n              dist: Math.abs(oldFloor-floorIndex)       \n            }: data \n              \n          })))\n      }\n    }\n  }\n\n  const value = {elevatorsData, setElevatorsData, initElevatorDta, checkForAvailableElevator};\n\n  return (\n    <ElevatorControllerContext.Provider value={value}>\n      {children}\n    </ElevatorControllerContext.Provider>\n  );\n};\n\nexport default ElevatorControllerProvider;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}