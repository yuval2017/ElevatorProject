{"ast":null,"code":"var _jsxFileName = \"/Users/ywblhytr/Desktop/Elavator/ElevetorProject/src/context/ElevatorController.jsx\",\n  _s = $RefreshSig$();\nimport { useQueue } from './Queue';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function useElevatorController(elevatorsData, setElevatorsData, height, setButtonColors) {\n  _s();\n  const {\n    enqueue,\n    size,\n    dequeue\n  } = useQueue();\n\n  //set button color \n  function setButtonColor(buttonIndex, color) {\n    setButtonColors(prevButtonColors => {\n      const newButtonColors = [...prevButtonColors];\n      newButtonColors[buttonIndex] = color;\n      return newButtonColors;\n    });\n  }\n  function handleElevatorArrived(elevatorId, buttonNum) {\n    return () => {\n      const optionalFloorTo = dequeue();\n      //set button color to blue\n      setButtonColor(buttonNum, 'blue');\n      //wait 2 secs\n      setTimeout(() => {\n        //in case there is a floor that is waiting for an elevator\n        if (optionalFloorTo !== undefined) {\n          console.log(\"arrived we have more job\");\n          setButtonColor(buttonNum, 'red');\n          setElevatorsData(prevData => prevData.map(data => data.key === elevatorId ? {\n            ...data,\n            handleElevatorArrived: handleElevatorArrived(data.key, optionalFloorTo),\n            currFloor: buttonNum,\n            toFloor: optionalFloorTo,\n            y: -(height - 2) * optionalFloorTo\n          } : data));\n          setButtonColor(optionalFloorTo, 'red');\n          //just set occupied and wait for reservation\n        } else {\n          setElevatorsData(prevData => prevData.map(data => data.key === elevatorId ? {\n            ...data,\n            currFloor: buttonNum,\n            toFloor: -1,\n            occupied: false\n          } : data));\n        }\n        setButtonColor(buttonNum, 'green');\n      }, 2000);\n    };\n  }\n\n  //choose elevator, if not found return undefined\n  function chooseTheClosestElevator(toFloor) {\n    let availableElevators = elevatorsData.filter(elevator => !elevator.occupied);\n    if (availableElevators.length === 0) {\n      return undefined;\n    }\n    let closestElevator = availableElevators[0];\n    let closestDistance = Math.abs(availableElevators[0].currFloor - toFloor);\n    for (const object of availableElevators) {\n      const distance = Math.abs(object.currFloor - toFloor);\n      if (distance < closestDistance) {\n        closestDistance = distance;\n        closestElevator = object;\n      }\n    }\n    return closestElevator;\n  }\n\n  //when a floor want elevator reservation\n  function handleElevatorReservation(floorIndex) {\n    //check if there was a reservation\n    if (buttonColors[floorIndex] !== 'green') {\n      console.log(\"here\");\n      return; // Do nothing if the button is red or waiting\n    }\n    //if all the elevators are full put the floor on pending queue\n    let elevator;\n    if (size() > 0 || (elevator = chooseTheClosestElevator(floorIndex)) === undefined) {\n      enqueue(floorIndex);\n      setBottunColor(floorIndex, 'red');\n      //else have elevator change y value and go there\n    } else {\n      const elevatorNumber = elevator.key;\n\n      //stay on the floor\n      if (elevator.currFloor === floorIndex) {\n        setBottunColor(floorIndex, 'blue');\n        setTimeout(() => {\n          setBottunColor(floorIndex, 'green');\n        }, 2000);\n      } else {\n        setBottunColor(floorIndex, 'red');\n        setElevatorsData(prevData => prevData.map(data => {\n          const oldFloor = data.currFloor;\n          return data.key === elevatorNumber ? {\n            ...data,\n            handleElevetorArrived: handleElevetorArrived(data.key, floorIndex),\n            currFloor: oldFloor,\n            toFloor: floorIndex,\n            occupied: true,\n            y: -(height - 2) * floorIndex\n          } : data;\n        }));\n      }\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"elevator-controller\",\n    children: [elevatorsData.map(elevator => /*#__PURE__*/_jsxDEV(Elevator, {\n      id: elevator.key,\n      currFloor: elevator.currFloor,\n      toFloor: elevator.toFloor,\n      handleElevatorArrived: elevator.handleElevatorArrived,\n      y: elevator.y,\n      occupied: elevator.occupied,\n      setElevatorsData: setElevatorsData,\n      height: height\n    }, elevator.key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(FloorButtonPanel, {\n      handleElevatorReservation: handleElevatorReservation,\n      setButtonColors: setButtonColors\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n}\n_s(useElevatorController, \"CnkT6OeEwyWGuy0qfOoSaapGgIc=\", false, function () {\n  return [useQueue];\n});","map":{"version":3,"names":["useQueue","jsxDEV","_jsxDEV","useElevatorController","elevatorsData","setElevatorsData","height","setButtonColors","_s","enqueue","size","dequeue","setButtonColor","buttonIndex","color","prevButtonColors","newButtonColors","handleElevatorArrived","elevatorId","buttonNum","optionalFloorTo","setTimeout","undefined","console","log","prevData","map","data","key","currFloor","toFloor","y","occupied","chooseTheClosestElevator","availableElevators","filter","elevator","length","closestElevator","closestDistance","Math","abs","object","distance","handleElevatorReservation","floorIndex","buttonColors","setBottunColor","elevatorNumber","oldFloor","handleElevetorArrived","className","children","Elevator","id","fileName","_jsxFileName","lineNumber","columnNumber","FloorButtonPanel"],"sources":["/Users/ywblhytr/Desktop/Elavator/ElevetorProject/src/context/ElevatorController.jsx"],"sourcesContent":["import { useQueue } from './Queue';\n\nexport function useElevatorController(elevatorsData, setElevatorsData, height, setButtonColors) {\n  const { enqueue, size, dequeue } = useQueue();\n\n  //set button color \n  function setButtonColor(buttonIndex, color){\n    setButtonColors((prevButtonColors) => {\n      const newButtonColors = [...prevButtonColors];\n      newButtonColors[buttonIndex] = color;\n      return newButtonColors;\n    });\n  }\n\n  function handleElevatorArrived(elevatorId, buttonNum){\n    return () => {\n      const optionalFloorTo = dequeue()\n      //set button color to blue\n      setButtonColor(buttonNum, 'blue')\n      //wait 2 secs\n      setTimeout(() => {\n        //in case there is a floor that is waiting for an elevator\n        if (optionalFloorTo !== undefined) {\n          console.log(\"arrived we have more job\")\n          setButtonColor(buttonNum,'red')\n          setElevatorsData(prevData => (prevData.map(data =>\n            data.key === elevatorId?{...data, \n            handleElevatorArrived: handleElevatorArrived(data.key ,optionalFloorTo),\n            currFloor: buttonNum,\n            toFloor: optionalFloorTo,\n            y:-(height - 2)*optionalFloorTo}: \n            data )))\n            setButtonColor(optionalFloorTo,'red')\n          //just set occupied and wait for reservation\n        } else {\n          setElevatorsData(prevData => (prevData.map(data =>\n              data.key === elevatorId?{...data, \n              currFloor: buttonNum,\n              toFloor: -1,\n              occupied: false }: \n              data )))\n        }\n        setButtonColor(buttonNum,'green')\n      }, 2000);\n    }  \n  }\n\n  //choose elevator, if not found return undefined\n  function chooseTheClosestElevator(toFloor){\n    let availableElevators = elevatorsData.filter(elevator => !elevator.occupied)\n    if(availableElevators.length === 0){\n      return undefined;\n    }\n    let closestElevator = availableElevators[0];\n    let closestDistance = Math.abs(availableElevators[0].currFloor - toFloor);\n\n    for (const object of availableElevators) {\n      const distance = Math.abs(object.currFloor - toFloor);\n\n      if (distance < closestDistance) {\n        closestDistance = distance;\n        closestElevator = object;\n      }\n    }\n    return closestElevator\n  }\n\n  //when a floor want elevator reservation\n function handleElevatorReservation(floorIndex) {\n    //check if there was a reservation\n    if (buttonColors[floorIndex] !== 'green') {\n      console.log(\"here\")\n      return; // Do nothing if the button is red or waiting\n    }\n    //if all the elevators are full put the floor on pending queue\n    let elevator;\n    if(size() > 0 || (elevator = chooseTheClosestElevator(floorIndex)) === undefined){\n      enqueue(floorIndex)  \n      setBottunColor(floorIndex,'red')\n  //else have elevator change y value and go there\n    }else{\n      const elevatorNumber = elevator.key\n\n      //stay on the floor\n      if(elevator.currFloor === floorIndex){\n        setBottunColor(floorIndex,'blue')\n        setTimeout(() => {setBottunColor(floorIndex,'green')},2000)\n      }\n      else{\n        setBottunColor(floorIndex,'red')\n        setElevatorsData(prevData => (prevData.map(data =>\n          {\n            const oldFloor = data.currFloor\n            return data.key === elevatorNumber?{...data, \n              handleElevetorArrived: handleElevetorArrived(data.key ,floorIndex),\n              currFloor:oldFloor,\n              toFloor: floorIndex,\n              occupied: true, \n              y:-(height - 2)*floorIndex}: data \n          })))\n      }\n    }\n    \n  }\n  return (\n    <div className=\"elevator-controller\">\n      {elevatorsData.map((elevator) => (\n        <Elevator\n          key={elevator.key}\n          id={elevator.key}\n          currFloor={elevator.currFloor}\n          toFloor={elevator.toFloor}\n          handleElevatorArrived={elevator.handleElevatorArrived}\n          y={elevator.y}\n          occupied={elevator.occupied}\n          setElevatorsData={setElevatorsData}\n          height={height}\n        />\n      ))}\n      <FloorButtonPanel\n        handleElevatorReservation={handleElevatorReservation}\n        setButtonColors={setButtonColors}\n      />\n    </div>\n  );\n\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}