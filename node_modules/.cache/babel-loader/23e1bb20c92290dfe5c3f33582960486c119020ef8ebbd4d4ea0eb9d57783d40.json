{"ast":null,"code":"var _jsxFileName = \"/Users/ywblhytr/Desktop/Elavator/ElevetorProject/src/context/elevatorController.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useRef, useEffect } from 'react';\nimport { ELEVATOR_COLORS } from '../constants/constants';\nimport { useQueue } from './Queue';\nimport { AudioPlayerProvider } from '../context/playMusic';\nimport { audioFilePath } from '../constants/config';\nimport Elevetor from '../components/Elevator';\nimport { useAudioPlayer } from '../context/playMusic';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ElevatorControllerContext = /*#__PURE__*/createContext();\nexport const useElevatorController = () => {\n  _s();\n  return useContext(ElevatorControllerContext);\n};\n_s(useElevatorController, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nconst ElevatorControllerProvider = _ref => {\n  _s2();\n  let {\n    children,\n    elevatorsNum\n  } = _ref;\n  const [elevatorsData, setElevatorsData] = useState([]);\n  const {\n    size\n  } = useQueue();\n  const [squareData, setSquareData] = useState({});\n  const squareRef = useRef(null);\n  const {\n    playAudio\n  } = useAudioPlayer();\n  const width = squareData.width;\n  const height = squareData.height;\n  useEffect(() => {\n    if (squareRef.current) {\n      const squarFef = squareRef.current.getBoundingClientRect();\n      setSquareData(squarFef);\n      //elevatorController function to init the elevetors data\n      initElevatorDta(width);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [squareRef]);\n\n  //choose the colsest elevator, if not exists return undifined\n  function chooseTheClosestElevator(toFloor) {\n    let availableElevators = elevatorsData.filter(elevator => elevator.color === ELEVATOR_COLORS.BLACK);\n    if (availableElevators.length === 0) {\n      return undefined;\n    }\n    let closestElevator = availableElevators[0];\n    let closestDistance = Math.abs(availableElevators[0].currFloor - toFloor);\n    for (const object of availableElevators) {\n      const distance = Math.abs(object.currFloor - toFloor);\n      if (distance < closestDistance) {\n        closestDistance = distance;\n        closestElevator = object;\n      }\n    }\n    return closestElevator;\n  }\n  function checkForAvailableElevator(floorIndex) {\n    // if someone waiting to an elevator\n    if (size() > 0) {\n      return undefined;\n      //use choose closest elevator if there is one..\n    } else {\n      return chooseTheClosestElevator(floorIndex);\n    }\n  }\n\n  // init the elevators\n  function initElevatorDta(width) {\n    const elevators = [];\n    for (let i = 0; i < elevatorsNum; i++) {\n      elevators.push({\n        key: i,\n        y: 0,\n        style: {\n          width: `${width}px`,\n          left: `${i * width}px`\n        },\n        currFloor: 0,\n        toFloor: -1,\n        color: ELEVATOR_COLORS.BLACK,\n        dist: 0\n      });\n    }\n    setElevatorsData(elevators);\n  }\n  function changeElevetorStatus(currFloor, toFloor, elevatorNumber, afterArrivedClouser, color) {\n    //if curr floor is -1 thats elevator didnt move..\n    setElevatorsData(prevData => prevData.map(data => {\n      return data.key === elevatorNumber ? {\n        ...data,\n        handleElevetorArrived: afterArrivedClouser,\n        currFloor: currFloor,\n        toFloor: toFloor,\n        color: color,\n        y: toFloor === -1 ? data.y : -height * toFloor,\n        dist: toFloor === -1 ? 0 : Math.abs(currFloor - toFloor)\n      } : data;\n    }));\n  }\n  function changeElevatorColor(elevatorId, color) {\n    setElevatorsData(prevData => prevData.map(data => data.key === elevatorId ? {\n      ...data,\n      color: color\n    } : data));\n  }\n\n  //create elevator data\n  function createElevetorsData(elevatorHandleClouser, columns, rows) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"elevators-container\",\n      style: {\n        width: `${width * columns}px`,\n        height: `${height * rows}px`\n      },\n      children: elevatorsData.map(data => /*#__PURE__*/_jsxDEV(AudioPlayerProvider, {\n        path: audioFilePath,\n        index: data.key,\n        children: /*#__PURE__*/_jsxDEV(Elevetor, {\n          y: data.y,\n          color: data.color,\n          style: {\n            width: `${width}px`,\n            height: `${height}px`\n          },\n          handleElevetorArrived: elevatorHandleClouser(data.key, data.toFloor),\n          dist: data.dist\n        }, data.key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 9\n        }, this)\n      }, data.key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 7\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this);\n  }\n  const value = {\n    squareRef,\n    checkForAvailableElevator,\n    changeElevetorStatus,\n    changeElevatorColor,\n    createElevetorsData\n  };\n  return /*#__PURE__*/_jsxDEV(ElevatorControllerContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 5\n  }, this);\n};\n_s2(ElevatorControllerProvider, \"cBOOE1xyxnVCqB8li6j2txghdoE=\", false, function () {\n  return [useQueue, useAudioPlayer];\n});\n_c = ElevatorControllerProvider;\nexport default ElevatorControllerProvider;\nvar _c;\n$RefreshReg$(_c, \"ElevatorControllerProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useRef","useEffect","ELEVATOR_COLORS","useQueue","AudioPlayerProvider","audioFilePath","Elevetor","useAudioPlayer","jsxDEV","_jsxDEV","ElevatorControllerContext","useElevatorController","_s","ElevatorControllerProvider","_ref","_s2","children","elevatorsNum","elevatorsData","setElevatorsData","size","squareData","setSquareData","squareRef","playAudio","width","height","current","squarFef","getBoundingClientRect","initElevatorDta","chooseTheClosestElevator","toFloor","availableElevators","filter","elevator","color","BLACK","length","undefined","closestElevator","closestDistance","Math","abs","currFloor","object","distance","checkForAvailableElevator","floorIndex","elevators","i","push","key","y","style","left","dist","changeElevetorStatus","elevatorNumber","afterArrivedClouser","prevData","map","data","handleElevetorArrived","changeElevatorColor","elevatorId","createElevetorsData","elevatorHandleClouser","columns","rows","className","path","index","fileName","_jsxFileName","lineNumber","columnNumber","value","Provider","_c","$RefreshReg$"],"sources":["/Users/ywblhytr/Desktop/Elavator/ElevetorProject/src/context/elevatorController.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useRef, useEffect } from 'react';\nimport { ELEVATOR_COLORS } from '../constants/constants';\nimport { useQueue } from './Queue';\nimport { AudioPlayerProvider } from '../context/playMusic';\nimport { audioFilePath } from '../constants/config';\nimport Elevetor from '../components/Elevator'\nimport { useAudioPlayer } from '../context/playMusic';\n\n\n\nconst ElevatorControllerContext = createContext();\n\n\n\nexport const useElevatorController = () => {\n  return useContext(ElevatorControllerContext);\n};\n\nconst ElevatorControllerProvider = ({ children, elevatorsNum }) => {\n  const [elevatorsData, setElevatorsData] = useState([]);\n  const {size} = useQueue()\n  const [squareData, setSquareData] = useState({})\n  const squareRef = useRef(null);\n  const { playAudio } = useAudioPlayer();\n  const width = squareData.width \n  const height = squareData.height \n  \n\n  useEffect(() => {\n    if (squareRef.current) {\n      const squarFef = squareRef.current.getBoundingClientRect();\n      setSquareData(squarFef)\n      //elevatorController function to init the elevetors data\n      initElevatorDta(width)\n    }\n     // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [squareRef]);\n\n  \n\n\n//choose the colsest elevator, if not exists return undifined\nfunction chooseTheClosestElevator(toFloor){\n  let availableElevators = elevatorsData.filter(elevator => elevator.color===ELEVATOR_COLORS.BLACK)\n  if(availableElevators.length === 0){\n    return undefined;\n  }\n  let closestElevator = availableElevators[0];\n  let closestDistance = Math.abs(availableElevators[0].currFloor - toFloor);\n\n  for (const object of availableElevators) {\n    const distance = Math.abs(object.currFloor - toFloor);\n\n    if (distance < closestDistance) {\n      closestDistance = distance;\n      closestElevator = object;\n    }\n}\nreturn closestElevator\n}\n\nfunction checkForAvailableElevator(floorIndex){\n  // if someone waiting to an elevator\n  if(size() > 0){\n    return undefined\n    //use choose closest elevator if there is one..\n  }else{\n    return chooseTheClosestElevator(floorIndex)\n  }\n}\n  \n  // init the elevators\n  function initElevatorDta(width) {\n    const elevators = [];\n    for (let i = 0; i < elevatorsNum; i++) {\n      elevators.push({\n        key: i,\n        y: 0,\n        style: {width: `${width}px`, left: `${i*(width)}px`},\n        currFloor: 0,\n        toFloor: -1,\n        color: ELEVATOR_COLORS.BLACK,\n        dist: 0,\n      });\n    }\n    setElevatorsData(elevators);\n  }\n\n  function changeElevetorStatus(currFloor,toFloor, elevatorNumber, afterArrivedClouser, color){\n    //if curr floor is -1 thats elevator didnt move..\n    setElevatorsData(prevData => (prevData.map(data =>\n      {\n        return data.key === elevatorNumber?\n        {\n          ...data, \n          handleElevetorArrived: afterArrivedClouser,\n          currFloor: currFloor,\n          toFloor: toFloor,\n          color: color,\n          y: toFloor === -1? data.y : -(height)*toFloor,\n          dist: toFloor === -1 ? 0 : Math.abs(currFloor-toFloor)       \n        }: data \n      })))\n  }\n\n function changeElevatorColor(elevatorId, color){\n  setElevatorsData(prevData => (prevData.map(data =>\n    data.key === elevatorId?{\n      ...data, \n      color: color\n    }: \n    data )))\n  }\n\n\n  //create elevator data\n  function createElevetorsData(elevatorHandleClouser, columns, rows){\n    return  <div className='elevators-container' style={{width: `${width*columns}px`,height: `${height*rows}px`}}>\n    {elevatorsData.map(data => (\n      <AudioPlayerProvider path={audioFilePath} key = {data.key} index={data.key}>\n        <Elevetor\n          key={data.key}\n          y={data.y}\n          color={data.color}\n          style={{ width: `${width}px`, height: `${height}px` }}\n          handleElevetorArrived={elevatorHandleClouser(data.key, data.toFloor)}\n          dist={data.dist}\n        />\n      </AudioPlayerProvider>\n    )) }\n    </div>\n  }\n\n\n  const value = {  \n    squareRef,\n    checkForAvailableElevator, \n    changeElevetorStatus, \n    changeElevatorColor,\n    createElevetorsData};\n\n  return (\n    <ElevatorControllerContext.Provider value={value}>\n      {children}\n    </ElevatorControllerContext.Provider>\n  );\n};\n\nexport default ElevatorControllerProvider;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}