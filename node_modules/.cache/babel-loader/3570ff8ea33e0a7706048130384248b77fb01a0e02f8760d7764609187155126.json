{"ast":null,"code":"var _jsxFileName = \"/Users/ywblhytr/Desktop/Elavator/ElevetorProject/src/components/CountTimer.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Countdown from \"react-countdown\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Stopwatch() {\n  _s();\n  const [startTime, setStartTime] = useState(0);\n  const handleStart = () => {\n    setStartTime(Date.now());\n  };\n  const handleReset = () => {\n    setStartTime(0);\n  };\n  const formatTime = time => {\n    const minutes = Math.floor(time / 60000);\n    const seconds = Math.floor(time % 60000 / 1000);\n    const formattedMinutes = minutes.toString().padStart(2, \"0\");\n    const formattedSeconds = seconds.toString().padStart(2, \"0\");\n    return `${formattedMinutes}:${formattedSeconds}`;\n  };\n  const renderer = _ref => {\n    let {\n      minutes,\n      seconds\n    } = _ref;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: `${minutes.toString().padStart(2, \"0\")}:${seconds.toString().padStart(2, \"0\")}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleStart,\n          children: \"Start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleReset,\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Countdown, {\n      date: startTime + 3600000 // Set the countdown end time to be 1 hour from start time\n      ,\n      renderer: renderer,\n      controlled: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n_s(Stopwatch, \"TeFmzWgE6ouM6asFrLWYqG746UE=\");\n_c = Stopwatch;\nexport default Stopwatch;\nvar _c;\n$RefreshReg$(_c, \"Stopwatch\");","map":{"version":3,"names":["React","useState","Countdown","jsxDEV","_jsxDEV","Stopwatch","_s","startTime","setStartTime","handleStart","Date","now","handleReset","formatTime","time","minutes","Math","floor","seconds","formattedMinutes","toString","padStart","formattedSeconds","renderer","_ref","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","date","controlled","_c","$RefreshReg$"],"sources":["/Users/ywblhytr/Desktop/Elavator/ElevetorProject/src/components/CountTimer.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport Countdown from \"react-countdown\";\n\nfunction Stopwatch() {\n  const [startTime, setStartTime] = useState(0);\n\n  const handleStart = () => {\n    setStartTime(Date.now());\n  };\n\n  const handleReset = () => {\n    setStartTime(0);\n  };\n\n  const formatTime = (time) => {\n    const minutes = Math.floor(time / 60000);\n    const seconds = Math.floor((time % 60000) / 1000);\n\n    const formattedMinutes = minutes.toString().padStart(2, \"0\");\n    const formattedSeconds = seconds.toString().padStart(2, \"0\");\n\n    return `${formattedMinutes}:${formattedSeconds}`;\n  };\n\n  const renderer = ({ minutes, seconds }) => (\n    <div>\n      <h1>{`${minutes.toString().padStart(2, \"0\")}:${seconds\n        .toString()\n        .padStart(2, \"0\")}`}</h1>\n      <div>\n        <button onClick={handleStart}>Start</button>\n        <button onClick={handleReset}>Reset</button>\n      </div>\n    </div>\n  );\n\n  return (\n    <div>\n      <Countdown\n        date={startTime + 3600000} // Set the countdown end time to be 1 hour from start time\n        renderer={renderer}\n        controlled={false}\n      />\n    </div>\n  );\n}\n\nexport default Stopwatch;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,SAAS,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC;EAE7C,MAAMQ,WAAW,GAAGA,CAAA,KAAM;IACxBD,YAAY,CAACE,IAAI,CAACC,GAAG,EAAE,CAAC;EAC1B,CAAC;EAED,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACxBJ,YAAY,CAAC,CAAC,CAAC;EACjB,CAAC;EAED,MAAMK,UAAU,GAAIC,IAAI,IAAK;IAC3B,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACH,IAAI,GAAG,KAAK,CAAC;IACxC,MAAMI,OAAO,GAAGF,IAAI,CAACC,KAAK,CAAEH,IAAI,GAAG,KAAK,GAAI,IAAI,CAAC;IAEjD,MAAMK,gBAAgB,GAAGJ,OAAO,CAACK,QAAQ,EAAE,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;IAC5D,MAAMC,gBAAgB,GAAGJ,OAAO,CAACE,QAAQ,EAAE,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;IAE5D,OAAQ,GAAEF,gBAAiB,IAAGG,gBAAiB,EAAC;EAClD,CAAC;EAED,MAAMC,QAAQ,GAAGC,IAAA;IAAA,IAAC;MAAET,OAAO;MAAEG;IAAQ,CAAC,GAAAM,IAAA;IAAA,oBACpCpB,OAAA;MAAAqB,QAAA,gBACErB,OAAA;QAAAqB,QAAA,EAAM,GAAEV,OAAO,CAACK,QAAQ,EAAE,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAE,IAAGH,OAAO,CACnDE,QAAQ,EAAE,CACVC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAE;MAAC;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAM,eAC3BzB,OAAA;QAAAqB,QAAA,gBACErB,OAAA;UAAQ0B,OAAO,EAAErB,WAAY;UAAAgB,QAAA,EAAC;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAS,eAC5CzB,OAAA;UAAQ0B,OAAO,EAAElB,WAAY;UAAAa,QAAA,EAAC;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAS;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACxC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACF;EAAA,CACP;EAED,oBACEzB,OAAA;IAAAqB,QAAA,eACErB,OAAA,CAACF,SAAS;MACR6B,IAAI,EAAExB,SAAS,GAAG,OAAQ,CAAC;MAAA;MAC3BgB,QAAQ,EAAEA,QAAS;MACnBS,UAAU,EAAE;IAAM;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAClB;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACE;AAEV;AAACvB,EAAA,CA1CQD,SAAS;AAAA4B,EAAA,GAAT5B,SAAS;AA4ClB,eAAeA,SAAS;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}