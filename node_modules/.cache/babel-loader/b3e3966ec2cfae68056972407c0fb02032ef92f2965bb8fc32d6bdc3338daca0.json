{"ast":null,"code":"var _jsxFileName = \"/Users/ywblhytr/Desktop/Elavator/ElevetorProject/src/context/floorController.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { BUTTON_STATUS } from '../constants/constants';\nimport { TIMER } from '../constants/constants';\nimport Floor from '../components/Floor';\nimport { useElevatorController } from './elevatorController';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FloorControllerContext = /*#__PURE__*/createContext();\nFloorControllerProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n  columns: PropTypes.number.isRequired,\n  rows: PropTypes.number.isRequired,\n  data: PropTypes.array // Add a more specific shape if needed\n};\n// The useFloorController function is a custom hook that provides access to the floor controller context.\nexport const useFloorController = data => {\n  _s();\n  const context = useContext(FloorControllerContext);\n  return {\n    ...context,\n    ...data\n  };\n};\n\n// The FloorControllerProvider component is a context provider that manages floor-related state and actions.\n_s(useFloorController, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nconst FloorControllerProvider = _ref => {\n  _s2();\n  let {\n    children,\n    columns,\n    rows,\n    data\n  } = _ref;\n  const {\n    squareRef\n  } = useElevatorController();\n  const [floorsData, setFloorsData] = useState(createFloorsData());\n  function createFloorsData() {\n    return Array.from({\n      length: rows\n    }, (_, i) => {\n      const timesArr = new Array(columns).fill(TIMER.STOP);\n      return {\n        key: `floor-${i}`,\n        index: rows - i - 1,\n        buttonStatus: BUTTON_STATUS.CALL,\n        timeArr: timesArr\n      };\n    });\n  }\n  /**\n   * Hides or turns off the hours in the slot\n   * @param {number} floorIndex - Row number\n   * @param {number} elevatorIndex - Column number\n   * @param {string, opacity} param2 - the action on the time in the square (show/hide)\n   */\n  function handleClockAction(floorIndex, elevatorIndex, _ref2) {\n    let {\n      onChange: action,\n      styles: newStyles\n    } = _ref2;\n    setFloorsData(prevData => prevData.map(floorData => {\n      if (floorData.index === floorIndex) {\n        const updatedTimeArr = floorData.timeArr.map((timer, i) => {\n          if (i === elevatorIndex) {\n            return {\n              ...timer,\n              onChange: action,\n              styles: newStyles\n            };\n          }\n          return timer;\n        });\n        return {\n          ...floorData,\n          timeArr: updatedTimeArr\n        };\n      }\n      return floorData;\n    }));\n  }\n\n  /**\n   * \n   * @param {function} handleButtonClick - Function that handle's an elevator call \n   * @returns the elevators HTML code\n   */\n  function createFloors(handleButtonClick) {\n    return floorsData.map(floorData => /*#__PURE__*/_jsxDEV(Floor, {\n      columns: columns,\n      squareRef: squareRef,\n      index: floorData.index,\n      buttonStatus: floorData.buttonStatus,\n      handleElevatorReservation: handleButtonClick,\n      timesData: floorData.timeArr\n    }, floorData.key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this));\n  }\n  ;\n\n  /**\n   * \n   * @param {number} floorIndex - The button at the floor\n   * @param {number} newStatus - To handle the new style of the button\n   */\n  function setButtonStatus(floorIndex, newStatus) {\n    setFloorsData(prevData => prevData.map(floorData => floorData.index === floorIndex ? {\n      ...floorData,\n      buttonStatus: newStatus\n    } : floorData));\n  }\n  const value = {\n    createFloorsData,\n    setFloorsData,\n    floorsData,\n    setButtonStatus,\n    handleClockAction,\n    createFloors\n  };\n  return /*#__PURE__*/_jsxDEV(FloorControllerContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n};\n_s2(FloorControllerProvider, \"icKm5kKGEk4VZFmbhay9JfTg8Dg=\", false, function () {\n  return [useElevatorController];\n});\n_c = FloorControllerProvider;\nexport default FloorControllerProvider;\nvar _c;\n$RefreshReg$(_c, \"FloorControllerProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","BUTTON_STATUS","TIMER","Floor","useElevatorController","PropTypes","jsxDEV","_jsxDEV","FloorControllerContext","FloorControllerProvider","propTypes","children","node","isRequired","columns","number","rows","data","array","useFloorController","_s","context","_ref","_s2","squareRef","floorsData","setFloorsData","createFloorsData","Array","from","length","_","i","timesArr","fill","STOP","key","index","buttonStatus","CALL","timeArr","handleClockAction","floorIndex","elevatorIndex","_ref2","onChange","action","styles","newStyles","prevData","map","floorData","updatedTimeArr","timer","createFloors","handleButtonClick","handleElevatorReservation","timesData","fileName","_jsxFileName","lineNumber","columnNumber","setButtonStatus","newStatus","value","Provider","_c","$RefreshReg$"],"sources":["/Users/ywblhytr/Desktop/Elavator/ElevetorProject/src/context/floorController.jsx"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\nimport { BUTTON_STATUS } from '../constants/constants';\nimport { TIMER } from '../constants/constants';\nimport Floor from '../components/Floor';\nimport { useElevatorController } from './elevatorController';\nimport PropTypes from 'prop-types';\n\nconst FloorControllerContext = createContext();\nFloorControllerProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n  columns: PropTypes.number.isRequired,\n  rows: PropTypes.number.isRequired,\n  data: PropTypes.array // Add a more specific shape if needed\n};\n// The useFloorController function is a custom hook that provides access to the floor controller context.\nexport const useFloorController = (data) => {\n  const context =  useContext(FloorControllerContext);\n  return { ...context, ...data };\n};\n\n// The FloorControllerProvider component is a context provider that manages floor-related state and actions.\nconst FloorControllerProvider = ({ children, columns, rows, data }) => {\n  const {squareRef} = useElevatorController()\n  const [floorsData, setFloorsData] = useState(createFloorsData())\n\n  function createFloorsData() {\n    return Array.from({ length: rows }, (_, i) => {\n      const timesArr = new Array(columns).fill(TIMER.STOP);\n      return {\n        key: `floor-${i}`,\n        index: rows - i - 1,\n        buttonStatus: BUTTON_STATUS.CALL,\n        timeArr: timesArr\n      };\n    });\n  }\n  /**\n   * Hides or turns off the hours in the slot\n   * @param {number} floorIndex - Row number\n   * @param {number} elevatorIndex - Column number\n   * @param {string, opacity} param2 - the action on the time in the square (show/hide)\n   */\n  function handleClockAction(floorIndex, elevatorIndex, { onChange: action, styles: newStyles }) {\n    setFloorsData(prevData =>\n      prevData.map(floorData => {\n        if (floorData.index === floorIndex) {\n          const updatedTimeArr = floorData.timeArr.map((timer, i) => {\n            if (i === elevatorIndex) {\n              return {\n                ...timer,\n                onChange: action,\n                styles: newStyles\n              };\n            }\n            return timer;\n          });\n          return { ...floorData, timeArr: updatedTimeArr };\n        }\n        return floorData;\n      })\n    );\n  }\n  \n\n  /**\n   * \n   * @param {function} handleButtonClick - Function that handle's an elevator call \n   * @returns the elevators HTML code\n   */\n  function createFloors(handleButtonClick) {\n    return floorsData.map((floorData) => (\n      <Floor\n        columns={columns}\n        squareRef={squareRef}\n        key={floorData.key}\n        index={floorData.index}\n        buttonStatus={floorData.buttonStatus}\n        handleElevatorReservation={handleButtonClick}\n        timesData = {floorData.timeArr}\n      />\n    ));\n  };\n  \n  /**\n   * \n   * @param {number} floorIndex - The button at the floor\n   * @param {number} newStatus - To handle the new style of the button\n   */    \n  function setButtonStatus(floorIndex, newStatus){\n    setFloorsData(prevData =>\n    prevData.map(floorData => floorData.index === floorIndex?{...floorData, buttonStatus: newStatus}:floorData))\n  }\n\n\n\n  const value = {\n                  createFloorsData,\n                  setFloorsData,\n                  floorsData,\n                  setButtonStatus,\n                  handleClockAction,\n                  createFloors\n                }\n\n\n  return (\n    <FloorControllerContext.Provider value={value}>\n      {children}\n    </FloorControllerContext.Provider>\n  );\n};\n\nexport default FloorControllerProvider;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}