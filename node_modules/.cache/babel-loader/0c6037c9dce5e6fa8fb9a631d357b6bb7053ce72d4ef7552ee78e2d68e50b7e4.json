{"ast":null,"code":"var _jsxFileName = \"/Users/ywblhytr/Desktop/Elavator/ElevetorProject/src/components/Board.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ElevatorControllerContext = /*#__PURE__*/createContext();\nconst ElevatorController = _ref => {\n  _s();\n  let {\n    children,\n    numElevators,\n    numFloors\n  } = _ref;\n  const squareRef = useRef(null);\n  const [width, setWidth] = useState(0);\n  const [height, setHeight] = useState(0);\n  const [elevatorData, setElevatorData] = useState([]);\n  const [buttonColors, setButtonColors] = useState(Array(numFloors).fill('green'));\n  const [pendingRequests, setPendingRequests] = useState([]);\n  function initElevatorData(width) {\n    const elevators = [];\n    for (let i = 0; i < numElevators; i++) {\n      elevators.push({\n        key: i,\n        y: 0,\n        style: {\n          backgroundColor: 'green',\n          width: `${width}px`,\n          left: `${i * (width - 2)}px`\n        },\n        handleElevetorArrived: handleElevetorArrived(i, 0),\n        occupied: false,\n        currFloor: 0,\n        toFloor: -1\n      });\n    }\n    setElevatorData(elevators);\n  }\n  function setButtonColor(buttonIndex, color) {\n    setButtonColors(prevButtonColors => {\n      const newButtonColors = [...prevButtonColors];\n      newButtonColors[buttonIndex] = color;\n      return newButtonColors;\n    });\n  }\n  function handleElevetorArrived(elevatorId, buttonNum) {\n    return () => {\n      const optionalFloorTo = pendingRequests.shift();\n\n      //set button color to blue\n      setButtonColor(buttonNum, 'blue');\n      //wait 2 secs\n      setTimeout(() => {\n        if (optionalFloorTo !== undefined) {\n          //there is another pending request\n          setButtonColor(buttonNum, 'red');\n          setElevatorData(prevData => prevData.map(data => data.key === elevatorId ? {\n            ...data,\n            handleElevetorArrived: handleElevetorArrived(data.key, optionalFloorTo),\n            currFloor: buttonNum,\n            toFloor: optionalFloorTo,\n            y: -(height - 2) * optionalFloorTo\n          } : data));\n          setButtonColor(optionalFloorTo, 'red');\n        } else {\n          //no more pending requests, set elevator as available and return to ground floor\n          setElevatorData(prevData => prevData.map(data => data.key === elevatorId ? {\n            ...data,\n            currFloor: buttonNum,\n            toFloor: -1,\n            occupied: false\n          } : data));\n        }\n        //set button color back to green\n        setButtonColor(buttonNum, 'green');\n      }, 2000);\n    };\n  }\n  function chooseClosestElevator(toFloor) {\n    let availableElevators = elevatorData.filter(elevator => !elevator.occupied);\n    if (availableElevators.length === 0) {\n      return undefined;\n    }\n    let closestElevator = availableElevators[0];\n    let closestDistance = Math.abs(availableElevators[0].currFloor - toFloor);\n    for (const object of availableElevators) {\n      const distance = Math.abs(object.currFloor - toFloor);\n      if (distance < closestDistance) {\n        closestDistance = distance;\n        closestElevator = object;\n      }\n    }\n    return closestElevator;\n  }\n  function handleElevatorReservation(floorIndex) {\n    if (buttonColors[floorIndex] !== 'green') {\n      return;\n    }\n    let elevator;\n    if (pendingRequests.length > 0 || (elevator = chooseClosestElevator(floorIndex)) === undefined) {\n      //no available elevator, add request to pending queue\n      setPendingRequests([...pendingRequests, floorIndex]);\n      setButtonColor(floorIndex, 'red');\n    } else {\n      //available elevator found, update elevator data\n      const elevatorNumber = elevator.key;\n      if (elevator.currFloor === floorIndex) {\n        setButtonColor(floorIndex, 'blue');\n        setTimeout(() => setButtonColor(floorIndex, 'green'), 2000);\n      } else {\n        setButtonColor(floorIndex, 'red');\n        setElevatorData(prevData => prevData.map(data => {\n          const oldFloor = data.currFloor;\n          return data.key === elevatorNumber ? {\n            ...data,\n            handleElevetorArrived: handleElevetorArrived(data.key, floorIndex),\n            currFloor: oldFloor,\n            toFloor: floorIndex,\n            occupied: true,\n            y: -(height - 2) * floorIndex\n          } : data;\n        }));\n      }\n    }\n  }\n  useEffect(() => {\n    if (squareRef.current) {\n      const {\n        width,\n        height\n      } = squareRef.current.getBoundingClientRect();\n      setWidth(width);\n      setHeight(height);\n      initElevatorData(width);\n    }\n  }, []);\n  const contextValue = {\n    elevatorData,\n    setPendingRequests,\n    handleElevatorReservation\n  };\n  return /*#__PURE__*/_jsxDEV(ElevatorControllerContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n};\n_s(ElevatorController, \"ZLEfXv3uIXr9r/jxUrjLxXOWtkA=\");\n_c = ElevatorController;\nexport { ElevatorControllerContext, ElevatorController };\nvar _c;\n$RefreshReg$(_c, \"ElevatorController\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useRef","useState","jsxDEV","_jsxDEV","ElevatorControllerContext","ElevatorController","_ref","_s","children","numElevators","numFloors","squareRef","width","setWidth","height","setHeight","elevatorData","setElevatorData","buttonColors","setButtonColors","Array","fill","pendingRequests","setPendingRequests","initElevatorData","elevators","i","push","key","y","style","backgroundColor","left","handleElevetorArrived","occupied","currFloor","toFloor","setButtonColor","buttonIndex","color","prevButtonColors","newButtonColors","elevatorId","buttonNum","optionalFloorTo","shift","setTimeout","undefined","prevData","map","data","chooseClosestElevator","availableElevators","filter","elevator","length","closestElevator","closestDistance","Math","abs","object","distance","handleElevatorReservation","floorIndex","elevatorNumber","oldFloor","current","getBoundingClientRect","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ywblhytr/Desktop/Elavator/ElevetorProject/src/components/Board.jsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useRef, useState } from 'react';\n\nconst ElevatorControllerContext = createContext();\n\nconst ElevatorController = ({ children, numElevators, numFloors }) => {\n  const squareRef = useRef(null);\n  const [width, setWidth] = useState(0);\n  const [height, setHeight] = useState(0);\n  const [elevatorData, setElevatorData] = useState([]);\n  const [buttonColors, setButtonColors] = useState(Array(numFloors).fill('green'));\n  const [pendingRequests, setPendingRequests] = useState([]);\n\n  function initElevatorData(width){\n    const elevators = [];\n    for (let i = 0; i < numElevators; i++) {\n      elevators.push({\n        key: i,\n        y: 0,\n        style: { backgroundColor: 'green', width: `${width}px`, left: `${i*(width-2)}px`},\n        handleElevetorArrived: handleElevetorArrived(i, 0),\n        occupied:false,\n        currFloor: 0,\n        toFloor: -1\n      });\n    }\n    setElevatorData(elevators);\n  }\n\n  function setButtonColor(buttonIndex, color){\n    setButtonColors((prevButtonColors) => {\n      const newButtonColors = [...prevButtonColors];\n      newButtonColors[buttonIndex] = color;\n      return newButtonColors;\n    });\n  }\n\n  function handleElevetorArrived(elevatorId, buttonNum){\n    return () => {\n      const optionalFloorTo = pendingRequests.shift();\n\n      //set button color to blue\n      setButtonColor(buttonNum, 'blue');\n      //wait 2 secs\n      setTimeout(() => {\n        if (optionalFloorTo !== undefined) {\n          //there is another pending request\n          setButtonColor(buttonNum,'red');\n          setElevatorData(prevData => (prevData.map(data =>\n            data.key === elevatorId ? { ...data, \n              handleElevetorArrived: handleElevetorArrived(data.key, optionalFloorTo),\n              currFloor: buttonNum,\n              toFloor: optionalFloorTo,\n              y:-(height - 2)*optionalFloorTo\n            } : data\n          )));\n          setButtonColor(optionalFloorTo,'red');\n        } else {\n         \n          //no more pending requests, set elevator as available and return to ground floor\n          setElevatorData(prevData => (prevData.map(data =>\n            data.key === elevatorId ? { ...data, \n              currFloor: buttonNum,\n              toFloor: -1,\n              occupied: false\n            } : data\n          )));\n        }\n        //set button color back to green\n        setButtonColor(buttonNum,'green');\n      }, 2000);\n    };\n  }\n\n  function chooseClosestElevator(toFloor){\n    let availableElevators = elevatorData.filter(elevator => !elevator.occupied);\n    if (availableElevators.length === 0) {\n      return undefined;\n    }\n    let closestElevator = availableElevators[0];\n    let closestDistance = Math.abs(availableElevators[0].currFloor - toFloor);\n    for (const object of availableElevators) {\n      const distance = Math.abs(object.currFloor - toFloor);\n      if (distance < closestDistance) {\n        closestDistance = distance;\n        closestElevator = object;\n      }\n    }\n    return closestElevator;\n  }\n\n  function handleElevatorReservation(floorIndex) {\n    if (buttonColors[floorIndex] !== 'green') {\n      return;\n    }\n    let elevator;\n    if (pendingRequests.length > 0 || (elevator = chooseClosestElevator(floorIndex)) === undefined) {\n      //no available elevator, add request to pending queue\n      setPendingRequests([...pendingRequests, floorIndex]);\n      setButtonColor(floorIndex,'red');\n    } else {\n      //available elevator found, update elevator data\n      const elevatorNumber = elevator.key;\n\n      if(elevator.currFloor === floorIndex){\n        setButtonColor(floorIndex,'blue');\n        setTimeout(() => setButtonColor(floorIndex,'green'), 2000);\n      } else {\n        setButtonColor(floorIndex,'red');\n        setElevatorData(prevData => prevData.map(data => {\n          const oldFloor = data.currFloor;\n          return data.key === elevatorNumber ? { ...data, \n            handleElevetorArrived: handleElevetorArrived(data.key, floorIndex),\n            currFloor: oldFloor,\n            toFloor: floorIndex,\n            occupied: true,\n            y:-(height - 2)*floorIndex\n          } : data;\n        }));\n      }\n    }\n  }\n\n  useEffect(() => {\n    if (squareRef.current) {\n      const { width, height } = squareRef.current.getBoundingClientRect();\n      setWidth(width);\n      setHeight(height);\n      initElevatorData(width);\n    }\n  }, []);\n\n  const contextValue = {\n    elevatorData,\n    setPendingRequests,\n    handleElevatorReservation\n  };\n\n  return (\n    <ElevatorControllerContext.Provider value={contextValue}>\n      <div>\n        {children}\n      </div>\n    </ElevatorControllerContext.Provider>\n  );\n};\n\nexport {\n  ElevatorControllerContext,\n  ElevatorController\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}