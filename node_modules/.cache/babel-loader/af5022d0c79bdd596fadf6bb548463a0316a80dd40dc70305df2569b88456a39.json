{"ast":null,"code":"var _jsxFileName = \"/Users/ywblhytr/Desktop/Elavator/ElevetorProject/src/components/Board.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport '../styles/boardStyles.css';\nimport Elevetor from './Elevator';\nimport QueueProvider from '../context/Queue';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Board = _ref => {\n  _s();\n  let {\n    rows,\n    columns\n  } = _ref;\n  const squareRef = useRef(null);\n  const [buttonColors, setButtonColors] = useState(Array(rows).fill('green'));\n  const [width, setWidth] = useState(0);\n  const [height, setHight] = useState(0);\n  const [elevatorsData, setElevatorsData] = useState([]);\n  //const [pendingQueue, setPendingQueue] = useState([]); \n  const queueSizeRef = useRef(0);\n  const {\n    enqueue,\n    dequeue,\n    size\n  } = useQueue();\n  function initElevatorDta(width) {\n    const arr = [];\n    for (let i = 0; i < columns; i++) {\n      arr.push({\n        key: i,\n        y: 0,\n        style: {\n          backgroundColor: 'green',\n          width: `${width}px`,\n          left: `${i * (width - 2)}px`\n        },\n        handleElevetorArrived: () => handleElevetorArrived(i, 0),\n        occupied: false,\n        currFloor: 0\n      });\n    }\n    setElevatorsData(arr);\n  }\n  //get width and hight for the style of the elevator\n  useEffect(() => {\n    if (squareRef.current) {\n      const {\n        width,\n        height\n      } = squareRef.current.getBoundingClientRect();\n      setWidth(width);\n      setHight(height);\n      //console.log(\"Width X:\", width, \"Height Y:\", height);\n      initElevatorDta(width);\n    }\n  }, []);\n\n  //set bottun color \n  function setBottunColor(bottunIndex, color) {\n    setButtonColors(prevButtonColors => {\n      const newButtonColors = [...prevButtonColors];\n      newButtonColors[bottunIndex] = color;\n      return newButtonColors;\n    });\n  }\n  function handleElevetorArrived(elevatorId, bottunNum) {\n    console.log(\"arrived\");\n    //set bottun color\n    setBottunColor(bottunNum, 'blue');\n    //wait 2 secs\n    setTimeout(() => {\n      //in case there is an floor that want an elevator\n      if (size() === !0) {\n        console.log(\"arrived wer have mre job\");\n        setBottunColor(bottunNum, 'red');\n        const floorNumber = dequeue();\n        setElevatorsData(prevData => prevData.map(data => data.key === elevatorId ? {\n          ...data,\n          handleElevetorArrived: () => handleElevetorArrived(data.key, floorNumber),\n          currFloor: floorNumber,\n          y: -(height - 2) * floorNumber\n        } : data));\n        //just set occupied and wait for reservetion\n      } else {\n        setBottunColor(bottunNum, 'green');\n        setElevatorsData(prevData => prevData.map(data => data.key === elevatorId ? {\n          ...data,\n          currFloor: bottunNum,\n          occupied: false\n        } : data));\n      }\n    }, 2000);\n    console.log(size());\n  }\n\n  //choose elevator if not found return undifined\n  function chooseTheClosestElevator(toFloor) {\n    let availableElevators = elevatorsData.filter(elevator => !elevator.occupied);\n    if (availableElevators.length === 0) {\n      return undefined;\n    }\n    let closestObject = availableElevators[0];\n    let closestDistance = Math.abs(availableElevators[0].currFloor - toFloor);\n    for (const object of availableElevators) {\n      const distance = Math.abs(object.currFloor - toFloor);\n      if (distance < closestDistance) {\n        closestDistance = distance;\n        closestObject = object;\n      }\n    }\n    return closestObject.key;\n  }\n\n  //when a floor want elevator reservation\n  function handleElevatorReservation(floorIndex) {\n    //check if there was a reservation\n    if (buttonColors[floorIndex] !== 'green') {\n      console.log(\"here\");\n      return; // Do nothing if the button is red or waiting\n    }\n    //if all the elevators are full put the floor on pending queue\n    let elevatorNumber;\n    if (size() > 0 || (elevatorNumber = chooseTheClosestElevator(floorIndex)) === undefined) {\n      console.log(\"dont need to be here initially\");\n      enqueue(floorIndex);\n      console.log(`pending queue length: ${size()}`);\n    } else {\n      console.log(`Choose Elevator ${elevatorNumber}`);\n      setElevatorsData(prevData => prevData.map(data => data.key === elevatorNumber ? {\n        ...data,\n        handleElevetorArrived: () => handleElevetorArrived(data.key, floorIndex),\n        currFloor: floorIndex,\n        occupied: true,\n        y: -(height - 2) * floorIndex\n      } : data));\n    }\n    setBottunColor(floorIndex, 'red');\n    //set the new y value\n  }\n\n  //create the board row and columns\n  const createBoard = () => {\n    const board = [];\n    for (let i = 0; i < rows; i++) {\n      const row = [];\n      for (let j = 0; j < columns; j++) {\n        row.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"square p-2 bg-white\",\n          ref: i === 0 && j === 0 ? squareRef : null\n        }, `cell-${i}-${j}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this));\n      }\n      board.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex flex-row align-items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row-number me-2\",\n          children: `${rows - i - 1 === 0 ? \"Grownd Floor\" : rows - i - 1 === 1 ? \"1st\" : rows - i - 1 === 2 ? \"2nd\" : rows - i - 1 === 3 ? \"3nd\" : `${rows - i - 1}th`}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this), row, /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"moving-object-wrapper\",\n          style: {\n            position: 'relative',\n            display: 'inline-block'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            id: `bottun${rows - i - 1}`,\n            disabled: false,\n            className: \"elevator-button-arrived\",\n            style: {\n              backgroundColor: buttonColors[rows - i - 1]\n            },\n            onClick: () => handleElevatorReservation(rows - i - 1),\n            children: \"Call\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this)]\n      }, `row-${i}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this));\n    }\n    return board;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: [createBoard(), elevatorsData.map(data => /*#__PURE__*/_jsxDEV(Elevetor, {\n      y: data.y,\n      style: {\n        backgroundColor: 'green',\n        width: `${width}px`,\n        left: `${data.key * (width - 2)}px`\n      },\n      handleElevetorArrived: data.handleElevetorArrived\n    }, data.key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 10\n  }, this);\n};\n_s(Board, \"ay4bmjRj5Wx5iDVLli4369utQBY=\", true);\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Elevetor","QueueProvider","jsxDEV","_jsxDEV","Board","_ref","_s","rows","columns","squareRef","buttonColors","setButtonColors","Array","fill","width","setWidth","height","setHight","elevatorsData","setElevatorsData","queueSizeRef","enqueue","dequeue","size","useQueue","initElevatorDta","arr","i","push","key","y","style","backgroundColor","left","handleElevetorArrived","occupied","currFloor","current","getBoundingClientRect","setBottunColor","bottunIndex","color","prevButtonColors","newButtonColors","elevatorId","bottunNum","console","log","setTimeout","floorNumber","prevData","map","data","chooseTheClosestElevator","toFloor","availableElevators","filter","elevator","length","undefined","closestObject","closestDistance","Math","abs","object","distance","handleElevatorReservation","floorIndex","elevatorNumber","createBoard","board","row","j","className","ref","fileName","_jsxFileName","lineNumber","columnNumber","children","position","display","type","id","disabled","onClick","_c","$RefreshReg$"],"sources":["/Users/ywblhytr/Desktop/Elavator/ElevetorProject/src/components/Board.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport '../styles/boardStyles.css';\nimport Elevetor from './Elevator'\nimport QueueProvider from '../context/Queue';\n\nconst Board = ({ rows, columns }) => {\n  const squareRef = useRef(null);\n  const [buttonColors, setButtonColors] = useState(Array(rows).fill('green'));\n  const [width, setWidth] = useState(0);\n  const [height, setHight] = useState(0);\n  const [elevatorsData, setElevatorsData] = useState([]);\n  //const [pendingQueue, setPendingQueue] = useState([]); \n  const queueSizeRef = useRef(0);\n  const { enqueue,dequeue, size } = useQueue();\n\n\n\n  \n\nfunction initElevatorDta(width){\n  const arr = [];\n  for (let i = 0; i < columns; i++) {\n    arr.push({\n      key: i,\n      y: 0,\n      style: { backgroundColor: 'green', width: `${width}px`, left: `${i*(width-2)}px`},\n      handleElevetorArrived: () => handleElevetorArrived(i, 0),\n      occupied:false,\n      currFloor: 0\n    });\n  }\n  setElevatorsData(arr);\n}\n  //get width and hight for the style of the elevator\n  useEffect(() => {\n    if (squareRef.current) {\n      const { width, height } = squareRef.current.getBoundingClientRect();\n      setWidth(width)\n      setHight(height)\n      //console.log(\"Width X:\", width, \"Height Y:\", height);\n      initElevatorDta(width)\n    }\n  }, []);\n\n//set bottun color \nfunction setBottunColor(bottunIndex, color){\n    setButtonColors((prevButtonColors) => {\n      const newButtonColors = [...prevButtonColors];\n      newButtonColors[bottunIndex] = color;\n      return newButtonColors;\n    });\n}\n\nfunction handleElevetorArrived(elevatorId, bottunNum){\n  console.log(\"arrived\")\n  //set bottun color\n  setBottunColor(bottunNum,'blue')\n  //wait 2 secs\n  setTimeout(() => {\n    \n    //in case there is an floor that want an elevator\n    if (size() === !0) {\n      console.log(\"arrived wer have mre job\")\n      setBottunColor(bottunNum,'red')\n      const floorNumber = dequeue()\n      setElevatorsData(prevData => (prevData.map(data =>\n        data.key === elevatorId?{...data, \n        handleElevetorArrived: ()=>handleElevetorArrived(data.key ,floorNumber),\n        currFloor: floorNumber,\n        y:-(height - 2)*floorNumber}: \n        data )))\n      //just set occupied and wait for reservetion\n    }else{\n      setBottunColor(bottunNum,'green')\n      setElevatorsData(prevData => (prevData.map(data =>\n          data.key === elevatorId?{...data, \n          currFloor: bottunNum,\n          occupied: false }: \n          data )))\n    }\n  }, 2000);\n  console.log(size())\n}\n\n//choose elevator if not found return undifined\nfunction chooseTheClosestElevator(toFloor){\n  \n    let availableElevators = elevatorsData.filter(elevator => !elevator.occupied)\n    if(availableElevators.length === 0){\n      return undefined;\n    }\n    let closestObject = availableElevators[0];\n    let closestDistance = Math.abs(availableElevators[0].currFloor - toFloor);\n\n    for (const object of availableElevators) {\n      const distance = Math.abs(object.currFloor - toFloor);\n\n      if (distance < closestDistance) {\n        closestDistance = distance;\n        closestObject = object;\n      }\n  }\n  return closestObject.key\n}\n\n//when a floor want elevator reservation\n function handleElevatorReservation(floorIndex) {\n  //check if there was a reservation\n  if (buttonColors[floorIndex] !== 'green') {\n    console.log(\"here\")\n    return; // Do nothing if the button is red or waiting\n  }\n  //if all the elevators are full put the floor on pending queue\n  let elevatorNumber;\n   \n  if(size() > 0 || (elevatorNumber = chooseTheClosestElevator(floorIndex)) === undefined){\n    console.log(\"dont need to be here initially\")\n    enqueue(floorIndex)  \n    console.log(`pending queue length: ${size()}`)\n\n  }else{\n    console.log(`Choose Elevator ${elevatorNumber}`)\n    setElevatorsData(prevData => (prevData.map(data =>\n    data.key === elevatorNumber?{...data, \n        handleElevetorArrived: ()=>handleElevetorArrived(data.key ,floorIndex) ,\n        currFloor:floorIndex,\n        occupied: true, \n        y:-(height - 2)*floorIndex}: data )))\n  }\n  setBottunColor(floorIndex,'red')\n  //set the new y value\n  \n  }\n\n\n  //create the board row and columns\n  const createBoard = () => {\n    const board = [];\n    for (let i = 0; i < rows; i++) {\n      const row = [];\n      for (let j = 0; j < columns; j++) {\n        row.push(\n          <div key={`cell-${i}-${j}`} className=\"square p-2 bg-white\" ref={i === 0 && j === 0 ? squareRef : null} />\n        );\n      }\n      board.push(\n        <div key={`row-${i}`} className=\"d-flex flex-row align-items-center\">\n          <div className=\"row-number me-2\">{`${rows-i-1===0?\"Grownd Floor\" : rows-i-1===1?\"1st\":rows-i-1===2?\"2nd\": rows-i-1===3?\"3nd\":`${rows-i-1}th`}`}</div>\n          {row}\n          <div className=\"moving-object-wrapper\" style={{ position: 'relative', display: 'inline-block' }}>\n           \n            <button type=\"button\"\n                id ={`bottun${rows-i-1}`}  \n                disabled={false} className=\"elevator-button-arrived\"  \n                style={{backgroundColor:buttonColors[rows-i-1] }} \n                onClick={()=>handleElevatorReservation(rows-i-1)} >Call</button>\n          </div>\n        </div>\n      );\n    }\n    return board;\n  };\n  \n\n\n  \n  return <div className=\"board\">\n    \n      {createBoard()}\n      {elevatorsData.map(data => (\n      <Elevetor\n        key={data.key}\n        y={data.y}\n        style={{backgroundColor: 'green', width: `${width}px`, left: `${data.key*(width-2)}px`}}\n        handleElevetorArrived={data.handleElevetorArrived}\n      />\n    ))}\n      \n  </div>;\n  \n};\n\nexport default Board;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}