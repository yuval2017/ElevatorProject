{"ast":null,"code":"var _jsxFileName = \"/Users/ywblhytr/Desktop/Elavator/ElevetorProject/src/context/elevatorController.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useRef, useEffect } from 'react';\nimport { ELEVATOR_COLORS } from '../constants/constants';\nimport { useQueue } from './Queue';\nimport { AudioPlayerProvider } from '../context/playMusic';\nimport { audioFilePath } from '../constants/config';\nimport Elevetor from '../components/Elevator';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ElevatorControllerContext = /*#__PURE__*/createContext();\nexport const useElevatorController = () => {\n  _s();\n  return useContext(ElevatorControllerContext);\n};\n_s(useElevatorController, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nconst ElevatorControllerProvider = _ref => {\n  _s2();\n  let {\n    children,\n    elevatorsNum\n  } = _ref;\n  const [elevatorsData, setElevatorsData] = useState([]);\n  const {\n    size\n  } = useQueue();\n  const [squareData, setSquareData] = useState({});\n  const squareRef = useRef(null);\n  const width = squareData.width;\n  const height = squareData.height;\n\n  //initiate data of the elevators\n  useEffect(() => {\n    if (squareRef.current) {\n      const squarFef = squareRef.current.getBoundingClientRect();\n      setSquareData(squarFef);\n      //elevatorController function to init the elevetors data\n      initElevatorDta(width);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [squareRef]);\n\n  // init the elevators\n  function initElevatorDta(width) {\n    const elevators = [];\n    for (let i = 0; i < elevatorsNum; i++) {\n      elevators.push({\n        key: i,\n        y: 0,\n        style: {\n          width: `${width}px`,\n          left: `${i * width}px`\n        },\n        currFloor: 0,\n        toFloor: -1,\n        color: ELEVATOR_COLORS.BLACK,\n        dist: 0\n      });\n    }\n    setElevatorsData(elevators);\n  }\n\n  //choose the colsest elevator, if not exists return undifined\n  function chooseTheClosestElevator(toFloor) {\n    let availableElevators = elevatorsData.filter(elevator => elevator.color === ELEVATOR_COLORS.BLACK);\n    if (availableElevators.length === 0) {\n      return undefined;\n    }\n    let closestElevator = availableElevators[0];\n    let closestDistance = Math.abs(availableElevators[0].currFloor - toFloor);\n    for (const object of availableElevators) {\n      const distance = Math.abs(object.currFloor - toFloor);\n      if (distance < closestDistance) {\n        closestDistance = distance;\n        closestElevator = object;\n      }\n    }\n    return closestElevator;\n  }\n  function checkForAvailableElevator(floorIndex) {\n    // if someone waiting to an elevator\n    if (size() > 0) {\n      return undefined;\n      //use choose closest elevator if there is one..\n    } else {\n      return chooseTheClosestElevator(floorIndex);\n    }\n  }\n  function changeElevetorStatus(currFloor, toFloor, elevatorNumber, afterArrivedClouser, color) {\n    //if curr floor is -1 thats elevator didnt move..\n    setElevatorsData(prevData => prevData.map(data => {\n      return data.key === elevatorNumber ? {\n        ...data,\n        handleElevetorArrived: afterArrivedClouser,\n        currFloor: currFloor,\n        toFloor: toFloor,\n        color: color,\n        y: toFloor === -1 ? data.y : -height * toFloor,\n        dist: toFloor === -1 ? 0 : Math.abs(currFloor - toFloor)\n      } : data;\n    }));\n  }\n  function changeElevatorColor(elevatorId, color) {\n    setElevatorsData(prevData => prevData.map(data => data.key === elevatorId ? {\n      ...data,\n      color: color\n    } : data));\n  }\n\n  //create elevator data\n  function createElevetorsData(elevatorHandleClouser, columns, rows) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"elevators-container\",\n      style: {\n        width: `${width * columns}px`,\n        height: `${height * rows}px`\n      },\n      children: elevatorsData.map(data => /*#__PURE__*/_jsxDEV(AudioPlayerProvider, {\n        path: audioFilePath,\n        index: data.key,\n        children: /*#__PURE__*/_jsxDEV(Elevetor, {\n          y: data.y,\n          color: data.color,\n          style: {\n            width: `${width}px`,\n            height: `${height}px`\n          },\n          handleElevetorArrived: elevatorHandleClouser(data.key, data.toFloor),\n          dist: data.dist\n        }, data.key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 9\n        }, this)\n      }, data.key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 7\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this);\n  }\n  const value = {\n    squareRef,\n    checkForAvailableElevator,\n    changeElevetorStatus,\n    changeElevatorColor,\n    createElevetorsData\n  };\n  return /*#__PURE__*/_jsxDEV(ElevatorControllerContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n};\n_s2(ElevatorControllerProvider, \"bGagEqDvsxkv7SvUYHvzrRBAXP8=\", false, function () {\n  return [useQueue];\n});\n_c = ElevatorControllerProvider;\nexport default ElevatorControllerProvider;\nvar _c;\n$RefreshReg$(_c, \"ElevatorControllerProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useRef","useEffect","ELEVATOR_COLORS","useQueue","AudioPlayerProvider","audioFilePath","Elevetor","jsxDEV","_jsxDEV","ElevatorControllerContext","useElevatorController","_s","ElevatorControllerProvider","_ref","_s2","children","elevatorsNum","elevatorsData","setElevatorsData","size","squareData","setSquareData","squareRef","width","height","current","squarFef","getBoundingClientRect","initElevatorDta","elevators","i","push","key","y","style","left","currFloor","toFloor","color","BLACK","dist","chooseTheClosestElevator","availableElevators","filter","elevator","length","undefined","closestElevator","closestDistance","Math","abs","object","distance","checkForAvailableElevator","floorIndex","changeElevetorStatus","elevatorNumber","afterArrivedClouser","prevData","map","data","handleElevetorArrived","changeElevatorColor","elevatorId","createElevetorsData","elevatorHandleClouser","columns","rows","className","path","index","fileName","_jsxFileName","lineNumber","columnNumber","value","Provider","_c","$RefreshReg$"],"sources":["/Users/ywblhytr/Desktop/Elavator/ElevetorProject/src/context/elevatorController.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useRef, useEffect } from 'react';\nimport { ELEVATOR_COLORS } from '../constants/constants';\nimport { useQueue } from './Queue';\nimport { AudioPlayerProvider } from '../context/playMusic';\nimport { audioFilePath } from '../constants/config';\nimport Elevetor from '../components/Elevator'\n\n\n\nconst ElevatorControllerContext = createContext();\n\n\n\nexport const useElevatorController = () => {\n  return useContext(ElevatorControllerContext);\n};\n\nconst ElevatorControllerProvider = ({ children, elevatorsNum }) => {\n  const [elevatorsData, setElevatorsData] = useState([]);\n  const {size} = useQueue()\n  const [squareData, setSquareData] = useState({})\n  const squareRef = useRef(null);\n  const width = squareData.width \n  const height = squareData.height \n  \n//initiate data of the elevators\n  useEffect(() => {\n    if (squareRef.current) {\n      const squarFef = squareRef.current.getBoundingClientRect();\n      setSquareData(squarFef)\n      //elevatorController function to init the elevetors data\n      initElevatorDta(width)\n    }\n     // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [squareRef]);\n\n  \n  // init the elevators\n  function initElevatorDta(width) {\n    const elevators = [];\n    for (let i = 0; i < elevatorsNum; i++) {\n      elevators.push({\n        key: i,\n        y: 0,\n        style: {width: `${width}px`, left: `${i*(width)}px`},\n        currFloor: 0,\n        toFloor: -1,\n        color: ELEVATOR_COLORS.BLACK,\n        dist: 0,\n      });\n    }\n    setElevatorsData(elevators);\n  }\n\n  //choose the colsest elevator, if not exists return undifined\n  function chooseTheClosestElevator(toFloor){\n    let availableElevators = elevatorsData.filter(elevator => elevator.color===ELEVATOR_COLORS.BLACK)\n    if(availableElevators.length === 0){\n      return undefined;\n    }\n    let closestElevator = availableElevators[0];\n    let closestDistance = Math.abs(availableElevators[0].currFloor - toFloor);\n\n    for (const object of availableElevators) {\n      const distance = Math.abs(object.currFloor - toFloor);\n\n      if (distance < closestDistance) {\n        closestDistance = distance;\n        closestElevator = object;\n      }\n    }\n    return closestElevator\n  }\n\n  function checkForAvailableElevator(floorIndex){\n    // if someone waiting to an elevator\n    if(size() > 0){\n      return undefined\n      //use choose closest elevator if there is one..\n    }else{\n      return chooseTheClosestElevator(floorIndex)\n    }\n  }\n  \n\n\n  function changeElevetorStatus(currFloor,toFloor, elevatorNumber, afterArrivedClouser, color){\n    //if curr floor is -1 thats elevator didnt move..\n    setElevatorsData(prevData => (prevData.map(data =>\n      {\n        return data.key === elevatorNumber?\n        {\n          ...data, \n          handleElevetorArrived: afterArrivedClouser,\n          currFloor: currFloor,\n          toFloor: toFloor,\n          color: color,\n          y: toFloor === -1? data.y : -(height)*toFloor,\n          dist: toFloor === -1 ? 0 : Math.abs(currFloor-toFloor)       \n        }: data \n      })))\n  }\n\n function changeElevatorColor(elevatorId, color){\n  setElevatorsData(prevData => (prevData.map(data =>\n    data.key === elevatorId?{\n      ...data, \n      color: color\n    }: \n    data )))\n  }\n\n\n  //create elevator data\n  function createElevetorsData(elevatorHandleClouser, columns, rows){\n    return  <div className='elevators-container' style={{width: `${width*columns}px`,height: `${height*rows}px`}}>\n    {elevatorsData.map(data => (\n      <AudioPlayerProvider path={audioFilePath} key = {data.key} index={data.key}>\n        <Elevetor\n          key={data.key}\n          y={data.y}\n          color={data.color}\n          style={{ width: `${width}px`, height: `${height}px` }}\n          handleElevetorArrived={elevatorHandleClouser(data.key, data.toFloor)}\n          dist={data.dist}\n        />\n      </AudioPlayerProvider>\n    )) }\n    </div>\n  }\n\n\n  const value = {  \n    squareRef,\n    checkForAvailableElevator, \n    changeElevetorStatus, \n    changeElevatorColor,\n    createElevetorsData};\n  return (\n    <ElevatorControllerContext.Provider value={value}>\n      {children}\n    </ElevatorControllerContext.Provider>\n  );\n};\n\nexport default ElevatorControllerProvider;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}