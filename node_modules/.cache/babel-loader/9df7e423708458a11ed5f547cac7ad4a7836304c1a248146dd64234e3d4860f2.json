{"ast":null,"code":"var _jsxFileName = \"/Users/ywblhytr/Desktop/Elavator/ElevetorProject/src/components/Elevator.jsx\",\n  _s = $RefreshSig$();\nimport { animated, useSpring } from 'react-spring';\nimport '../styles/elevatorStyles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Elevator = _ref => {\n  _s();\n  let {\n    y,\n    style,\n    handleElevatorArrived,\n    color\n  } = _ref;\n  const [isMoving, setIsMoving] = useState(false);\n  const spring = useSpring({\n    to: {\n      y\n    },\n    config: {\n      clamp: true,\n      tension: 20,\n      friction: 30\n    },\n    onRest: () => {\n      if (handleElevatorArrived) {\n        handleElevatorArrived();\n      }\n      setIsMoving(false);\n    },\n    onStart: () => {\n      setIsMoving(true);\n    },\n    onFrame: _ref2 => {\n      let {\n        y\n      } = _ref2;\n      const distance = Math.abs(y - spring.y.get());\n      let tension = 20;\n      let friction = 30;\n      if (isMoving) {\n        if (distance < 100) {\n          tension = 120 + distance * 0.1;\n          friction = 14;\n        } else if (distance >= 100 && distance < 300) {\n          tension = 200 + distance * 0.05;\n          friction = 20;\n        } else {\n          tension = 80;\n          friction = 26;\n        }\n      }\n      spring.set({\n        tension,\n        friction\n      });\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(animated.div, {\n    className: \"elevator\",\n    style: {\n      ...style,\n      transform: spring.y.to(y => `translateY(${y}px)`)\n    },\n    children: /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"elevator-image\",\n      src: `./icons8-elevator-${color}.svg`,\n      alt: \"Woops\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(Elevator, \"kK7FLIgKz03Tgy5+KNeSxkaZu84=\", false, function () {\n  return [useSpring];\n});\n_c = Elevator;\nexport default Elevator;\nvar _c;\n$RefreshReg$(_c, \"Elevator\");","map":{"version":3,"names":["animated","useSpring","jsxDEV","_jsxDEV","Elevator","_ref","_s","y","style","handleElevatorArrived","color","isMoving","setIsMoving","useState","spring","to","config","clamp","tension","friction","onRest","onStart","onFrame","_ref2","distance","Math","abs","get","set","div","className","transform","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ywblhytr/Desktop/Elavator/ElevetorProject/src/components/Elevator.jsx"],"sourcesContent":["import { animated, useSpring } from 'react-spring';\nimport '../styles/elevatorStyles.css';\n\nconst Elevator = ({ y, style, handleElevatorArrived, color }) => {\n  const [isMoving, setIsMoving] = useState(false);\n\n  const spring = useSpring({\n    to: { y },\n    config: {\n      clamp: true,\n      tension: 20,\n      friction: 30,\n    },\n    onRest: () => {\n      if (handleElevatorArrived) {\n        handleElevatorArrived();\n      }\n      setIsMoving(false);\n    },\n    onStart: () => {\n      setIsMoving(true);\n    },\n    onFrame: ({ y }) => {\n      const distance = Math.abs(y - spring.y.get());\n      let tension = 20;\n      let friction = 30;\n      if (isMoving) {\n        if (distance < 100) {\n          tension = 120 + distance * 0.1;\n          friction = 14;\n        } else if (distance >= 100 && distance < 300) {\n          tension = 200 + distance * 0.05;\n          friction = 20;\n        } else {\n          tension = 80;\n          friction = 26;\n        }\n      }\n      spring.set({\n        tension,\n        friction,\n      });\n    },\n  });\n\n  return (\n    <animated.div\n      className=\"elevator\"\n      style={{\n        ...style,\n        transform: spring.y.to((y) => `translateY(${y}px)`),\n      }}\n    >\n      <img\n        className=\"elevator-image\"\n        src={`./icons8-elevator-${color}.svg`}\n        alt=\"Woops\"\n      />\n    </animated.div>\n  );\n};\n\nexport default Elevator;\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,cAAc;AAClD,OAAO,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,QAAQ,GAAGC,IAAA,IAAgD;EAAAC,EAAA;EAAA,IAA/C;IAAEC,CAAC;IAAEC,KAAK;IAAEC,qBAAqB;IAAEC;EAAM,CAAC,GAAAL,IAAA;EAC1D,MAAM,CAACM,QAAQ,EAAEC,WAAW,CAAC,GAAGC,QAAQ,CAAC,KAAK,CAAC;EAE/C,MAAMC,MAAM,GAAGb,SAAS,CAAC;IACvBc,EAAE,EAAE;MAAER;IAAE,CAAC;IACTS,MAAM,EAAE;MACNC,KAAK,EAAE,IAAI;MACXC,OAAO,EAAE,EAAE;MACXC,QAAQ,EAAE;IACZ,CAAC;IACDC,MAAM,EAAEA,CAAA,KAAM;MACZ,IAAIX,qBAAqB,EAAE;QACzBA,qBAAqB,EAAE;MACzB;MACAG,WAAW,CAAC,KAAK,CAAC;IACpB,CAAC;IACDS,OAAO,EAAEA,CAAA,KAAM;MACbT,WAAW,CAAC,IAAI,CAAC;IACnB,CAAC;IACDU,OAAO,EAAEC,KAAA,IAAW;MAAA,IAAV;QAAEhB;MAAE,CAAC,GAAAgB,KAAA;MACb,MAAMC,QAAQ,GAAGC,IAAI,CAACC,GAAG,CAACnB,CAAC,GAAGO,MAAM,CAACP,CAAC,CAACoB,GAAG,EAAE,CAAC;MAC7C,IAAIT,OAAO,GAAG,EAAE;MAChB,IAAIC,QAAQ,GAAG,EAAE;MACjB,IAAIR,QAAQ,EAAE;QACZ,IAAIa,QAAQ,GAAG,GAAG,EAAE;UAClBN,OAAO,GAAG,GAAG,GAAGM,QAAQ,GAAG,GAAG;UAC9BL,QAAQ,GAAG,EAAE;QACf,CAAC,MAAM,IAAIK,QAAQ,IAAI,GAAG,IAAIA,QAAQ,GAAG,GAAG,EAAE;UAC5CN,OAAO,GAAG,GAAG,GAAGM,QAAQ,GAAG,IAAI;UAC/BL,QAAQ,GAAG,EAAE;QACf,CAAC,MAAM;UACLD,OAAO,GAAG,EAAE;UACZC,QAAQ,GAAG,EAAE;QACf;MACF;MACAL,MAAM,CAACc,GAAG,CAAC;QACTV,OAAO;QACPC;MACF,CAAC,CAAC;IACJ;EACF,CAAC,CAAC;EAEF,oBACEhB,OAAA,CAACH,QAAQ,CAAC6B,GAAG;IACXC,SAAS,EAAC,UAAU;IACpBtB,KAAK,EAAE;MACL,GAAGA,KAAK;MACRuB,SAAS,EAAEjB,MAAM,CAACP,CAAC,CAACQ,EAAE,CAAER,CAAC,IAAM,cAAaA,CAAE,KAAI;IACpD,CAAE;IAAAyB,QAAA,eAEF7B,OAAA;MACE2B,SAAS,EAAC,gBAAgB;MAC1BG,GAAG,EAAG,qBAAoBvB,KAAM,MAAM;MACtCwB,GAAG,EAAC;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EACX;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACW;AAEnB,CAAC;AAAChC,EAAA,CAzDIF,QAAQ;EAAA,QAGGH,SAAS;AAAA;AAAAsC,EAAA,GAHpBnC,QAAQ;AA2Dd,eAAeA,QAAQ;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}