{"ast":null,"code":"var _jsxFileName = \"/Users/ywblhytr/Desktop/Elavator/ElevetorProject/src/components/Board.jsx\",\n  _s = $RefreshSig$();\n// Styles\nimport '../styles/boardStyles.css';\n// Constants\nimport '../constants/constants';\nimport { BUTTON_STATUS, TIMER, ELEVATOR_COLORS } from '../constants/constants';\n// Contexts\nimport { useQueue } from '../context/Queue';\nimport { useElevatorController } from '../context/elevatorController';\nimport { useFloorController } from '../context/floorController';\n//orops types\nimport PropTypes from 'prop-types';\n// The Board component represents the main elevator board containing floors and elevators.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board(_ref) {\n  _s();\n  let {\n    rows,\n    columns\n  } = _ref;\n  /**\n     * control the elevators\n     */\n  const {\n    squareRef,\n    checkForAvailableElevator,\n    changeElevetorStatus,\n    changeElevatorColor,\n    createElevetorsData\n  } = useElevatorController();\n  const {\n    handleClockAction,\n    createFloors,\n    setButtonStatus\n  } = useFloorController(squareRef);\n\n  /**\n   * pending queue\n   */\n  const {\n    enqueue,\n    dequeue\n  } = useQueue();\n\n  /**\n   * Handles the case that the elevator has reached the requested floor\n   * @param {number} elevatorId - The current elevetor \n   * @param {number} floorIndex - The current flor index\n   * @returns \n   */\n  function handleElevatorArrived(elevatorId, floorIndex) {\n    return () => {\n      //change elevator color to green\n      changeElevatorColor(elevatorId, ELEVATOR_COLORS.GREEN);\n\n      //change button on the floot to arrived\n      setButtonStatus(floorIndex, BUTTON_STATUS.ARRIVED);\n\n      //reset and hide the timer on the square\n      handleClockAction(floorIndex, elevatorId, TIMER.RESET);\n\n      //check if there is a floor in pending queue\n      const optionalFLoorTo = dequeue();\n\n      //wait 2 sec\n      setTimeout(() => {\n        //if there is floor waiting for elevator send the elevator to that floor\n        if (optionalFLoorTo !== undefined) {\n          sendElevatorToFloor(elevatorId, floorIndex, optionalFLoorTo);\n        } else {\n          //bring back the color to black\n          changeElevetorStatus(floorIndex, -1, elevatorId, () => {}, ELEVATOR_COLORS.BLACK);\n        }\n        setButtonStatus(floorIndex, BUTTON_STATUS.CALL);\n      }, 2000);\n    };\n  }\n\n  /**\n   * Called when a floor requests an elevator\n   * @param {number} floorIndex - The index of the floor to which the elevator will go\n   */\n  function handleElevatorReservation(floorIndex) {\n    //if the elevator controller dont have Available elevator ...\n    let elevator;\n    if ((elevator = checkForAvailableElevator(floorIndex)) === undefined) {\n      //push the floor to pending queue\n      enqueue(floorIndex);\n      setButtonStatus(floorIndex, BUTTON_STATUS.WAITING);\n    } else {\n      //elevator index\n      const elevatorNumber = elevator.key;\n\n      //if the elevator in the same floor stay for 2 sec\n      if (elevator.currFloor === floorIndex) {\n        setButtonStatus(floorIndex, BUTTON_STATUS.ARRIVED);\n        changeElevatorColor(elevatorNumber, ELEVATOR_COLORS.GREEN);\n        setTimeout(() => {\n          setButtonStatus(floorIndex, BUTTON_STATUS.CALL);\n          changeElevatorColor(elevatorNumber, ELEVATOR_COLORS.BLACK);\n        }, 2000);\n      } else {\n        //change bottun styles\n        setButtonStatus(floorIndex, BUTTON_STATUS.WAITING);\n        sendElevatorToFloor(elevatorNumber, elevator.currFloor, floorIndex);\n      }\n    }\n  }\n  function sendElevatorToFloor(elevatorId, currFLoor, toFloor) {\n    handleClockAction(toFloor, elevatorId, TIMER.START);\n    const elevatorArrivedClouser = handleElevatorArrived(elevatorId, toFloor);\n    changeElevetorStatus(currFLoor, toFloor, elevatorId, elevatorArrivedClouser, ELEVATOR_COLORS.RED);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"container\",\n      className: \"board\",\n      children: [createFloors(handleElevatorReservation), createElevetorsData(handleElevatorArrived, columns, rows)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n}\n_s(Board, \"M8Mn6OpkiwZbPUaCjF9Z2KCt0UM=\", false, function () {\n  return [useElevatorController, useFloorController, useQueue];\n});\n_c = Board;\n;\nBoard.propTypes = {\n  rows: PropTypes.number.isRequired,\n  columns: PropTypes.number.isRequired\n};\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["BUTTON_STATUS","TIMER","ELEVATOR_COLORS","useQueue","useElevatorController","useFloorController","PropTypes","jsxDEV","_jsxDEV","Board","_ref","_s","rows","columns","squareRef","checkForAvailableElevator","changeElevetorStatus","changeElevatorColor","createElevetorsData","handleClockAction","createFloors","setButtonStatus","enqueue","dequeue","handleElevatorArrived","elevatorId","floorIndex","GREEN","ARRIVED","RESET","optionalFLoorTo","setTimeout","undefined","sendElevatorToFloor","BLACK","CALL","handleElevatorReservation","elevator","WAITING","elevatorNumber","key","currFloor","currFLoor","toFloor","START","elevatorArrivedClouser","RED","className","children","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","propTypes","number","isRequired","$RefreshReg$"],"sources":["/Users/ywblhytr/Desktop/Elavator/ElevetorProject/src/components/Board.jsx"],"sourcesContent":["// Styles\nimport '../styles/boardStyles.css';\n// Constants\nimport '../constants/constants'\nimport { BUTTON_STATUS, TIMER, ELEVATOR_COLORS } from '../constants/constants';\n// Contexts\nimport { useQueue } from '../context/Queue';\nimport { useElevatorController} from '../context/elevatorController';\nimport { useFloorController } from '../context/floorController';\n//orops types\nimport PropTypes from 'prop-types';\n// The Board component represents the main elevator board containing floors and elevators.\nfunction Board ({ rows, columns }) {\n  \n/**\n   * control the elevators\n   */\nconst {\n  squareRef,\n  checkForAvailableElevator, \n  changeElevetorStatus, \n  changeElevatorColor,\n  createElevetorsData} = useElevatorController();\n\n  const {handleClockAction, createFloors, setButtonStatus} = useFloorController(squareRef)\n\n  /**\n   * pending queue\n   */\n  const { enqueue , dequeue} = useQueue();\n \n  \n\n\n/**\n * Handles the case that the elevator has reached the requested floor\n * @param {number} elevatorId - The current elevetor \n * @param {number} floorIndex - The current flor index\n * @returns \n */\nfunction handleElevatorArrived(elevatorId, floorIndex){\n  return () => {\n    \n    //change elevator color to green\n    changeElevatorColor(elevatorId,ELEVATOR_COLORS.GREEN)\n\n    //change button on the floot to arrived\n    setButtonStatus(floorIndex, BUTTON_STATUS.ARRIVED)\n\n    //reset and hide the timer on the square\n    handleClockAction(floorIndex,elevatorId,TIMER.RESET)\n\n     //check if there is a floor in pending queue\n     const optionalFLoorTo = dequeue()\n\n    //wait 2 sec\n    setTimeout(() => {\n      //if there is floor waiting for elevator send the elevator to that floor\n      if (optionalFLoorTo !== undefined) {\n        sendElevatorToFloor(elevatorId, floorIndex, optionalFLoorTo)\n      }else{\n        //bring back the color to black\n        changeElevetorStatus(floorIndex, -1, elevatorId, () => {}, ELEVATOR_COLORS.BLACK)\n      }\n      setButtonStatus(floorIndex,BUTTON_STATUS.CALL)\n    }, 2000);\n  }\n  \n}\n\n/**\n * Called when a floor requests an elevator\n * @param {number} floorIndex - The index of the floor to which the elevator will go\n */\nfunction handleElevatorReservation(floorIndex) {\n  //if the elevator controller dont have Available elevator ...\n  let elevator;\n  if((elevator = checkForAvailableElevator(floorIndex)) === undefined){\n    //push the floor to pending queue\n    enqueue(floorIndex)  \n    setButtonStatus(floorIndex, BUTTON_STATUS.WAITING)\n\n  }else{\n    //elevator index\n    const elevatorNumber = elevator.key\n\n    //if the elevator in the same floor stay for 2 sec\n    if(elevator.currFloor === floorIndex) {\n      setButtonStatus(floorIndex,BUTTON_STATUS.ARRIVED)\n      changeElevatorColor(elevatorNumber, ELEVATOR_COLORS.GREEN)\n      setTimeout(() => \n      {\n        setButtonStatus(floorIndex,BUTTON_STATUS.CALL)\n        changeElevatorColor(elevatorNumber, ELEVATOR_COLORS.BLACK)\n      },2000)\n    }\n\n    else{\n      //change bottun styles\n      setButtonStatus(floorIndex, BUTTON_STATUS.WAITING)\n\n      sendElevatorToFloor(elevatorNumber, elevator.currFloor, floorIndex)\n\n    }\n  }\n}\n\nfunction sendElevatorToFloor(elevatorId, currFLoor, toFloor){\n  handleClockAction(toFloor, elevatorId,TIMER.START)\n  const elevatorArrivedClouser = handleElevatorArrived(elevatorId ,toFloor)\n  changeElevetorStatus(currFLoor, toFloor, elevatorId, elevatorArrivedClouser, ELEVATOR_COLORS.RED)\n}\n\n  return (\n    <div className='main' >\n      <div id=\"container\" className=\"board\"  >\n        {createFloors(handleElevatorReservation)}\n        {createElevetorsData(handleElevatorArrived, columns, rows)}\n    </div>\n  </div>);\n  \n};\nBoard.propTypes = {\n  rows: PropTypes.number.isRequired,\n  columns: PropTypes.number.isRequired,\n}; \nexport default Board;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}