{"ast":null,"code":"var _jsxFileName = \"/Users/ywblhytr/Desktop/Elavator/ElevetorProject/src/components/Board.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport '../styles/boardStyles.css';\nimport Elevetor from './Elevator';\nimport { useQueue } from '../context/Queue';\nimport Floor from './Floor';\nimport { color } from 'framer-motion';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Board = _ref => {\n  _s();\n  let {\n    rows,\n    columns\n  } = _ref;\n  const squareRef = useRef(null);\n  const [squareData, setSquareData] = useState({});\n  const [floorsData, setFloorsData] = useState(createFloorsData());\n  const [elevatorsData, setElevatorsData] = useState([]);\n  const {\n    enqueue,\n    size,\n    dequeue\n  } = useQueue();\n  function initElevatorDta(width) {\n    const elevators = [];\n    for (let i = 0; i < columns; i++) {\n      elevators.push({\n        key: i,\n        y: 0,\n        style: {\n          backgroundColor: 'green',\n          width: `${width}px`,\n          left: `${i * width}px`\n        },\n        handleElevetorArrived: handleElevetorArrived(i, 0),\n        occupied: false,\n        currFloor: 0,\n        toFloor: -1,\n        color: 'black'\n      });\n    }\n    setElevatorsData(elevators);\n  }\n\n  //create floors data\n  function createFloorsData() {\n    const ans = [];\n    for (let i = 0; i < rows; i++) {\n      const timesArr = new Array(columns).fill({\n        onChange: 'stop',\n        styles: {\n          color: \"white\"\n        }\n      });\n      ans.push({\n        key: `floor-${i}`,\n        index: rows - i - 1,\n        buttonStatus: 'call',\n        timeArr: timesArr\n      });\n    }\n    return ans;\n  }\n  function handleClockAction(index, action, newStyles) {\n    setFloorsData(prevData => prevData.map(floorData => floorData.index === index ? {\n      ...floorData,\n      onAction: action,\n      styles: newStyles\n    } : floorData));\n  }\n  console.log(floorsData[columns - 1].timeArr);\n  //that data to change the elevator position, width,hight dynamicly\n  const width = squareData.width - 2;\n  const height = squareData.height - 2;\n  const distanceFromBegginingX = squareData.left;\n  const distanceFromBegginingY = 30;\n\n  //get width and hight for the style of the elevator\n  useEffect(() => {\n    if (squareRef.current) {\n      const {\n        width,\n        height,\n        left,\n        bottom\n      } = squareRef.current.getBoundingClientRect();\n      setSquareData({\n        width,\n        height,\n        left,\n        bottom\n      });\n      initElevatorDta(width);\n    }\n  }, [squareRef]);\n\n  //set bottun color \n  function setBottunColor(bottunIndex, newStatus) {\n    setFloorsData(prevData => prevData.map(floorData => floorData.index === bottunIndex ? {\n      ...floorData,\n      buttonStatus: newStatus\n    } : floorData));\n  }\n  function handleElevetorArrived(elevatorId, floorIndex) {\n    return () => {\n      //make it the elivator color to green, and bottun to the new style\n      const optionalFLoorTo = dequeue();\n      setElevatorsData(prevData => prevData.map(data => data.key === elevatorId ? {\n        ...data,\n        color: 'green'\n      } : data));\n      setBottunColor(floorIndex, 'arrived');\n\n      //wait 2 secs before choose what is the next elevator mission\n      setTimeout(() => {\n        //in case there is an floor that wait for elevator in the pending queue go to that floor\n        if (optionalFLoorTo !== undefined) {\n          setBottunColor(floorIndex, 'waiting');\n          setElevatorsData(prevData => prevData.map(data => data.key === elevatorId ? {\n            ...data,\n            handleElevetorArrived: handleElevetorArrived(data.key, optionalFLoorTo),\n            currFloor: floorIndex,\n            toFloor: optionalFLoorTo,\n            y: -height * optionalFLoorTo,\n            color: 'red'\n          } : data));\n          setBottunColor(optionalFLoorTo, 'waiting');\n\n          //else change the elevator color to black and wait for any reservation\n        } else {\n          setElevatorsData(prevData => prevData.map(data => data.key === elevatorId ? {\n            ...data,\n            currFloor: floorIndex,\n            toFloor: -1,\n            occupied: false,\n            color: 'black'\n          } : data));\n        }\n        setBottunColor(floorIndex, 'call');\n      }, 2000);\n    };\n  }\n\n  //choose the colsest elevator, if not exists return undifined\n  function chooseTheClosestElevator(toFloor) {\n    let availableElevators = elevatorsData.filter(elevator => !elevator.occupied);\n    if (availableElevators.length === 0) {\n      return undefined;\n    }\n    let closestElevator = availableElevators[0];\n    let closestDistance = Math.abs(availableElevators[0].currFloor - toFloor);\n    for (const object of availableElevators) {\n      const distance = Math.abs(object.currFloor - toFloor);\n      if (distance < closestDistance) {\n        closestDistance = distance;\n        closestElevator = object;\n      }\n    }\n    return closestElevator;\n  }\n\n  //when a floor want elevator reservation\n  function handleElevatorReservation(floorIndex) {\n    handleClockAction(floorIndex, 'start', {\n      color: \"black\"\n    });\n\n    //if all the elevators are full put the floor on pending queue\n    let elevator;\n    if (size() > 0 || (elevator = chooseTheClosestElevator(floorIndex)) === undefined) {\n      enqueue(floorIndex);\n      setBottunColor(floorIndex, 'waiting');\n\n      //else have elevator change y value and go there\n    } else {\n      const elevatorNumber = elevator.key;\n\n      //if there is elevatoe in the floor just say the elevator arrived\n      if (elevator.currFloor === floorIndex) {\n        setBottunColor(floorIndex, 'arrived');\n        setTimeout(() => {\n          setBottunColor(floorIndex, 'call');\n        }, 2000);\n      }\n      //move the elevator to the floor\n      else {\n        setBottunColor(floorIndex, 'waiting');\n        setElevatorsData(prevData => prevData.map(data => {\n          const oldFloor = data.currFloor;\n          return data.key === elevatorNumber ? {\n            ...data,\n            handleElevetorArrived: handleElevetorArrived(data.key, floorIndex),\n            currFloor: oldFloor,\n            toFloor: floorIndex,\n            occupied: true,\n            color: 'red',\n            y: -height * floorIndex\n          } : data;\n        }));\n      }\n    }\n  }\n  const createBoard2 = () => {\n    return floorsData.map(floorData => /*#__PURE__*/_jsxDEV(Floor, {\n      columns: columns,\n      squareRef: squareRef,\n      index: floorData.index,\n      buttonStatus: floorData.buttonStatus,\n      handleElevatorReservation: handleElevatorReservation,\n      timesData: floorData.timeArr\n    }, floorData.key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this));\n  };\n  console.log(width);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: [createBoard2(), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"elevators-container\",\n      style: {\n        width: `${width * columns}px`,\n        height: `${height * rows}px`\n      },\n      children: elevatorsData.map(data => /*#__PURE__*/_jsxDEV(Elevetor, {\n        y: data.y,\n        color: data.color,\n        style: {\n          width: `${width}px`,\n          height: `${height}px`\n        },\n        handleElevetorArrived: handleElevetorArrived(data.key, data.toFloor)\n      }, data.key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 7\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 212,\n    columnNumber: 11\n  }, this);\n};\n_s(Board, \"lGUxYKgoj5/yn6PrU1/ju0ecVFg=\", false, function () {\n  return [useQueue];\n});\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Elevetor","useQueue","Floor","color","jsxDEV","_jsxDEV","Board","_ref","_s","rows","columns","squareRef","squareData","setSquareData","floorsData","setFloorsData","createFloorsData","elevatorsData","setElevatorsData","enqueue","size","dequeue","initElevatorDta","width","elevators","i","push","key","y","style","backgroundColor","left","handleElevetorArrived","occupied","currFloor","toFloor","ans","timesArr","Array","fill","onChange","styles","index","buttonStatus","timeArr","handleClockAction","action","newStyles","prevData","map","floorData","onAction","console","log","height","distanceFromBegginingX","distanceFromBegginingY","current","bottom","getBoundingClientRect","setBottunColor","bottunIndex","newStatus","elevatorId","floorIndex","optionalFLoorTo","data","setTimeout","undefined","chooseTheClosestElevator","availableElevators","filter","elevator","length","closestElevator","closestDistance","Math","abs","object","distance","handleElevatorReservation","elevatorNumber","oldFloor","createBoard2","timesData","fileName","_jsxFileName","lineNumber","columnNumber","className","children","_c","$RefreshReg$"],"sources":["/Users/ywblhytr/Desktop/Elavator/ElevetorProject/src/components/Board.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport '../styles/boardStyles.css';\nimport Elevetor from './Elevator'\nimport { useQueue } from '../context/Queue';\nimport Floor from './Floor';\nimport { color } from 'framer-motion';\n\n\nconst Board = ({ rows, columns }) => {\n  const squareRef = useRef(null);\n  const [squareData, setSquareData] = useState({})\n  const [floorsData, setFloorsData] = useState(createFloorsData())\n  const [elevatorsData, setElevatorsData] = useState([]);\n  const { enqueue, size , dequeue} = useQueue();\n\n\n\nfunction initElevatorDta(width){\n  const elevators = [];\n  for (let i = 0; i < columns; i++) {\n    elevators.push({\n      key: i,\n      y: 0,\n      style: { backgroundColor: 'green', width: `${width}px`, left: `${i*(width)}px`},\n      handleElevetorArrived: handleElevetorArrived(i, 0),\n      occupied:false,\n      currFloor: 0,\n      toFloor: -1,\n      color: 'black'\n    });\n  }\n  setElevatorsData(elevators);\n}\n\n\n//create floors data\nfunction createFloorsData() {\n  const ans = [];\n  for (let i = 0; i < rows; i++) {\n    const timesArr = new Array(columns).fill({onChange: 'stop', styles: {color: \"white\"}}); \n    ans.push({\n      key: `floor-${i}`,\n      index: rows - i - 1,\n      buttonStatus: 'call',\n      timeArr: timesArr\n    });\n  }\n  return ans;\n}\nfunction handleClockAction(index, action, newStyles){\n  setFloorsData(prevData =>\n      prevData.map(floorData =>\n      floorData.index === index? {\n        ...floorData,\n        onAction: action,\n        styles: newStyles\n      }:floorData\n    ))\n\n}\nconsole.log(floorsData[columns-1].timeArr)\n//that data to change the elevator position, width,hight dynamicly\nconst width = squareData.width - 2 \nconst height = squareData.height - 2\nconst distanceFromBegginingX = squareData.left\nconst distanceFromBegginingY =  30\n\n  //get width and hight for the style of the elevator\n  useEffect(() => {\n    if (squareRef.current) {\n      \n      const { width, height, left, bottom} = squareRef.current.getBoundingClientRect();\n      setSquareData({width, height, left, bottom})\n\n      initElevatorDta(width)\n    }\n  }, [squareRef]);\n\n//set bottun color \nfunction setBottunColor(bottunIndex, newStatus){\n  setFloorsData(prevData =>\n    prevData.map(floorData => floorData.index===bottunIndex?{...floorData, buttonStatus: newStatus}:floorData))\n}\n\nfunction handleElevetorArrived(elevatorId, floorIndex){\n  return () => {\n    //make it the elivator color to green, and bottun to the new style\n    const optionalFLoorTo = dequeue()\n    setElevatorsData(prevData => (prevData.map(data =>\n      data.key === elevatorId?{...data, \n      color:'green'\n      }: \n      data )))\n    setBottunColor(floorIndex, 'arrived')\n\n\n    //wait 2 secs before choose what is the next elevator mission\n    setTimeout(() => {\n      //in case there is an floor that wait for elevator in the pending queue go to that floor\n      if (optionalFLoorTo !== undefined) {\n        setBottunColor(floorIndex,'waiting')\n        setElevatorsData(prevData => (prevData.map(data =>\n          data.key === elevatorId?{...data, \n          handleElevetorArrived: handleElevetorArrived(data.key ,optionalFLoorTo),\n          currFloor: floorIndex,\n          toFloor: optionalFLoorTo,\n          y:-(height)*optionalFLoorTo,\n          color: 'red'\n          }: \n          data )))\n          setBottunColor(optionalFLoorTo,'waiting')\n\n        //else change the elevator color to black and wait for any reservation\n      }else{\n        setElevatorsData(prevData => (prevData.map(data =>\n            data.key === elevatorId?{...data, \n            currFloor: floorIndex,\n            toFloor: -1,\n            occupied: false,\n            color:'black'       \n          }: \n            data )))\n      }\n      setBottunColor(floorIndex,'call')\n    }, 2000);\n  }\n  \n}\n\n//choose the colsest elevator, if not exists return undifined\nfunction chooseTheClosestElevator(toFloor){\n    let availableElevators = elevatorsData.filter(elevator => !elevator.occupied)\n    if(availableElevators.length === 0){\n      return undefined;\n    }\n    let closestElevator = availableElevators[0];\n    let closestDistance = Math.abs(availableElevators[0].currFloor - toFloor);\n\n    for (const object of availableElevators) {\n      const distance = Math.abs(object.currFloor - toFloor);\n\n      if (distance < closestDistance) {\n        closestDistance = distance;\n        closestElevator = object;\n      }\n  }\n  return closestElevator\n}\n\n\n//when a floor want elevator reservation\n function handleElevatorReservation(floorIndex) {\n\n    \n    handleClockAction(floorIndex,'start',{color: \"black\"})\n\n    //if all the elevators are full put the floor on pending queue\n    let elevator;\n    if(size() > 0 || (elevator = chooseTheClosestElevator(floorIndex)) === undefined){\n      enqueue(floorIndex)  \n      setBottunColor(floorIndex,'waiting')\n\n  //else have elevator change y value and go there\n    }else{\n      const elevatorNumber = elevator.key\n\n      //if there is elevatoe in the floor just say the elevator arrived\n      if(elevator.currFloor === floorIndex){\n        setBottunColor(floorIndex,'arrived')\n        setTimeout(() => {setBottunColor(floorIndex,'call')},2000)\n      }\n      //move the elevator to the floor\n      else{\n        setBottunColor(floorIndex,'waiting')\n\n        setElevatorsData(prevData => (prevData.map(data =>\n          {\n            const oldFloor = data.currFloor\n  \n            return data.key === elevatorNumber?\n            {\n              ...data, \n              handleElevetorArrived: handleElevetorArrived(data.key ,floorIndex),\n              currFloor:oldFloor,\n              toFloor: floorIndex,\n              occupied: true, \n              color: 'red',\n              y:-(height)*floorIndex,\n            \n            }: data \n              \n          })))\n      }\n    }\n    \n  }\n\n  const createBoard2 = () => {\n    return floorsData.map((floorData) => (\n      <Floor\n        columns={columns}\n        squareRef={squareRef}\n        key={floorData.key}\n        index={floorData.index}\n        buttonStatus={floorData.buttonStatus}\n        handleElevatorReservation={handleElevatorReservation}\n        timesData = {floorData.timeArr}\n      />\n    ));\n  };\n  console.log(width)\n  return (<div className=\"board\">\n      {createBoard2()}\n      <div className='elevators-container' style={{width: `${width*columns}px`,height: `${height*rows}px`}}>\n\n      {elevatorsData.map(data => (\n      <Elevetor\n        key={data.key}\n        y={data.y}\n        color = {data.color}\n        style={{ width: `${width}px`, height: `${height}px`}}\n        handleElevetorArrived={handleElevetorArrived(data.key, data.toFloor)}\n        \n      />\n    ))} \n    </div>\n  </div>);\n  \n};\n\nexport default Board;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}