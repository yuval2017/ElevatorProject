{"ast":null,"code":"var _jsxFileName = \"/Users/ywblhytr/Desktop/Elavator/ElevetorProject/src/components/Board.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport '../styles/boardStyles.css';\nimport '../styles/movingObjectStyles.css';\nimport Elevetor from './Elevator';\nimport { useQueue } from '../context/Queue';\nimport Floor from './Floor';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Board = _ref => {\n  _s();\n  let {\n    rows,\n    columns\n  } = _ref;\n  const squareRef = useRef(null);\n  const [squareData, setSquareData] = useState({});\n  const [floorsData, setFloorsData] = useState(createFloorsData());\n  const [elevatorsData, setElevatorsData] = useState([]);\n  const {\n    enqueue,\n    size,\n    dequeue\n  } = useQueue();\n  function initElevatorDta(width) {\n    const elevators = [];\n    for (let i = 0; i < columns; i++) {\n      elevators.push({\n        key: i,\n        y: 0,\n        style: {\n          backgroundColor: 'green',\n          width: `${width}px`,\n          left: `${i * (width - 2)}px`\n        },\n        handleElevetorArrived: handleElevetorArrived(i, 0),\n        occupied: false,\n        currFloor: 0,\n        toFloor: -1\n      });\n    }\n    setElevatorsData(elevators);\n  }\n  //create floors data\n  function createFloorsData() {\n    const ans = [];\n    for (let i = 0; i < rows; i++) {\n      ans.push({\n        key: `floor-${i}`,\n        index: rows - i - 1,\n        buttonStatus: 'call'\n      });\n    }\n    return ans;\n  }\n  const width = squareData.width;\n  const height = squareData.height;\n  const distanceFromBegginingX = squareData.left;\n  const distanceFromBegginingY = window.screen.availHeight - squareData.bottom;\n  console.log(distanceFromBegginingY);\n  //get width and hight for the style of the elevator\n  useEffect(() => {\n    if (squareRef.current) {\n      const {\n        width,\n        height,\n        left,\n        bottom\n      } = squareRef.current.getBoundingClientRect();\n      setSquareData({\n        width,\n        height,\n        left,\n        bottom\n      });\n      initElevatorDta(width);\n    }\n  }, [squareRef]);\n\n  //set bottun color \n  function setBottunColor(bottunIndex, newStatus) {\n    setFloorsData(prevData => prevData.map(floorData => floorData.index === bottunIndex ? {\n      ...floorData,\n      buttonStatus: newStatus\n    } : floorData));\n  }\n  function handleElevetorArrived(elevatorId, bottunNum) {\n    return () => {\n      const optionalFLoorTo = dequeue();\n      //set bottun color to blue\n      setBottunColor(bottunNum, 'arrived');\n      //wait 2 secs\n      setTimeout(() => {\n        //in case there is an floor that wait for elevator\n        if (optionalFLoorTo !== undefined) {\n          console.log(\"arrived wer have mre job\");\n          setBottunColor(bottunNum, 'waiting');\n          setElevatorsData(prevData => prevData.map(data => data.key === elevatorId ? {\n            ...data,\n            handleElevetorArrived: handleElevetorArrived(data.key, optionalFLoorTo),\n            currFloor: bottunNum,\n            toFloor: optionalFLoorTo,\n            y: -(height - 2) * optionalFLoorTo\n          } : data));\n          setBottunColor(optionalFLoorTo, 'waiting');\n          //just set occupied and wait for reservetion\n        } else {\n          setElevatorsData(prevData => prevData.map(data => data.key === elevatorId ? {\n            ...data,\n            currFloor: bottunNum,\n            toFloor: -1,\n            occupied: false\n          } : data));\n        }\n        setBottunColor(bottunNum, 'call');\n      }, 2000);\n    };\n  }\n\n  //choose elevator if not found return undifined\n  function chooseTheClosestElevator(toFloor) {\n    let availableElevators = elevatorsData.filter(elevator => !elevator.occupied);\n    if (availableElevators.length === 0) {\n      return undefined;\n    }\n    let closestElevator = availableElevators[0];\n    let closestDistance = Math.abs(availableElevators[0].currFloor - toFloor);\n    for (const object of availableElevators) {\n      const distance = Math.abs(object.currFloor - toFloor);\n      if (distance < closestDistance) {\n        closestDistance = distance;\n        closestElevator = object;\n      }\n    }\n    return closestElevator;\n  }\n\n  //when a floor want elevator reservation\n  function handleElevatorReservation(floorIndex) {\n    //if all the elevators are full put the floor on pending queue\n    let elevator;\n    if (size() > 0 || (elevator = chooseTheClosestElevator(floorIndex)) === undefined) {\n      enqueue(floorIndex);\n      setBottunColor(floorIndex, 'waiting');\n      //else have elevator change y value and go there\n    } else {\n      const elevatorNumber = elevator.key;\n\n      //stay on the floor\n      if (elevator.currFloor === floorIndex) {\n        setBottunColor(floorIndex, 'arrived');\n        setTimeout(() => {\n          setBottunColor(floorIndex, 'call');\n        }, 2000);\n      } else {\n        setBottunColor(floorIndex, 'waiting');\n        setElevatorsData(prevData => prevData.map(data => {\n          const oldFloor = data.currFloor;\n          return data.key === elevatorNumber ? {\n            ...data,\n            handleElevetorArrived: handleElevetorArrived(data.key, floorIndex),\n            currFloor: oldFloor,\n            toFloor: floorIndex,\n            occupied: true,\n            y: -(height - 2) * floorIndex\n          } : data;\n        }));\n      }\n    }\n  }\n  const createBoard2 = () => {\n    return floorsData.map(floorData => /*#__PURE__*/_jsxDEV(Floor, {\n      columns: columns,\n      squareRef: squareRef,\n      index: floorData.index,\n      buttonStatus: floorData.buttonStatus,\n      handleElevatorReservation: handleElevatorReservation\n    }, floorData.key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: [createBoard2(), elevatorsData.map(data => /*#__PURE__*/_jsxDEV(Elevetor, {\n      y: data.y,\n      style: {\n        width: `${width - 10}px`,\n        marginLeft: `${distanceFromBegginingX - 2}px`,\n        bottom: `${distanceFromBegginingY}px`,\n        left: `${data.key * (width - 1)}px`\n      },\n      handleElevetorArrived: handleElevetorArrived(data.key, data.toFloor)\n    }, data.key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 11\n  }, this);\n};\n_s(Board, \"lGUxYKgoj5/yn6PrU1/ju0ecVFg=\", false, function () {\n  return [useQueue];\n});\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Elevetor","useQueue","Floor","jsxDEV","_jsxDEV","Board","_ref","_s","rows","columns","squareRef","squareData","setSquareData","floorsData","setFloorsData","createFloorsData","elevatorsData","setElevatorsData","enqueue","size","dequeue","initElevatorDta","width","elevators","i","push","key","y","style","backgroundColor","left","handleElevetorArrived","occupied","currFloor","toFloor","ans","index","buttonStatus","height","distanceFromBegginingX","distanceFromBegginingY","window","screen","availHeight","bottom","console","log","current","getBoundingClientRect","setBottunColor","bottunIndex","newStatus","prevData","map","floorData","elevatorId","bottunNum","optionalFLoorTo","setTimeout","undefined","data","chooseTheClosestElevator","availableElevators","filter","elevator","length","closestElevator","closestDistance","Math","abs","object","distance","handleElevatorReservation","floorIndex","elevatorNumber","oldFloor","createBoard2","fileName","_jsxFileName","lineNumber","columnNumber","className","children","marginLeft","_c","$RefreshReg$"],"sources":["/Users/ywblhytr/Desktop/Elavator/ElevetorProject/src/components/Board.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport '../styles/boardStyles.css';\nimport '../styles/movingObjectStyles.css'\nimport Elevetor from './Elevator'\nimport { useQueue } from '../context/Queue';\nimport Floor from './Floor';\n\n\nconst Board = ({ rows, columns }) => {\n  const squareRef = useRef(null);\n  const [squareData, setSquareData] = useState({})\n  const [floorsData, setFloorsData] = useState(createFloorsData())\n  const [elevatorsData, setElevatorsData] = useState([]);\n  const { enqueue, size , dequeue} = useQueue();\n\n\n\nfunction initElevatorDta(width){\n  const elevators = [];\n  for (let i = 0; i < columns; i++) {\n    elevators.push({\n      key: i,\n      y: 0,\n      style: { backgroundColor: 'green', width: `${width}px`, left: `${i*(width-2)}px`},\n      handleElevetorArrived: handleElevetorArrived(i, 0),\n      occupied:false,\n      currFloor: 0,\n      toFloor: -1\n    });\n  }\n  setElevatorsData(elevators);\n}\n//create floors data\nfunction createFloorsData() {\n  const ans = [];\n  for (let i = 0; i < rows; i++) {\n    ans.push({\n      key: `floor-${i}`,\n      index: rows - i - 1,\n      buttonStatus: 'call',\n    });\n  }\n  return ans;\n}\nconst width = squareData.width\nconst height = squareData.height\nconst distanceFromBegginingX = squareData.left\nconst distanceFromBegginingY = window.screen.availHeight - squareData.bottom\nconsole.log(distanceFromBegginingY)\n  //get width and hight for the style of the elevator\n  useEffect(() => {\n    if (squareRef.current) {\n      \n      const { width, height, left, bottom} = squareRef.current.getBoundingClientRect();\n      setSquareData({width, height, left, bottom})\n\n      initElevatorDta(width)\n    }\n  }, [squareRef]);\n\n//set bottun color \nfunction setBottunColor(bottunIndex, newStatus){\n  setFloorsData(prevData =>\n    prevData.map(floorData => floorData.index===bottunIndex?{...floorData, buttonStatus: newStatus}:floorData))\n}\n\nfunction handleElevetorArrived(elevatorId, bottunNum){\n  return () => {\n    const optionalFLoorTo = dequeue()\n    //set bottun color to blue\n    setBottunColor(bottunNum, 'arrived')\n    //wait 2 secs\n    setTimeout(() => {\n      //in case there is an floor that wait for elevator\n      if (optionalFLoorTo !== undefined) {\n        console.log(\"arrived wer have mre job\")\n        setBottunColor(bottunNum,'waiting')\n        setElevatorsData(prevData => (prevData.map(data =>\n          data.key === elevatorId?{...data, \n          handleElevetorArrived: handleElevetorArrived(data.key ,optionalFLoorTo),\n          currFloor: bottunNum,\n          toFloor: optionalFLoorTo,\n          y:-(height - 2)*optionalFLoorTo}: \n          data )))\n          setBottunColor(optionalFLoorTo,'waiting')\n        //just set occupied and wait for reservetion\n      }else{\n        setElevatorsData(prevData => (prevData.map(data =>\n            data.key === elevatorId?{...data, \n            currFloor: bottunNum,\n            toFloor: -1,\n            occupied: false }: \n            data )))\n      }\n      setBottunColor(bottunNum,'call')\n    }, 2000);\n  }\n  \n}\n\n//choose elevator if not found return undifined\nfunction chooseTheClosestElevator(toFloor){\n  \n    let availableElevators = elevatorsData.filter(elevator => !elevator.occupied)\n    if(availableElevators.length === 0){\n      return undefined;\n    }\n    let closestElevator = availableElevators[0];\n    let closestDistance = Math.abs(availableElevators[0].currFloor - toFloor);\n\n    for (const object of availableElevators) {\n      const distance = Math.abs(object.currFloor - toFloor);\n\n      if (distance < closestDistance) {\n        closestDistance = distance;\n        closestElevator = object;\n      }\n  }\n  return closestElevator\n}\n\n\n//when a floor want elevator reservation\n function handleElevatorReservation(floorIndex) {\n    //if all the elevators are full put the floor on pending queue\n    let elevator;\n    if(size() > 0 || (elevator = chooseTheClosestElevator(floorIndex)) === undefined){\n      enqueue(floorIndex)  \n      setBottunColor(floorIndex,'waiting')\n  //else have elevator change y value and go there\n    }else{\n      const elevatorNumber = elevator.key\n\n      //stay on the floor\n      if(elevator.currFloor === floorIndex){\n        setBottunColor(floorIndex,'arrived')\n        setTimeout(() => {setBottunColor(floorIndex,'call')},2000)\n      }\n      else{\n        setBottunColor(floorIndex,'waiting')\n        setElevatorsData(prevData => (prevData.map(data =>\n          {\n            const oldFloor = data.currFloor\n            return data.key === elevatorNumber?{...data, \n              handleElevetorArrived: handleElevetorArrived(data.key ,floorIndex),\n              currFloor:oldFloor,\n              toFloor: floorIndex,\n              occupied: true, \n              y:-(height - 2)*floorIndex}: data \n          })))\n      }\n    }\n    \n  }\n\n  const createBoard2 = () => {\n    return floorsData.map((floorData) => (\n      <Floor\n        columns={columns}\n        squareRef={squareRef}\n        key={floorData.key}\n        index={floorData.index}\n        buttonStatus={floorData.buttonStatus}\n        handleElevatorReservation={handleElevatorReservation}\n      />\n    ));\n  };\n\n  return (<div className=\"board\">\n      {createBoard2()}\n      {elevatorsData.map(data => (\n      <Elevetor\n        key={data.key}\n        y={data.y}\n        style={{ width: `${width-10}px` ,marginLeft: `${distanceFromBegginingX-2}px`,bottom: `${distanceFromBegginingY}px`,  left: `${data.key*(width-1)}px`}}\n        handleElevetorArrived={handleElevetorArrived(data.key, data.toFloor)}\n      />\n    ))}   \n  </div>);\n  \n};\n\nexport default Board;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}