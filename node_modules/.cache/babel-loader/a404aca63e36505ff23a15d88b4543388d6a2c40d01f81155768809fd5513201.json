{"ast":null,"code":"var _jsxFileName = \"/Users/ywblhytr/Desktop/Elavator/ElevetorProject/src/context/elevatorController.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { ELEVATOR_COLORS } from '../constants/constants';\nimport { useQueue } from './Queue';\nimport { AudioPlayerProvider } from '../context/playMusic';\nimport { audioFilePath } from '../constants/config';\nimport Elevetor from '../components/Elevator';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ElevatorControllerContext = /*#__PURE__*/createContext();\nexport const useElevatorController = () => {\n  _s();\n  return useContext(ElevatorControllerContext);\n};\n_s(useElevatorController, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nconst ElevatorControllerProvider = _ref => {\n  _s2();\n  let {\n    children,\n    elevatorsNum\n  } = _ref;\n  const [elevatorsData, setElevatorsData] = useState([]);\n  const {\n    size\n  } = useQueue();\n  const [squareData, setSquareData] = useState({});\n  const width = squareData.width;\n  const height = squareData.height;\n\n  //choose the colsest elevator, if not exists return undifined\n  function chooseTheClosestElevator(toFloor) {\n    let availableElevators = elevatorsData.filter(elevator => elevator.color === ELEVATOR_COLORS.BLACK);\n    if (availableElevators.length === 0) {\n      return undefined;\n    }\n    let closestElevator = availableElevators[0];\n    let closestDistance = Math.abs(availableElevators[0].currFloor - toFloor);\n    for (const object of availableElevators) {\n      const distance = Math.abs(object.currFloor - toFloor);\n      if (distance < closestDistance) {\n        closestDistance = distance;\n        closestElevator = object;\n      }\n    }\n    return closestElevator;\n  }\n  function checkForAvailableElevator(floorIndex) {\n    // if someone waiting to an elevator\n    if (size() > 0) {\n      return undefined;\n      //use choose closest elevator if there is one..\n    } else {\n      return chooseTheClosestElevator(floorIndex);\n    }\n  }\n\n  // init the elevators\n  function initElevatorDta(width) {\n    const elevators = [];\n    for (let i = 0; i < elevatorsNum; i++) {\n      elevators.push({\n        key: i,\n        y: 0,\n        style: {\n          width: `${width}px`,\n          left: `${i * width}px`\n        },\n        currFloor: 0,\n        toFloor: -1,\n        color: ELEVATOR_COLORS.BLACK,\n        dist: 0\n      });\n    }\n    setElevatorsData(elevators);\n  }\n  function changeElevetorStatus(currFloor, toFloor, elevatorNumber, afterArrivedClouser, color) {\n    //if curr floor is -1 thats elevator didnt move..\n    setElevatorsData(prevData => prevData.map(data => {\n      return data.key === elevatorNumber ? {\n        ...data,\n        handleElevetorArrived: afterArrivedClouser,\n        currFloor: currFloor,\n        toFloor: toFloor,\n        color: color,\n        y: toFloor === -1 ? data.y : -height * toFloor,\n        dist: toFloor === -1 ? 0 : Math.abs(currFloor - toFloor)\n      } : data;\n    }));\n  }\n  function changeElevatorColor(elevatorId, color) {\n    setElevatorsData(prevData => prevData.map(data => data.key === elevatorId ? {\n      ...data,\n      color: color\n    } : data));\n  }\n\n  //set the elevator to be available (black)\n  function setElevatorAvailable(elevatorId, curFloor) {\n    setElevatorsData(prevData => prevData.map(data => data.key === elevatorId ? {\n      ...data,\n      currFloor: curFloor,\n      toFloor: -1,\n      color: 'black',\n      dist: 0\n    } : data));\n  }\n  //create elevators data\n  function createElevetsorData(elevatorHandleClouser) {\n    return elevatorsData.map(data => /*#__PURE__*/_jsxDEV(AudioPlayerProvider, {\n      path: audioFilePath,\n      index: data.key,\n      children: /*#__PURE__*/_jsxDEV(Elevetor, {\n        y: data.y,\n        color: data.color,\n        style: {\n          width: `${width}px`,\n          height: `${height}px`\n        },\n        handleElevetorArrived: elevatorHandleClouser(data.key, data.toFloor),\n        dist: data.dist\n      }, data.key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)\n    }, data.key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this));\n  }\n  const value = {\n    elevatorsData,\n    setElevatorsData,\n    initElevatorDta,\n    checkForAvailableElevator,\n    squareData,\n    setSquareData,\n    changeElevetorStatus,\n    setElevatorAvailable,\n    changeElevatorsColor,\n    createElevetorData\n  };\n  return /*#__PURE__*/_jsxDEV(ElevatorControllerContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 5\n  }, this);\n};\n_s2(ElevatorControllerProvider, \"YAW+0ATFjyap2TaVYCT4JvORZ/g=\", false, function () {\n  return [useQueue];\n});\n_c = ElevatorControllerProvider;\nexport default ElevatorControllerProvider;\nvar _c;\n$RefreshReg$(_c, \"ElevatorControllerProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","ELEVATOR_COLORS","useQueue","AudioPlayerProvider","audioFilePath","Elevetor","jsxDEV","_jsxDEV","ElevatorControllerContext","useElevatorController","_s","ElevatorControllerProvider","_ref","_s2","children","elevatorsNum","elevatorsData","setElevatorsData","size","squareData","setSquareData","width","height","chooseTheClosestElevator","toFloor","availableElevators","filter","elevator","color","BLACK","length","undefined","closestElevator","closestDistance","Math","abs","currFloor","object","distance","checkForAvailableElevator","floorIndex","initElevatorDta","elevators","i","push","key","y","style","left","dist","changeElevetorStatus","elevatorNumber","afterArrivedClouser","prevData","map","data","handleElevetorArrived","changeElevatorColor","elevatorId","setElevatorAvailable","curFloor","createElevetsorData","elevatorHandleClouser","path","index","fileName","_jsxFileName","lineNumber","columnNumber","value","changeElevatorsColor","createElevetorData","Provider","_c","$RefreshReg$"],"sources":["/Users/ywblhytr/Desktop/Elavator/ElevetorProject/src/context/elevatorController.jsx"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\nimport { ELEVATOR_COLORS } from '../constants/constants';\nimport { useQueue } from './Queue';\nimport { AudioPlayerProvider } from '../context/playMusic';\nimport { audioFilePath } from '../constants/config';\nimport Elevetor from '../components/Elevator'\n\n\n\nconst ElevatorControllerContext = createContext();\n\n\n\nexport const useElevatorController = () => {\n  return useContext(ElevatorControllerContext);\n};\n\nconst ElevatorControllerProvider = ({ children, elevatorsNum }) => {\n  const [elevatorsData, setElevatorsData] = useState([]);\n  const {size} = useQueue()\n  const [squareData, setSquareData] = useState({})\n  const width = squareData.width \n  const height = squareData.height \n\n\n//choose the colsest elevator, if not exists return undifined\nfunction chooseTheClosestElevator(toFloor){\n  let availableElevators = elevatorsData.filter(elevator => elevator.color===ELEVATOR_COLORS.BLACK)\n  if(availableElevators.length === 0){\n    return undefined;\n  }\n  let closestElevator = availableElevators[0];\n  let closestDistance = Math.abs(availableElevators[0].currFloor - toFloor);\n\n  for (const object of availableElevators) {\n    const distance = Math.abs(object.currFloor - toFloor);\n\n    if (distance < closestDistance) {\n      closestDistance = distance;\n      closestElevator = object;\n    }\n}\nreturn closestElevator\n}\nfunction checkForAvailableElevator(floorIndex){\n  // if someone waiting to an elevator\n  if(size() > 0){\n    return undefined\n    //use choose closest elevator if there is one..\n  }else{\n    return chooseTheClosestElevator(floorIndex)\n  }\n}\n  \n  // init the elevators\n  function initElevatorDta(width) {\n    const elevators = [];\n    for (let i = 0; i < elevatorsNum; i++) {\n      elevators.push({\n        key: i,\n        y: 0,\n        style: {width: `${width}px`, left: `${i*(width)}px`},\n        currFloor: 0,\n        toFloor: -1,\n        color: ELEVATOR_COLORS.BLACK,\n        dist: 0,\n      });\n    }\n    setElevatorsData(elevators);\n  }\n\n  function changeElevetorStatus(currFloor,toFloor, elevatorNumber, afterArrivedClouser, color){\n    //if curr floor is -1 thats elevator didnt move..\n    setElevatorsData(prevData => (prevData.map(data =>\n      {\n        return data.key === elevatorNumber?\n        {\n          ...data, \n          handleElevetorArrived: afterArrivedClouser,\n          currFloor: currFloor,\n          toFloor: toFloor,\n          color: color,\n          y: toFloor === -1? data.y : -(height)*toFloor,\n          dist: toFloor === -1 ? 0 : Math.abs(currFloor-toFloor)       \n        }: data \n      })))\n  }\n\n function changeElevatorColor(elevatorId, color){\n  setElevatorsData(prevData => (prevData.map(data =>\n    data.key === elevatorId?{\n      ...data, \n      color: color\n    }: \n    data )))\n  }\n\n//set the elevator to be available (black)\nfunction setElevatorAvailable(elevatorId, curFloor){\n    setElevatorsData(prevData => (prevData.map(data =>\n      data.key === elevatorId?{...data, \n      currFloor: curFloor,\n      toFloor: -1,\n      color:'black',\n      dist: 0       \n    }: \n      data )))\n  }\n  //create elevators data\n  function createElevetsorData(elevatorHandleClouser){\n    return elevatorsData.map(data => (\n      <AudioPlayerProvider path={audioFilePath} key = {data.key} index={data.key}>\n        <Elevetor\n          key={data.key}\n          y={data.y}\n          color={data.color}\n          style={{ width: `${width}px`, height: `${height}px` }}\n          handleElevetorArrived={elevatorHandleClouser(data.key, data.toFloor)}\n          dist={data.dist}\n        />\n      </AudioPlayerProvider>\n    ))\n  }\n\n\n  const value = {elevatorsData, \n    setElevatorsData, \n    initElevatorDta, \n    checkForAvailableElevator, \n    squareData, \n    setSquareData,\n    changeElevetorStatus,\n    setElevatorAvailable,\n    changeElevatorsColor,\n    createElevetorData};\n\n  return (\n    <ElevatorControllerContext.Provider value={value}>\n      {children}\n    </ElevatorControllerContext.Provider>\n  );\n};\n\nexport default ElevatorControllerProvider;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}