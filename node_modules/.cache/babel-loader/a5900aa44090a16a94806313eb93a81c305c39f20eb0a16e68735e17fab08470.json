{"ast":null,"code":"var _jsxFileName = \"/Users/ywblhytr/Desktop/Elavator/ElevetorProject/src/components/Board.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport '../styles/boardStyles.css';\nimport { useQueue } from '../context/Queue';\nimport Floor from './Floor';\nimport '../constants/constants';\nimport { BUTTON_STATUS, TIMER, ELEVATOR_COLORS } from '../constants/constants';\nimport { useElevatorController } from '../context/elevatorController';\nimport { useFloorController, usefloorController } from '../context/floorController';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board(_ref) {\n  _s();\n  let {\n    rows,\n    columns\n  } = _ref;\n  const {\n    handleClockAction\n  } = useFloorController();\n  const [floorsData, setFloorsData] = useState(createFloorsData());\n  const {\n    enqueue,\n    dequeue\n  } = useQueue();\n\n  //init elevator controller\n  const {\n    squareRef,\n    checkForAvailableElevator,\n    changeElevetorStatus,\n    changeElevatorColor,\n    createElevetorsData\n  } = useElevatorController();\n\n  //that data to change the elevator position, width,hight dynamicly\n\n  function handleElevetorArrived(elevatorId, floorIndex) {\n    return () => {\n      //alevator arrived change the color\n      changeElevatorColor(elevatorId, ELEVATOR_COLORS.GREEN);\n\n      //set button to arrived\n      setBottunColor(floorIndex, BUTTON_STATUS.ARRIVED);\n\n      //reset the time and hide clock\n      handleClockAction(floorIndex, elevatorId, TIMER.RESET);\n\n      //make it the elevator color to green, and bottun to the new style\n      const optionalFLoorTo = dequeue();\n\n      //wait 2 secs before choose what is the next elevator mission\n      setTimeout(() => {\n        //in case there is an floor that wait for elevator in the pending queue go to that floor\n        if (optionalFLoorTo !== undefined) {\n          //send to elevator to this floor\n          sendElevetorToFloor(elevatorId, floorIndex, optionalFLoorTo);\n          //the elevator ready for more \"missions\"\n        } else {\n          changeElevetorStatus(floorIndex, -1, elevatorId, () => {}, ELEVATOR_COLORS.BLACK);\n        }\n        setBottunColor(floorIndex, BUTTON_STATUS.CALL);\n      }, 2000);\n    };\n  }\n\n  //when a floor want elevator reservation\n  function handleElevatorReservation(floorIndex) {\n    //if the elevator controller dont have Available elevator ...\n    let elevator;\n    if ((elevator = checkForAvailableElevator(floorIndex)) === undefined) {\n      enqueue(floorIndex);\n      setBottunColor(floorIndex, BUTTON_STATUS.WAITING);\n\n      //else have elevator change y value and go there\n    } else {\n      //elevator index\n      const elevatorNumber = elevator.key;\n\n      //if there is elevator in the floor elevator arrived\n      if (elevator.currFloor === floorIndex) {\n        setBottunColor(floorIndex, BUTTON_STATUS.ARRIVED);\n        changeElevatorColor(elevatorNumber, ELEVATOR_COLORS.GREEN);\n        setTimeout(() => {\n          setBottunColor(floorIndex, BUTTON_STATUS.CALL);\n          changeElevatorColor(elevatorNumber, ELEVATOR_COLORS.BLACK);\n        }, 2000);\n      } else {\n        //set the floor bottun color\n        setBottunColor(floorIndex, BUTTON_STATUS.WAITING);\n\n        //send the elevator to this floor\n        sendElevetorToFloor(elevatorNumber, elevator.currFloor, floorIndex);\n      }\n    }\n  }\n  function sendElevetorToFloor(elevatorId, currFLoor, toFloor) {\n    //start the square timer\n    handleClockAction(toFloor, elevatorId, TIMER.START);\n\n    // //create clouser for the elevator\n    const elevatorArrivedClouser = handleElevetorArrived(elevatorId, toFloor);\n\n    // //use elevatorController to move the elevator to the floor\n    changeElevetorStatus(currFLoor, toFloor, elevatorId, elevatorArrivedClouser, ELEVATOR_COLORS.RED);\n  }\n\n  //from thiscsevtion all floors functionality\n\n  //create floors data\n  function createFloorsData() {\n    const ans = [];\n    for (let i = 0; i < rows; i++) {\n      const timesArr = new Array(columns).fill(TIMER.STOP);\n      ans.push({\n        key: `floor-${i}`,\n        index: rows - i - 1,\n        buttonStatus: BUTTON_STATUS.CALL,\n        timeArr: timesArr\n      });\n    }\n    return ans;\n  }\n\n  //set bottun color \n  function setBottunColor(floorIndex, newStatus) {\n    setFloorsData(prevData => prevData.map(floorData => floorData.index === floorIndex ? {\n      ...floorData,\n      buttonStatus: newStatus\n    } : floorData));\n  }\n\n  //init the elevetor data\n\n  function createBoard2() {\n    return floorsData.map(floorData => /*#__PURE__*/_jsxDEV(Floor, {\n      columns: columns,\n      squareRef: squareRef,\n      index: floorData.index,\n      buttonStatus: floorData.buttonStatus,\n      handleElevatorReservation: handleElevatorReservation,\n      timesData: floorData.timeArr\n    }, floorData.key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this));\n  }\n  ;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: [createBoard2(), createElevetorsData(handleElevetorArrived, columns, rows)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 5\n  }, this);\n}\n_s(Board, \"OjVtv/dCQhe74TqR8ftPa55jbk4=\", false, function () {\n  return [useFloorController, useQueue, useElevatorController];\n});\n_c = Board;\n;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","useQueue","Floor","BUTTON_STATUS","TIMER","ELEVATOR_COLORS","useElevatorController","useFloorController","usefloorController","jsxDEV","_jsxDEV","Board","_ref","_s","rows","columns","handleClockAction","floorsData","setFloorsData","createFloorsData","enqueue","dequeue","squareRef","checkForAvailableElevator","changeElevetorStatus","changeElevatorColor","createElevetorsData","handleElevetorArrived","elevatorId","floorIndex","GREEN","setBottunColor","ARRIVED","RESET","optionalFLoorTo","setTimeout","undefined","sendElevetorToFloor","BLACK","CALL","handleElevatorReservation","elevator","WAITING","elevatorNumber","key","currFloor","currFLoor","toFloor","START","elevatorArrivedClouser","RED","ans","i","timesArr","Array","fill","STOP","push","index","buttonStatus","timeArr","newStatus","prevData","map","floorData","createBoard2","timesData","fileName","_jsxFileName","lineNumber","columnNumber","className","children","_c","$RefreshReg$"],"sources":["/Users/ywblhytr/Desktop/Elavator/ElevetorProject/src/components/Board.jsx"],"sourcesContent":["import React, {useState } from 'react';\nimport '../styles/boardStyles.css';\nimport { useQueue } from '../context/Queue';\nimport Floor from './Floor';\nimport '../constants/constants'\nimport { BUTTON_STATUS, TIMER, ELEVATOR_COLORS } from '../constants/constants';\nimport { useElevatorController} from '../context/elevatorController';\nimport { useFloorController, usefloorController } from '../context/floorController';\n\n\n\nfunction Board ({ rows, columns }) {\n  const {handleClockAction} = useFloorController()\n  \n  const [floorsData, setFloorsData] = useState(createFloorsData())\n  const { enqueue , dequeue} = useQueue();\n\n \n  //init elevator controller\n  const {\n    squareRef,\n    checkForAvailableElevator, \n    changeElevetorStatus, \n    changeElevatorColor,\n    createElevetorsData} = useElevatorController();\n\n\n//that data to change the elevator position, width,hight dynamicly\n\n\nfunction handleElevetorArrived(elevatorId, floorIndex){\n  return () => {\n    \n    //alevator arrived change the color\n    changeElevatorColor(elevatorId,ELEVATOR_COLORS.GREEN)\n\n    //set button to arrived\n    setBottunColor(floorIndex, BUTTON_STATUS.ARRIVED)\n\n    //reset the time and hide clock\n    handleClockAction(floorIndex,elevatorId,TIMER.RESET)\n\n     //make it the elevator color to green, and bottun to the new style\n     const optionalFLoorTo = dequeue()\n\n    //wait 2 secs before choose what is the next elevator mission\n    setTimeout(() => {\n\n      //in case there is an floor that wait for elevator in the pending queue go to that floor\n      if (optionalFLoorTo !== undefined) {\n        //send to elevator to this floor\n        sendElevetorToFloor(elevatorId, floorIndex, optionalFLoorTo)\n      //the elevator ready for more \"missions\"\n      }else{\n        changeElevetorStatus(floorIndex, -1, elevatorId, () => {}, ELEVATOR_COLORS.BLACK)\n      }\n      setBottunColor(floorIndex,BUTTON_STATUS.CALL)\n    }, 2000);\n  }\n  \n}\n\n//when a floor want elevator reservation\nfunction handleElevatorReservation(floorIndex) {\n  //if the elevator controller dont have Available elevator ...\n  let elevator;\n  if((elevator = checkForAvailableElevator(floorIndex)) === undefined){\n    enqueue(floorIndex)  \n    setBottunColor(floorIndex, BUTTON_STATUS.WAITING)\n\n//else have elevator change y value and go there\n  }else{\n    //elevator index\n    const elevatorNumber = elevator.key\n\n    //if there is elevator in the floor elevator arrived\n    if(elevator.currFloor === floorIndex) {\n      setBottunColor(floorIndex,BUTTON_STATUS.ARRIVED)\n      changeElevatorColor(elevatorNumber, ELEVATOR_COLORS.GREEN)\n      setTimeout(() => \n      {\n        setBottunColor(floorIndex,BUTTON_STATUS.CALL)\n        changeElevatorColor(elevatorNumber, ELEVATOR_COLORS.BLACK)\n      },2000)\n    }\n\n    else{\n      //set the floor bottun color\n      setBottunColor(floorIndex, BUTTON_STATUS.WAITING)\n\n      //send the elevator to this floor\n      sendElevetorToFloor(elevatorNumber, elevator.currFloor, floorIndex)\n\n    }\n  }\n}\n\nfunction sendElevetorToFloor(elevatorId, currFLoor, toFloor){\n  //start the square timer\n  handleClockAction(toFloor, elevatorId,TIMER.START)\n\n  // //create clouser for the elevator\n  const elevatorArrivedClouser = handleElevetorArrived(elevatorId ,toFloor)\n\n  // //use elevatorController to move the elevator to the floor\n  changeElevetorStatus(currFLoor, toFloor, elevatorId, elevatorArrivedClouser, ELEVATOR_COLORS.RED)\n}\n\n\n//from thiscsevtion all floors functionality\n\n//create floors data\nfunction createFloorsData() {\n  const ans = [];\n  for (let i = 0; i < rows; i++) {\n    const timesArr = new Array(columns).fill(TIMER.STOP); \n    ans.push({\n      key: `floor-${i}`,\n      index: rows - i - 1,\n      buttonStatus: BUTTON_STATUS.CALL,\n      timeArr: timesArr\n    });\n  }\n  return ans;\n}\n\n\n\n\n  //set bottun color \nfunction setBottunColor(floorIndex, newStatus){\n  setFloorsData(prevData =>\n    prevData.map(floorData => floorData.index === floorIndex?{...floorData, buttonStatus: newStatus}:floorData))\n  }\n\n\n\n\n  //init the elevetor data\n\n\n\n\n\n  function createBoard2() {\n    return floorsData.map((floorData) => (\n      <Floor\n        columns={columns}\n        squareRef={squareRef}\n        key={floorData.key}\n        index={floorData.index}\n        buttonStatus={floorData.buttonStatus}\n        handleElevatorReservation={handleElevatorReservation}\n        timesData = {floorData.timeArr}\n      />\n    ));\n  };\n  return (\n    <div className='main'>\n      <div className=\"board\">\n        {createBoard2()}\n        {createElevetorsData(handleElevetorArrived, columns, rows)}\n    </div>\n  </div>);\n  \n};\n\nexport default Board;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}