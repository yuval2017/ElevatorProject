{"ast":null,"code":"var _jsxFileName = \"/Users/ywblhytr/Desktop/Elavator/ElevetorProject/src/components/Board.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport '../styles/boardStyles.css';\nimport Elevetor from './Elevator';\nimport { useQueue } from '../context/Queue';\nimport Floor from './Floor';\nimport { AudioPlayerProvider } from '../context/playMusic';\nimport '../constants/constants';\nimport { audioFilePath } from '../constants/config';\nimport { BUTTON_STATUS, TIMER, ELEVATOR_COLORS } from '../constants/constants';\nimport { useElevatorController } from '../context/elevatorController';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Board = _ref => {\n  _s();\n  let {\n    rows,\n    columns\n  } = _ref;\n  const squareRef = useRef(null);\n  const [floorsData, setFloorsData] = useState(createFloorsData());\n  const {\n    enqueue,\n    dequeue\n  } = useQueue();\n  //init elevator controller\n  const {\n    elevatorsData,\n    setElevatorsData,\n    initElevatorDta,\n    checkForAvailableElevator,\n    squareData,\n    setSquareData,\n    changeElevetorStatus,\n    changeElevatorColor\n  } = useElevatorController();\n\n  //that data to change the elevator position, width,hight dynamicly\n  const width = squareData.width;\n  const height = squareData.height;\n\n  //create floors data\n  function createFloorsData() {\n    const ans = [];\n    for (let i = 0; i < rows; i++) {\n      const timesArr = new Array(columns).fill(TIMER.STOP);\n      ans.push({\n        key: `floor-${i}`,\n        index: rows - i - 1,\n        buttonStatus: BUTTON_STATUS.CALL,\n        timeArr: timesArr\n      });\n    }\n    return ans;\n  }\n\n  //init the elevetor data\n  useEffect(() => {\n    if (squareRef.current) {\n      const {\n        width,\n        height,\n        left,\n        bottom\n      } = squareRef.current.getBoundingClientRect();\n      setSquareData({\n        width,\n        height,\n        left,\n        bottom\n      });\n      initElevatorDta(width);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [width]);\n\n  //set bottun color \n  function setBottunColor(bottunIndex, newStatus) {\n    setFloorsData(prevData => prevData.map(floorData => floorData.index === bottunIndex ? {\n      ...floorData,\n      buttonStatus: newStatus\n    } : floorData));\n  }\n  function handleElevetorArrived(elevatorId, floorIndex) {\n    return () => {\n      //make it the elivator color to green, and bottun to the new style\n      const optionalFLoorTo = dequeue();\n      changeElevatorColor(elevatorId, ELEVATOR_COLORS.GREEN);\n\n      //set button to arrived\n      setBottunColor(floorIndex, BUTTON_STATUS.ARRIVED);\n      handleClockAction(floorIndex, elevatorId, TIMER.RESET);\n      //wait 2 secs before choose what is the next elevator mission\n      setTimeout(() => {\n        //in case there is an floor that wait for elevator in the pending queue go to that floor\n        if (optionalFLoorTo !== undefined) {\n          //set floor button to waiting status\n          setBottunColor(floorIndex, BUTTON_STATUS.WAITING);\n\n          //start square clock timer\n          handleClockAction(optionalFLoorTo, elevatorId, TIMER.START);\n\n          // //create clouser for the elevator\n          const elevatorArrivedClouser = handleElevetorArrived(elevatorId, optionalFLoorTo);\n\n          // //use elevatorController to move the elevator to the floor\n          changeElevetorStatus(floorIndex, optionalFLoorTo, elevatorId, elevatorArrivedClouser, ELEVATOR_COLORS.RED);\n\n          //change the color to waiting \n          setBottunColor(optionalFLoorTo, BUTTON_STATUS.WAITING);\n\n          //else change the elevator color to black and wait for any reservation\n        } else {\n          changeElevetorStatus(floorIndex, -1, elevatorId, () => {}, ELEVATOR_COLORS.BLACK);\n        }\n        setBottunColor(floorIndex, BUTTON_STATUS.CALL);\n      }, 2000);\n    };\n  }\n  function handleClockAction(floorIndex, elevatorIndex, _ref2) {\n    let {\n      onChange: action,\n      styles: newStyles\n    } = _ref2;\n    //help function\n    function setTime(timersArr) {\n      return timersArr.map((timer, i) => {\n        if (i === elevatorIndex) {\n          return {\n            ...timer,\n            onChange: action,\n            styles: newStyles\n          };\n        } else {\n          return timer;\n        }\n      });\n    }\n    setFloorsData(prevData => prevData.map(floorData => {\n      const newData = floorData.index === floorIndex ? {\n        ...floorData,\n        timeArr: setTime(floorData.timeArr)\n      } : floorData;\n      if (floorData.index === floorIndex) {}\n      return newData;\n    }));\n  }\n\n  //when a floor want elevator reservation\n  function handleElevatorReservation(floorIndex) {\n    //if the elevator controller dont have Available elevator ...\n    let elevator;\n    if ((elevator = checkForAvailableElevator(floorIndex)) === undefined) {\n      enqueue(floorIndex);\n      setBottunColor(floorIndex, BUTTON_STATUS.WAITING);\n\n      //else have elevator change y value and go there\n    } else {\n      const elevatorNumber = elevator.key;\n      //if there is elevatoe in the floor just say the elevator arrived\n      if (elevator.currFloor === floorIndex) {\n        setBottunColor(floorIndex, BUTTON_STATUS.ARRIVED);\n        setTimeout(() => {\n          setBottunColor(floorIndex, BUTTON_STATUS.CALL);\n        }, 2000);\n      } else {\n        //show to clock on the floor index and elivator index\n        handleClockAction(floorIndex, elevatorNumber, TIMER.START);\n\n        //set the floor bottun color\n        setBottunColor(floorIndex, BUTTON_STATUS.WAITING);\n\n        //create clouser for the elevator\n        const elevatorArrivedClouser = handleElevetorArrived(elevatorNumber, floorIndex);\n\n        //use elevatorController to move the elevator\n        changeElevetorStatus(elevator.currFloor, floorIndex, elevatorNumber, elevatorArrivedClouser, ELEVATOR_COLORS.RED);\n      }\n    }\n  }\n  const createBoard2 = () => {\n    return floorsData.map(floorData => /*#__PURE__*/_jsxDEV(Floor, {\n      columns: columns,\n      squareRef: squareRef,\n      index: floorData.index,\n      buttonStatus: floorData.buttonStatus,\n      handleElevatorReservation: handleElevatorReservation,\n      timesData: floorData.timeArr\n    }, floorData.key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: [createBoard2(), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"elevators-container\",\n        style: {\n          width: `${width * columns}px`,\n          height: `${height * rows}px`\n        },\n        children: elevatorsData.map(data => /*#__PURE__*/_jsxDEV(AudioPlayerProvider, {\n          path: audioFilePath,\n          index: data.key,\n          children: /*#__PURE__*/_jsxDEV(Elevetor, {\n            y: data.y,\n            color: data.color,\n            style: {\n              width: `${width}px`,\n              height: `${height}px`\n            },\n            handleElevetorArrived: handleElevetorArrived(data.key, data.toFloor),\n            dist: data.dist\n          }, data.key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 11\n          }, this)\n        }, data.key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 9\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 195,\n    columnNumber: 5\n  }, this);\n};\n_s(Board, \"HnGKQ8OOsPiqHeCxZ+n9fxJXq+g=\", false, function () {\n  return [useQueue, useElevatorController];\n});\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Elevetor","useQueue","Floor","AudioPlayerProvider","audioFilePath","BUTTON_STATUS","TIMER","ELEVATOR_COLORS","useElevatorController","jsxDEV","_jsxDEV","Board","_ref","_s","rows","columns","squareRef","floorsData","setFloorsData","createFloorsData","enqueue","dequeue","elevatorsData","setElevatorsData","initElevatorDta","checkForAvailableElevator","squareData","setSquareData","changeElevetorStatus","changeElevatorColor","width","height","ans","i","timesArr","Array","fill","STOP","push","key","index","buttonStatus","CALL","timeArr","current","left","bottom","getBoundingClientRect","setBottunColor","bottunIndex","newStatus","prevData","map","floorData","handleElevetorArrived","elevatorId","floorIndex","optionalFLoorTo","GREEN","ARRIVED","handleClockAction","RESET","setTimeout","undefined","WAITING","START","elevatorArrivedClouser","RED","BLACK","elevatorIndex","_ref2","onChange","action","styles","newStyles","setTime","timersArr","timer","newData","handleElevatorReservation","elevator","elevatorNumber","currFloor","createBoard2","timesData","fileName","_jsxFileName","lineNumber","columnNumber","className","children","style","data","path","y","color","toFloor","dist","_c","$RefreshReg$"],"sources":["/Users/ywblhytr/Desktop/Elavator/ElevetorProject/src/components/Board.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport '../styles/boardStyles.css';\nimport Elevetor from './Elevator'\nimport { useQueue } from '../context/Queue';\nimport Floor from './Floor';\nimport { AudioPlayerProvider } from '../context/playMusic';\nimport '../constants/constants'\nimport {audioFilePath} from '../constants/config'\nimport { BUTTON_STATUS, TIMER, ELEVATOR_COLORS } from '../constants/constants';\nimport { useElevatorController} from '../context/elevatorController';\n\n\n\nconst Board = ({ rows, columns }) => {\n  const squareRef = useRef(null);\n  const [floorsData, setFloorsData] = useState(createFloorsData())\n\n  const { enqueue , dequeue} = useQueue();\n  //init elevator controller\n  const {elevatorsData, \n    setElevatorsData, \n    initElevatorDta , \n    checkForAvailableElevator, \n    squareData, \n    setSquareData, \n    changeElevetorStatus, \n    changeElevatorColor} = useElevatorController();\n\n\n//that data to change the elevator position, width,hight dynamicly\nconst width = squareData.width \nconst height = squareData.height \n\n\n//create floors data\nfunction createFloorsData() {\n  const ans = [];\n  for (let i = 0; i < rows; i++) {\n    const timesArr = new Array(columns).fill(TIMER.STOP); \n    ans.push({\n      key: `floor-${i}`,\n      index: rows - i - 1,\n      buttonStatus: BUTTON_STATUS.CALL,\n      timeArr: timesArr\n    });\n  }\n  return ans;\n}\n\n  //init the elevetor data\n  useEffect(() => {\n    if (squareRef.current) {\n      \n      const { width, height, left, bottom} = squareRef.current.getBoundingClientRect();\n      setSquareData({width, height, left, bottom})\n      \n      initElevatorDta(width)\n    }\n     // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [width]);\n  \n\n//set bottun color \nfunction setBottunColor(bottunIndex, newStatus){\n  setFloorsData(prevData =>\n    prevData.map(floorData => floorData.index === bottunIndex?{...floorData, buttonStatus: newStatus}:floorData))\n}\n\nfunction handleElevetorArrived(elevatorId, floorIndex){\n  return () => {\n    \n    //make it the elivator color to green, and bottun to the new style\n    const optionalFLoorTo = dequeue()\n    changeElevatorColor(elevatorId,ELEVATOR_COLORS.GREEN)\n\n    //set button to arrived\n    setBottunColor(floorIndex, BUTTON_STATUS.ARRIVED)\n\n    handleClockAction(floorIndex,elevatorId,TIMER.RESET)\n    //wait 2 secs before choose what is the next elevator mission\n    setTimeout(() => {\n\n      //in case there is an floor that wait for elevator in the pending queue go to that floor\n      if (optionalFLoorTo !== undefined) {\n\n        //set floor button to waiting status\n        setBottunColor(floorIndex,BUTTON_STATUS.WAITING)\n\n        //start square clock timer\n        handleClockAction(optionalFLoorTo, elevatorId,TIMER.START)\n\n        // //create clouser for the elevator\n         const elevatorArrivedClouser = handleElevetorArrived(elevatorId ,optionalFLoorTo)\n\n        // //use elevatorController to move the elevator to the floor\n        changeElevetorStatus(floorIndex, optionalFLoorTo, elevatorId, elevatorArrivedClouser, ELEVATOR_COLORS.RED)\n\n        //change the color to waiting \n        setBottunColor(optionalFLoorTo, BUTTON_STATUS.WAITING)\n\n        //else change the elevator color to black and wait for any reservation\n      }else{\n\n        changeElevetorStatus(floorIndex, -1, elevatorId, () => {}, ELEVATOR_COLORS.BLACK)\n      }\n      setBottunColor(floorIndex,BUTTON_STATUS.CALL)\n    }, 2000);\n  }\n  \n}\n\n\nfunction handleClockAction(floorIndex, elevatorIndex, { onChange: action, styles: newStyles }){\n\n\n  //help function\n  function setTime(timersArr) {\n    return timersArr.map((timer, i) => {\n      if (i === elevatorIndex) {\n        return {\n          ...timer,\n          onChange: action,\n          styles: newStyles\n        };\n      } else {\n        return timer;\n      }\n    });\n  }\n\n  setFloorsData(prevData =>\n      prevData.map(floorData =>\n        {\n          const newData = floorData.index === floorIndex? {\n            ...floorData, \n            timeArr: setTime(floorData.timeArr)\n          }:floorData \n          if(floorData.index === floorIndex){\n            \n          }\n          return newData\n        }\n     \n    ))\n}\n\n\n//when a floor want elevator reservation\n function handleElevatorReservation(floorIndex) {\n    //if the elevator controller dont have Available elevator ...\n    let elevator;\n    if((elevator = checkForAvailableElevator(floorIndex)) === undefined){\n      enqueue(floorIndex)  \n      setBottunColor(floorIndex, BUTTON_STATUS.WAITING)\n\n  //else have elevator change y value and go there\n    }else{\n      const elevatorNumber = elevator.key\n      //if there is elevatoe in the floor just say the elevator arrived\n      if(elevator.currFloor === floorIndex){\n        setBottunColor(floorIndex,BUTTON_STATUS.ARRIVED)\n        setTimeout(() => {setBottunColor(floorIndex,BUTTON_STATUS.CALL)},2000)\n      }\n      \n      else{\n        //show to clock on the floor index and elivator index\n        handleClockAction(floorIndex, elevatorNumber,TIMER.START)\n\n        //set the floor bottun color\n        setBottunColor(floorIndex,BUTTON_STATUS.WAITING)\n\n        //create clouser for the elevator\n        const elevatorArrivedClouser = handleElevetorArrived(elevatorNumber ,floorIndex)\n\n        //use elevatorController to move the elevator\n        changeElevetorStatus(elevator.currFloor,floorIndex, elevatorNumber, elevatorArrivedClouser ,ELEVATOR_COLORS.RED)\n      }\n    }\n  }\n\n  const createBoard2 = () => {\n    return floorsData.map((floorData) => (\n      <Floor\n        columns={columns}\n        squareRef={squareRef}\n        key={floorData.key}\n        index={floorData.index}\n        buttonStatus={floorData.buttonStatus}\n        handleElevatorReservation={handleElevatorReservation}\n        timesData = {floorData.timeArr}\n      />\n    ));\n  };\n  return (\n    <div className='main'>\n      <div className=\"board\">\n        {createBoard2()}\n        <div className='elevators-container' style={{width: `${width*columns}px`,height: `${height*rows}px`}}>\n        {elevatorsData.map(data => (\n        <AudioPlayerProvider path={audioFilePath} key = {data.key} index={data.key}>\n          <Elevetor\n            key={data.key}\n            y={data.y}\n            color={data.color}\n            style={{ width: `${width}px`, height: `${height}px` }}\n            handleElevetorArrived={handleElevetorArrived(data.key, data.toFloor)}\n            dist={data.dist}\n          />\n        </AudioPlayerProvider>\n      ))}\n      </div>\n    </div>\n  </div>);\n  \n};\n\nexport default Board;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}