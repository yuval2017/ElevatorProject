{"ast":null,"code":"var _jsxFileName = \"/Users/ywblhytr/Desktop/Elavator/ElevetorProject/src/components/Board.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport '../styles/boardStyles.css';\nimport Elevetor from './Elevator';\nimport { useQueue } from '../context/Queue';\nimport Floor from './Floor';\nimport { AudioPlayerProvider } from '../context/playMusic';\nimport '../constants/constants';\nimport { audioFilePath } from '../constants/config';\nimport { BUTTON_STATUS } from '../constants/constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Board = _ref => {\n  _s();\n  let {\n    rows,\n    columns\n  } = _ref;\n  const squareRef = useRef(null);\n  const [squareData, setSquareData] = useState({});\n  const [floorsData, setFloorsData] = useState(createFloorsData());\n  const [elevatorsData, setElevatorsData] = useState([]);\n  const {\n    enqueue,\n    size,\n    dequeue\n  } = useQueue();\n\n  //that data to change the elevator position, width,hight dynamicly\n  const width = squareData.width;\n  const height = squareData.height;\n\n  //create floors data\n  function createFloorsData() {\n    const ans = [];\n    for (let i = 0; i < rows; i++) {\n      const timesArr = new Array(columns).fill({\n        onChange: 'stop',\n        styles: {\n          opacity: 0\n        }\n      });\n      ans.push({\n        key: `floor-${i}`,\n        index: rows - i - 1,\n        buttonStatus: BUTTON_STATUS.CALL,\n        timeArr: timesArr\n      });\n    }\n    return ans;\n  }\n  useEffect(() => {\n    if (squareRef.current) {\n      const {\n        width,\n        height,\n        left,\n        bottom\n      } = squareRef.current.getBoundingClientRect();\n      setSquareData({\n        width,\n        height,\n        left,\n        bottom\n      });\n      initElevatorDta(width);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [width]);\n  function initElevatorDta(width) {\n    const elevators = [];\n    for (let i = 0; i < columns; i++) {\n      elevators.push({\n        key: i,\n        y: 0,\n        style: {\n          backgroundColor: 'green',\n          width: `${width}px`,\n          left: `${i * width}px`\n        },\n        handleElevetorArrived: handleElevetorArrived(i, 0),\n        occupied: false,\n        currFloor: 0,\n        toFloor: -1,\n        color: 'black',\n        dist: 0\n      });\n    }\n    setElevatorsData(elevators);\n  }\n\n  //set bottun color \n  function setBottunColor(bottunIndex, newStatus) {\n    setFloorsData(prevData => prevData.map(floorData => floorData.index === bottunIndex ? {\n      ...floorData,\n      buttonStatus: newStatus\n    } : floorData));\n  }\n  function handleElevetorArrived(elevatorId, floorIndex) {\n    return () => {\n      //make it the elivator color to green, and bottun to the new style\n      const optionalFLoorTo = dequeue();\n      setElevatorsData(prevData => prevData.map(data => data.key === elevatorId ? {\n        ...data,\n        color: 'green'\n      } : data));\n      setBottunColor(floorIndex, BUTTON_STATUS.ARRIVED);\n      handleClockAction(floorIndex, elevatorId, 'reset', {\n        opacity: 0\n      });\n      //wait 2 secs before choose what is the next elevator mission\n      setTimeout(() => {\n        //in case there is an floor that wait for elevator in the pending queue go to that floor\n        if (optionalFLoorTo !== undefined) {\n          setBottunColor(floorIndex, BUTTON_STATUS.WAITING);\n          handleClockAction(optionalFLoorTo, elevatorId, 'start', {\n            opacity: 1\n          });\n          setElevatorsData(prevData => prevData.map(data => data.key === elevatorId ? {\n            ...data,\n            handleElevetorArrived: handleElevetorArrived(data.key, optionalFLoorTo),\n            currFloor: floorIndex,\n            toFloor: optionalFLoorTo,\n            y: -height * optionalFLoorTo,\n            color: 'red',\n            dist: Math.abs(optionalFLoorTo - floorIndex)\n          } : data));\n          setBottunColor(optionalFLoorTo, BUTTON_STATUS.WAITING);\n\n          //else change the elevator color to black and wait for any reservation\n        } else {\n          setElevatorsData(prevData => prevData.map(data => data.key === elevatorId ? {\n            ...data,\n            currFloor: floorIndex,\n            toFloor: -1,\n            occupied: false,\n            color: 'black',\n            dist: 0\n          } : data));\n        }\n        setBottunColor(floorIndex, BUTTON_STATUS.CALL);\n      }, 2000);\n    };\n  }\n\n  //choose the colsest elevator, if not exists return undifined\n  function chooseTheClosestElevator(toFloor) {\n    let availableElevators = elevatorsData.filter(elevator => !elevator.occupied);\n    if (availableElevators.length === 0) {\n      return undefined;\n    }\n    let closestElevator = availableElevators[0];\n    let closestDistance = Math.abs(availableElevators[0].currFloor - toFloor);\n    for (const object of availableElevators) {\n      const distance = Math.abs(object.currFloor - toFloor);\n      if (distance < closestDistance) {\n        closestDistance = distance;\n        closestElevator = object;\n      }\n    }\n    return closestElevator;\n  }\n  function handleClockAction(floorIndex, elevatorIndex, action, newStyles) {\n    function setTime(timersArr) {\n      return timersArr.map((timer, i) => {\n        if (i === elevatorIndex) {\n          return {\n            ...timer,\n            onChange: action,\n            styles: newStyles\n          };\n        } else {\n          return timer;\n        }\n      });\n    }\n    setFloorsData(prevData => prevData.map(floorData => {\n      const newData = floorData.index === floorIndex ? {\n        ...floorData,\n        timeArr: setTime(floorData.timeArr)\n      } : floorData;\n      if (floorData.index === floorIndex) {}\n      return newData;\n    }));\n  }\n\n  //when a floor want elevator reservation\n  function handleElevatorReservation(floorIndex) {\n    //if all the elevators are full put the floor on pending queue\n    let elevator;\n    if (size() > 0 || (elevator = chooseTheClosestElevator(floorIndex)) === undefined) {\n      enqueue(floorIndex);\n      setBottunColor(floorIndex, BUTTON_STATUS.WAITING);\n\n      //else have elevator change y value and go there\n    } else {\n      const elevatorNumber = elevator.key;\n\n      //if there is elevatoe in the floor just say the elevator arrived\n      if (elevator.currFloor === floorIndex) {\n        setBottunColor(floorIndex, BUTTON_STATUS.ARRIVED);\n        setTimeout(() => {\n          setBottunColor(floorIndex, BUTTON_STATUS.CALL);\n        }, 2000);\n      }\n\n      //move the elevator to the floor\n      else {\n        handleClockAction(floorIndex, elevatorNumber, 'start', {\n          opacity: 1\n        });\n        setBottunColor(floorIndex, BUTTON_STATUS.WAITING);\n        setElevatorsData(prevData => prevData.map(data => {\n          const oldFloor = data.currFloor;\n          return data.key === elevatorNumber ? {\n            ...data,\n            handleElevetorArrived: handleElevetorArrived(data.key, floorIndex),\n            currFloor: oldFloor,\n            toFloor: floorIndex,\n            occupied: true,\n            color: 'red',\n            y: -height * floorIndex,\n            dist: Math.abs(oldFloor - floorIndex)\n          } : data;\n        }));\n      }\n    }\n  }\n  const createBoard2 = () => {\n    return floorsData.map(floorData => /*#__PURE__*/_jsxDEV(Floor, {\n      columns: columns,\n      squareRef: squareRef,\n      index: floorData.index,\n      buttonStatus: floorData.buttonStatus,\n      handleElevatorReservation: handleElevatorReservation,\n      timesData: floorData.timeArr\n    }, floorData.key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: [createBoard2(), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"elevators-container\",\n        style: {\n          width: `${width * columns}px`,\n          height: `${height * rows}px`\n        },\n        children: elevatorsData.map(data => /*#__PURE__*/_jsxDEV(AudioPlayerProvider, {\n          path: audioFilePath,\n          children: /*#__PURE__*/_jsxDEV(Elevetor, {\n            y: data.y,\n            color: data.color,\n            style: {\n              width: `${width}px`,\n              height: `${height}px`\n            },\n            handleElevetorArrived: handleElevetorArrived(data.key, data.toFloor),\n            dist: data.dist\n          }, data.key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 9\n          }, this)\n        }, 1, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 9\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 244,\n    columnNumber: 5\n  }, this);\n};\n_s(Board, \"lGUxYKgoj5/yn6PrU1/ju0ecVFg=\", false, function () {\n  return [useQueue];\n});\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Elevetor","useQueue","Floor","AudioPlayerProvider","audioFilePath","BUTTON_STATUS","jsxDEV","_jsxDEV","Board","_ref","_s","rows","columns","squareRef","squareData","setSquareData","floorsData","setFloorsData","createFloorsData","elevatorsData","setElevatorsData","enqueue","size","dequeue","width","height","ans","i","timesArr","Array","fill","onChange","styles","opacity","push","key","index","buttonStatus","CALL","timeArr","current","left","bottom","getBoundingClientRect","initElevatorDta","elevators","y","style","backgroundColor","handleElevetorArrived","occupied","currFloor","toFloor","color","dist","setBottunColor","bottunIndex","newStatus","prevData","map","floorData","elevatorId","floorIndex","optionalFLoorTo","data","ARRIVED","handleClockAction","setTimeout","undefined","WAITING","Math","abs","chooseTheClosestElevator","availableElevators","filter","elevator","length","closestElevator","closestDistance","object","distance","elevatorIndex","action","newStyles","setTime","timersArr","timer","newData","handleElevatorReservation","elevatorNumber","oldFloor","createBoard2","timesData","fileName","_jsxFileName","lineNumber","columnNumber","className","children","path","_c","$RefreshReg$"],"sources":["/Users/ywblhytr/Desktop/Elavator/ElevetorProject/src/components/Board.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport '../styles/boardStyles.css';\nimport Elevetor from './Elevator'\nimport { useQueue } from '../context/Queue';\nimport Floor from './Floor';\nimport { AudioPlayerProvider } from '../context/playMusic';\nimport '../constants/constants'\nimport {audioFilePath} from '../constants/config'\nimport { BUTTON_STATUS } from '../constants/constants';\n\n\n\nconst Board = ({ rows, columns }) => {\n  const squareRef = useRef(null);\n  const [squareData, setSquareData] = useState({})\n  const [floorsData, setFloorsData] = useState(createFloorsData())\n  const [elevatorsData, setElevatorsData] = useState([]);\n  const { enqueue, size , dequeue} = useQueue();\n\n//that data to change the elevator position, width,hight dynamicly\nconst width = squareData.width \nconst height = squareData.height \n\n\n\n//create floors data\nfunction createFloorsData() {\n  const ans = [];\n  for (let i = 0; i < rows; i++) {\n    const timesArr = new Array(columns).fill({onChange: 'stop', styles: {opacity: 0}}); \n    ans.push({\n      key: `floor-${i}`,\n      index: rows - i - 1,\n      buttonStatus: BUTTON_STATUS.CALL,\n      timeArr: timesArr\n    });\n  }\n  return ans;\n}\n\n\n\n\n  useEffect(() => {\n    if (squareRef.current) {\n      \n      const { width, height, left, bottom} = squareRef.current.getBoundingClientRect();\n      setSquareData({width, height, left, bottom})\n\n      initElevatorDta(width)\n    }\n     // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [width]);\n  \n  function initElevatorDta(width){\n    const elevators = [];\n    for (let i = 0; i < columns; i++) {\n      elevators.push({\n        key: i,\n        y: 0,\n        style: { backgroundColor: 'green', width: `${width}px`, left: `${i*(width)}px`},\n        handleElevetorArrived: handleElevetorArrived(i, 0),\n        occupied:false,\n        currFloor: 0,\n        toFloor: -1,\n        color: 'black',\n        dist:0,\n      });\n    }\n    setElevatorsData(elevators);\n  }\n\n//set bottun color \nfunction setBottunColor(bottunIndex, newStatus){\n  setFloorsData(prevData =>\n    prevData.map(floorData => floorData.index===bottunIndex?{...floorData, buttonStatus: newStatus}:floorData))\n}\n\nfunction handleElevetorArrived(elevatorId, floorIndex){\n  return () => {\n    \n    //make it the elivator color to green, and bottun to the new style\n    const optionalFLoorTo = dequeue()\n    setElevatorsData(prevData => (prevData.map(data =>\n      data.key === elevatorId?{\n        ...data, \n        color:'green' \n      }: \n      data )))\n    setBottunColor(floorIndex, BUTTON_STATUS.ARRIVED)\n\n    handleClockAction(floorIndex,elevatorId,'reset',{opacity: 0})\n    //wait 2 secs before choose what is the next elevator mission\n    setTimeout(() => {\n      //in case there is an floor that wait for elevator in the pending queue go to that floor\n      if (optionalFLoorTo !== undefined) {\n        setBottunColor(floorIndex,BUTTON_STATUS.WAITING)\n        handleClockAction(optionalFLoorTo,elevatorId,'start',{opacity: 1})\n        setElevatorsData(prevData => (prevData.map(data =>\n          data.key === elevatorId?{...data, \n          handleElevetorArrived: handleElevetorArrived(data.key ,optionalFLoorTo),\n          currFloor: floorIndex,\n          toFloor: optionalFLoorTo,\n          y:-(height)*optionalFLoorTo,\n          color: 'red',\n          dist:Math.abs(optionalFLoorTo-floorIndex)\n          }: \n          data )))\n          setBottunColor(optionalFLoorTo, BUTTON_STATUS.WAITING)\n\n        //else change the elevator color to black and wait for any reservation\n      }else{\n\n        setElevatorsData(prevData => (prevData.map(data =>\n            data.key === elevatorId?{...data, \n            currFloor: floorIndex,\n            toFloor: -1,\n            occupied: false,\n            color:'black',\n            dist:0       \n          }: \n            data )))\n      }\n      setBottunColor(floorIndex,BUTTON_STATUS.CALL)\n    }, 2000);\n  }\n  \n}\n\n//choose the colsest elevator, if not exists return undifined\nfunction chooseTheClosestElevator(toFloor){\n    let availableElevators = elevatorsData.filter(elevator => !elevator.occupied)\n    if(availableElevators.length === 0){\n      return undefined;\n    }\n    let closestElevator = availableElevators[0];\n    let closestDistance = Math.abs(availableElevators[0].currFloor - toFloor);\n\n    for (const object of availableElevators) {\n      const distance = Math.abs(object.currFloor - toFloor);\n\n      if (distance < closestDistance) {\n        closestDistance = distance;\n        closestElevator = object;\n      }\n  }\n  return closestElevator\n}\n\nfunction handleClockAction(floorIndex, elevatorIndex, action, newStyles){\n\n  function setTime(timersArr) {\n    return timersArr.map((timer, i) => {\n      if (i === elevatorIndex) {\n        return {\n          ...timer,\n          onChange: action,\n          styles: newStyles\n        };\n      } else {\n        return timer;\n      }\n    });\n  }\n\n  setFloorsData(prevData =>\n      prevData.map(floorData =>\n        {\n          const newData = floorData.index === floorIndex? {\n            ...floorData, \n            timeArr: setTime(floorData.timeArr)\n          }:floorData \n          if(floorData.index === floorIndex){\n            \n          }\n          return newData\n        }\n     \n    ))\n}\n\n//when a floor want elevator reservation\n function handleElevatorReservation(floorIndex) {\n\n  \n\n    //if all the elevators are full put the floor on pending queue\n    let elevator;\n    if(size() > 0 || (elevator = chooseTheClosestElevator(floorIndex)) === undefined){\n      enqueue(floorIndex)  \n      setBottunColor(floorIndex, BUTTON_STATUS.WAITING)\n\n  //else have elevator change y value and go there\n    }else{\n      const elevatorNumber = elevator.key\n\n      //if there is elevatoe in the floor just say the elevator arrived\n      if(elevator.currFloor === floorIndex){\n        setBottunColor(floorIndex,BUTTON_STATUS.ARRIVED)\n        setTimeout(() => {setBottunColor(floorIndex,BUTTON_STATUS.CALL)},2000)\n      }\n      \n      //move the elevator to the floor\n      else{\n        handleClockAction(floorIndex,elevatorNumber,'start',{opacity: 1})\n        setBottunColor(floorIndex,BUTTON_STATUS.WAITING)\n\n        setElevatorsData(prevData => (prevData.map(data =>\n          {\n            const oldFloor = data.currFloor\n  \n            return data.key === elevatorNumber?\n            {\n              ...data, \n              handleElevetorArrived: handleElevetorArrived(data.key ,floorIndex),\n              currFloor:oldFloor,\n              toFloor: floorIndex,\n              occupied: true, \n              color: 'red',\n              y:-(height)*floorIndex,\n              dist: Math.abs(oldFloor-floorIndex)       \n            }: data \n              \n          })))\n      }\n    }\n    \n  }\n\n  const createBoard2 = () => {\n    return floorsData.map((floorData) => (\n      <Floor\n        columns={columns}\n        squareRef={squareRef}\n        key={floorData.key}\n        index={floorData.index}\n        buttonStatus={floorData.buttonStatus}\n        handleElevatorReservation={handleElevatorReservation}\n        timesData = {floorData.timeArr}\n      />\n    ));\n  };\n  return (\n    <div className='main'>\n      <div className=\"board\">\n        {createBoard2()}\n        <div className='elevators-container' style={{width: `${width*columns}px`,height: `${height*rows}px`}}>\n        {elevatorsData.map(data => (\n        <AudioPlayerProvider path={audioFilePath} key = {1}>\n        <Elevetor\n          key={data.key}\n          y={data.y}\n          color = {data.color}\n          style={{ width: `${width}px`, height: `${height}px`}}\n          handleElevetorArrived={handleElevetorArrived(data.key, data.toFloor)}\n          dist={data.dist}\n        />\n        </AudioPlayerProvider>\n      ))} \n      </div>\n    </div>\n  </div>);\n  \n};\n\nexport default Board;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}