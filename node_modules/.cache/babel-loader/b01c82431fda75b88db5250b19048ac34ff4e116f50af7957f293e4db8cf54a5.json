{"ast":null,"code":"var _jsxFileName = \"/Users/ywblhytr/Desktop/Elavator/ElevetorProject/src/context/floorController.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { BUTTON_STATUS } from '../constants/constants';\nimport { TIMER } from '../constants/constants';\nimport Floor from '../components/Floor';\nimport { useElevatorController } from './elevatorController';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FloorControllerContext = /*#__PURE__*/createContext();\nexport const useFloorController = squareRef => {\n  _s();\n  const context = useContext(FloorControllerContext);\n  return {\n    ...context,\n    ...squareRef\n  };\n};\n_s(useFloorController, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nconst FloorControllerProvider = _ref => {\n  _s2();\n  let {\n    children,\n    columns,\n    rows,\n    squareRef\n  } = _ref;\n  const [floorsData, setFloorsData] = useState(createFloorsData());\n  function createFloorsData() {\n    const ans = [];\n    for (let i = 0; i < rows; i++) {\n      const timesArr = new Array(columns).fill(TIMER.STOP);\n      ans.push({\n        key: `floor-${i}`,\n        index: rows - i - 1,\n        buttonStatus: BUTTON_STATUS.CALL,\n        timeArr: timesArr\n      });\n    }\n    return ans;\n  }\n\n  /**\n   * Hides or turns off the hours in the slot\n   * @param {number} floorIndex - Row number\n   * @param {number} elevatorIndex - Column number\n   * @param {string, opacity} param2 - the action on the time in the square (show/hide)\n   */\n  function handleClockAction(floorIndex, elevatorIndex, _ref2) {\n    let {\n      onChange: action,\n      styles: newStyles\n    } = _ref2;\n    //help function inside a function, set the square time\n    function setTime(timersArr) {\n      return timersArr.map((timer, i) => {\n        if (i === elevatorIndex) {\n          return {\n            ...timer,\n            onChange: action,\n            styles: newStyles\n          };\n        } else {\n          return timer;\n        }\n      });\n    }\n\n    //set the flloor data to change the clocks\n    setFloorsData(prevData => prevData.map(floorData => {\n      const newData = floorData.index === floorIndex ? {\n        ...floorData,\n        timeArr: setTime(floorData.timeArr)\n      } : floorData;\n      if (floorData.index === floorIndex) {}\n      return newData;\n    }));\n  }\n\n  /**\n   * \n   * @param {function} handleButtonClick - Function that handle's an elevator call \n   * @returns the elevators HTML code\n   */\n  function createFloors(handleButtonClick) {\n    return floorsData.map(floorData => /*#__PURE__*/_jsxDEV(Floor, {\n      columns: columns,\n      squareRef: squareRef,\n      index: floorData.index,\n      buttonStatus: floorData.buttonStatus,\n      handleElevatorReservation: handleButtonClick,\n      timesData: floorData.timeArr\n    }, floorData.key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this));\n  }\n  ;\n\n  /**\n   * \n   * @param {number} floorIndex - The button at the floor\n   * @param {number} newStatus - To handle the new style of the button\n   */\n  function setButtonStatus(floorIndex, newStatus) {\n    setFloorsData(prevData => prevData.map(floorData => floorData.index === floorIndex ? {\n      ...floorData,\n      buttonStatus: newStatus\n    } : floorData));\n  }\n  const value = {\n    createFloorsData,\n    setFloorsData,\n    floorsData,\n    setButtonStatus,\n    handleClockAction,\n    createFloors\n  };\n  return /*#__PURE__*/_jsxDEV(FloorControllerContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n};\n_s2(FloorControllerProvider, \"o13BJnMD4tKLJYWG+BUUEOZK1bw=\");\n_c = FloorControllerProvider;\nexport default FloorControllerProvider;\nvar _c;\n$RefreshReg$(_c, \"FloorControllerProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","BUTTON_STATUS","TIMER","Floor","useElevatorController","jsxDEV","_jsxDEV","FloorControllerContext","useFloorController","squareRef","_s","context","FloorControllerProvider","_ref","_s2","children","columns","rows","floorsData","setFloorsData","createFloorsData","ans","i","timesArr","Array","fill","STOP","push","key","index","buttonStatus","CALL","timeArr","handleClockAction","floorIndex","elevatorIndex","_ref2","onChange","action","styles","newStyles","setTime","timersArr","map","timer","prevData","floorData","newData","createFloors","handleButtonClick","handleElevatorReservation","timesData","fileName","_jsxFileName","lineNumber","columnNumber","setButtonStatus","newStatus","value","Provider","_c","$RefreshReg$"],"sources":["/Users/ywblhytr/Desktop/Elavator/ElevetorProject/src/context/floorController.jsx"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\nimport { BUTTON_STATUS } from '../constants/constants';\nimport { TIMER } from '../constants/constants';\nimport Floor from '../components/Floor';\nimport { useElevatorController } from './elevatorController';\n\nconst FloorControllerContext = createContext();\n\nexport const useFloorController = (squareRef) => {\n  const context =  useContext(FloorControllerContext);\n  return { ...context, ...squareRef };\n};\n\n\nconst FloorControllerProvider = ({ children, columns, rows, squareRef }) => {\n  const [floorsData, setFloorsData] = useState(createFloorsData())\n\n  function createFloorsData() {\n    const ans = [];\n    for (let i = 0; i < rows; i++) {\n      const timesArr = new Array(columns).fill(TIMER.STOP); \n      ans.push({\n        key: `floor-${i}`,\n        index: rows - i - 1,\n        buttonStatus: BUTTON_STATUS.CALL,\n        timeArr: timesArr\n      });\n    }\n    return ans;\n  }\n\n  /**\n   * Hides or turns off the hours in the slot\n   * @param {number} floorIndex - Row number\n   * @param {number} elevatorIndex - Column number\n   * @param {string, opacity} param2 - the action on the time in the square (show/hide)\n   */\n  function handleClockAction(floorIndex, elevatorIndex, { onChange: action, styles: newStyles }){\n    //help function inside a function, set the square time\n    function setTime(timersArr) {\n      return timersArr.map((timer, i) => {\n        if (i === elevatorIndex) {\n          return {\n            ...timer,\n            onChange: action,\n            styles: newStyles\n          };\n        } else {\n          return timer;\n        }\n      });\n    }\n\n    //set the flloor data to change the clocks\n    setFloorsData(prevData =>\n        prevData.map(floorData =>\n          {\n            const newData = floorData.index === floorIndex? {\n              ...floorData, \n              timeArr: setTime(floorData.timeArr)\n            }:floorData \n            if(floorData.index === floorIndex){\n            }\n            return newData\n          }\n      ))\n  }\n\n  /**\n   * \n   * @param {function} handleButtonClick - Function that handle's an elevator call \n   * @returns the elevators HTML code\n   */\n  function createFloors(handleButtonClick) {\n    return floorsData.map((floorData) => (\n      <Floor\n        columns={columns}\n        squareRef={squareRef}\n        key={floorData.key}\n        index={floorData.index}\n        buttonStatus={floorData.buttonStatus}\n        handleElevatorReservation={handleButtonClick}\n        timesData = {floorData.timeArr}\n      />\n    ));\n  };\n  \n  /**\n   * \n   * @param {number} floorIndex - The button at the floor\n   * @param {number} newStatus - To handle the new style of the button\n   */    \n  function setButtonStatus(floorIndex, newStatus){\n    setFloorsData(prevData =>\n    prevData.map(floorData => floorData.index === floorIndex?{...floorData, buttonStatus: newStatus}:floorData))\n  }\n\n\n\n  const value = {\n                  createFloorsData,\n                  setFloorsData,\n                  floorsData,\n                  setButtonStatus,\n                  handleClockAction,\n                  createFloors\n                }\n\n\n  return (\n    <FloorControllerContext.Provider value={value}>\n      {children}\n    </FloorControllerContext.Provider>\n  );\n};\n\nexport default FloorControllerProvider;\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAClE,SAASC,aAAa,QAAQ,wBAAwB;AACtD,SAASC,KAAK,QAAQ,wBAAwB;AAC9C,OAAOC,KAAK,MAAM,qBAAqB;AACvC,SAASC,qBAAqB,QAAQ,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7D,MAAMC,sBAAsB,gBAAGT,aAAa,EAAE;AAE9C,OAAO,MAAMU,kBAAkB,GAAIC,SAAS,IAAK;EAAAC,EAAA;EAC/C,MAAMC,OAAO,GAAIZ,UAAU,CAACQ,sBAAsB,CAAC;EACnD,OAAO;IAAE,GAAGI,OAAO;IAAE,GAAGF;EAAU,CAAC;AACrC,CAAC;AAACC,EAAA,CAHWF,kBAAkB;AAM/B,MAAMI,uBAAuB,GAAGC,IAAA,IAA4C;EAAAC,GAAA;EAAA,IAA3C;IAAEC,QAAQ;IAAEC,OAAO;IAAEC,IAAI;IAAER;EAAU,CAAC,GAAAI,IAAA;EACrE,MAAM,CAACK,UAAU,EAAEC,aAAa,CAAC,GAAGnB,QAAQ,CAACoB,gBAAgB,EAAE,CAAC;EAEhE,SAASA,gBAAgBA,CAAA,EAAG;IAC1B,MAAMC,GAAG,GAAG,EAAE;IACd,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,IAAI,EAAEK,CAAC,EAAE,EAAE;MAC7B,MAAMC,QAAQ,GAAG,IAAIC,KAAK,CAACR,OAAO,CAAC,CAACS,IAAI,CAACvB,KAAK,CAACwB,IAAI,CAAC;MACpDL,GAAG,CAACM,IAAI,CAAC;QACPC,GAAG,EAAG,SAAQN,CAAE,EAAC;QACjBO,KAAK,EAAEZ,IAAI,GAAGK,CAAC,GAAG,CAAC;QACnBQ,YAAY,EAAE7B,aAAa,CAAC8B,IAAI;QAChCC,OAAO,EAAET;MACX,CAAC,CAAC;IACJ;IACA,OAAOF,GAAG;EACZ;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,SAASY,iBAAiBA,CAACC,UAAU,EAAEC,aAAa,EAAAC,KAAA,EAA0C;IAAA,IAAxC;MAAEC,QAAQ,EAAEC,MAAM;MAAEC,MAAM,EAAEC;IAAU,CAAC,GAAAJ,KAAA;IAC3F;IACA,SAASK,OAAOA,CAACC,SAAS,EAAE;MAC1B,OAAOA,SAAS,CAACC,GAAG,CAAC,CAACC,KAAK,EAAEtB,CAAC,KAAK;QACjC,IAAIA,CAAC,KAAKa,aAAa,EAAE;UACvB,OAAO;YACL,GAAGS,KAAK;YACRP,QAAQ,EAAEC,MAAM;YAChBC,MAAM,EAAEC;UACV,CAAC;QACH,CAAC,MAAM;UACL,OAAOI,KAAK;QACd;MACF,CAAC,CAAC;IACJ;;IAEA;IACAzB,aAAa,CAAC0B,QAAQ,IAClBA,QAAQ,CAACF,GAAG,CAACG,SAAS,IACpB;MACE,MAAMC,OAAO,GAAGD,SAAS,CAACjB,KAAK,KAAKK,UAAU,GAAE;QAC9C,GAAGY,SAAS;QACZd,OAAO,EAAES,OAAO,CAACK,SAAS,CAACd,OAAO;MACpC,CAAC,GAACc,SAAS;MACX,IAAGA,SAAS,CAACjB,KAAK,KAAKK,UAAU,EAAC,CAClC;MACA,OAAOa,OAAO;IAChB,CAAC,CACJ,CAAC;EACN;;EAEA;AACF;AACA;AACA;AACA;EACE,SAASC,YAAYA,CAACC,iBAAiB,EAAE;IACvC,OAAO/B,UAAU,CAACyB,GAAG,CAAEG,SAAS,iBAC9BxC,OAAA,CAACH,KAAK;MACJa,OAAO,EAAEA,OAAQ;MACjBP,SAAS,EAAEA,SAAU;MAErBoB,KAAK,EAAEiB,SAAS,CAACjB,KAAM;MACvBC,YAAY,EAAEgB,SAAS,CAAChB,YAAa;MACrCoB,yBAAyB,EAAED,iBAAkB;MAC7CE,SAAS,EAAIL,SAAS,CAACd;IAAQ,GAJ1Bc,SAAS,CAAClB,GAAG;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAMrB,CAAC;EACJ;EAAC;;EAED;AACF;AACA;AACA;AACA;EACE,SAASC,eAAeA,CAACtB,UAAU,EAAEuB,SAAS,EAAC;IAC7CtC,aAAa,CAAC0B,QAAQ,IACtBA,QAAQ,CAACF,GAAG,CAACG,SAAS,IAAIA,SAAS,CAACjB,KAAK,KAAKK,UAAU,GAAC;MAAC,GAAGY,SAAS;MAAEhB,YAAY,EAAE2B;IAAS,CAAC,GAACX,SAAS,CAAC,CAAC;EAC9G;EAIA,MAAMY,KAAK,GAAG;IACEtC,gBAAgB;IAChBD,aAAa;IACbD,UAAU;IACVsC,eAAe;IACfvB,iBAAiB;IACjBe;EACF,CAAC;EAGf,oBACE1C,OAAA,CAACC,sBAAsB,CAACoD,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAA3C,QAAA,EAC3CA;EAAQ;IAAAqC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACuB;AAEtC,CAAC;AAACzC,GAAA,CApGIF,uBAAuB;AAAAgD,EAAA,GAAvBhD,uBAAuB;AAsG7B,eAAeA,uBAAuB;AAAC,IAAAgD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}